{"pred": "\t\t\t\tParticipant p = (Participant)m_Participants[i];\n\t\t\t\tfor ( int j = 0; j < p.Players.Length; ++j )\n\t\t\t\t{\n\t\t\t\t\tDuelPlayer dp =", "answers": ["\t\t\t\tParticipant p = (Participant)m_Participants[i];"], "all_classes": null, "length": 5243}
{"pred": "\t\t\tself._init(graph, Y_, Z_)\n\t\t\tA_ = self.best(e_u)\n\t\t\tsolutions.append(A_)\n\t\t\tfor root in roots:\n\t\t\t\tself._init(graph)\n\t\t\t\t", "answers": ["\t\t\tZ_.add_edge(e_u, e_v, **data.copy())"], "all_classes": null, "length": 1069}
{"pred": "if __name__ == '__main__':\n    TestSndfile.main()\n# vim: tabstop=8 expandtab shiftwidth=4 softtabstop=4\n# End of code.", "answers": ["        rfd, fd, cfilename   = open_tmp_file('rwseektest.wav')"], "all_classes": null, "length": 844}
{"pred": "\n    def get_subtitle_status(self, language):\n        \"\"\"\n        Get the status of the subtitle for the given language.\n        \"\"\"\n        status_tag = self.get_element_by_css_selector(\n            self._STATUS_TAGS, language)\n", "answers": ["            if e.text == language:"], "all_classes": null, "length": 462}
{"pred": "\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;\n\t\t\t\t\twriter.addAttribute(\"name\", styleValue.getName());\n\t\t\t\t\twriter.addAttribute(\"value\", styleValue.getValue());\n\t\t\t\t}\n\t\t\t", "answers": ["\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;"], "all_classes": null, "length": 570}
{"pred": "\ndef _get_question_data(question_id):\n    db = self.widgets.questions_database.text()\n    conn = sqlite3.connect(db)\n    cursor = conn.cursor()\n    cursor.execute(\"select question, category, type from questions where", "answers": ["        longest = max(self.answers)"], "all_classes": null, "length": 1229}
{"pred": "                   mob.Target = new SR_TargetLocation(RuneAcc, mob);\n                    break;\n                case 3:\n                    mob.SendMessage(\"Enter a description:\");\n                    mob.Prompt = new SR_NewRunebookPrompt(RuneAcc,", "answers": ["                    mob.Target = new SR_NewRuneTarget(RuneAcc);"], "all_classes": null, "length": 907}
{"pred": "           for (X509Certificate cert : chain) {\n                s.println(\"  \" + cert);\n            }\n        }\n        s.println(\"***\");\n    }\n}\n/*\n * ServerKeyExchange ... SERVER --> CLIENT\n *\n * Server", "answers": ["            for (int i = 0; i < chain.length; i++)"], "all_classes": null, "length": 1820}
{"pred": "           try {\n                sp = new JESpace (name, path);\n                spaceRegistrar.put (name, sp);\n            } catch (SpaceError e) {\n                error (e);\n                return null;\n            }\n        }\n        return sp", "answers": ["            sp = new JESpace(name, path);"], "all_classes": null, "length": 1096}
{"pred": "\t\t\t\t\tpos = btnEnergizeAll.bottom();\n\t\t\t\t}\n\t\t\t}\n\t\t\tRedButton btnImp = new RedButton(Messages.get(AlchemyScene.class, \"imp\")) {\n\t\t\t\t@Override\n\t", "answers": ["\t\t\t\t\tpos = btnEnergizeAll.bottom();"], "all_classes": null, "length": 567}
{"pred": "# Create a dispatcher instance\ndispatcher = SoapDispatcher(name=\"MyDispatcher\",\n                           documentation=\"MyDispatcher documentation\",\n                           location=\"http://localhost:8000/MyDispatcher\",\n                           action=\"http://localhost:8000/My", "answers": ["        length = int(environ['CONTENT_LENGTH'])"], "all_classes": null, "length": 1670}
{"pred": "   def lock_status(self, status_id):\n        self.webview.lock_status(status_id)\n\n# This is the code that needs to be completed\n# The lock_status method is called when the user clicks on a command button\n# The method should prevent the", "answers": ["        mark = \"setRepeated('%s');\" % status_id"], "all_classes": null, "length": 686}
{"pred": "def get_process_data(worker, params):\n    parent_conn, child_conn = Pipe()\n    process = Process(target=worker, args=(params, child_conn))\n    process.start()\n    result = child_conn.recv()\n    process.join()", "answers": ["            return {\"error\": False}"], "all_classes": null, "length": 958}
{"pred": "\t\t\tZoneIdentityPermission c = (ZoneIdentityPermission) a.Union (b);\n\t\t\tAssert.IsTrue (Same (a, c), \"Trusted+Untrusted\");\n\t\t\tAssert.IsFalse (Object.ReferenceEquals (a, c), \"!ReferenceEquals", "answers": ["\t\t\tIPermission result = a.Union (b);"], "all_classes": null, "length": 778}
{"pred": "# This is the main function that sets up the SSL context and returns it.\n# It takes the following arguments:\n#   keyfile: the path to the private key file\n#   certfile: the path to the certificate file\n#   ca_certs: the path to the CA certificate file", "answers": ["        certs = []"], "all_classes": null, "length": 713}
{"pred": "       DomainInfo domainInfo = manager.getDomainInfo(domain);\n        request.setAttribute(\"domainInfo\", domainInfo);\n    }\n}", "answers": ["        User user = getUser(request);"], "all_classes": null, "length": 847}
{"pred": "       self.__tmp_dir, 'datastream')\n        self.__datastream_fd = os.open(\n            self.__datastream_address, os.O_RDWR | os.O_CREAT, 0o644)\n        self.__datastream", "answers": ["            self.__tmp_dir, 'datastream.%s.pipe' % uuid.uuid4().hex)"], "all_classes": null, "length": 1276}
{"pred": "\t\t\t\tif (option1) {\n\t\t\t\t\tjumpID = Convert.ToInt32(store.Value[iter, 0]);\n\t\t\t\t\t//TODO: change in database\n\t\t\t\t}\n\t\t\t}\n\t\t}", "answers": ["\t\t\t\tif(! option1) {"], "all_classes": null, "length": 957}
{"pred": "       String[] argValues = new String[args.length];\n        for (int i = 0; i < args.length; i++) {\n            if (args[i] == null) {\n                continue;\n            }\n            String argName = args[i].getName();", "answers": ["        if ((args == null) || (args.length == 0)) {"], "all_classes": null, "length": 1570}
{"pred": "\t\t\t\tfirms = loadFromFile();\n\t\t\t}\n\t\t}));\n\t\tprivate ConfigFile<Object, Object> configFile;\n\t\tprivate File(ConfigFile<Object, Object> configFile)\n\t\t{\n\t\t\tthis.configFile", "answers": ["\t\t\t\tfirms = loadFromFile();"], "all_classes": null, "length": 515}
{"pred": "\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {\n\t\t\t@Override\n\t\t\tprotected void createFieldEditors() {\n\t\t\t\taddField(new BooleanFieldEditor(SHOW_MINI_MODE_DIALOG,\n\t\t\t\t", "answers": ["\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {"], "all_classes": null, "length": 925}
{"pred": "               if (m_Owner.SpellTarget is IPoint3D)\n                {\n                    m_Owner.Target((IPoint3D)m_Owner.SpellTarget);\n                }\n            }\n        }\n        private class InternalTarget : Target\n        {\n           ", "answers": ["                if (m_Owner.SpellTarget == null)"], "all_classes": null, "length": 538}
{"pred": "# The following code is used to implement the \"identity_map\" feature of the Session.\n# It's a dictionary that maps ORM-mapped instances to their Session-local state.\n# The Session uses this dictionary to keep track of which instances are currently\n# in the Session, and to", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "\t\tfor(IField field : fields) {\n\t\t\tfinal String name = field.getName().toString();\n\t\t\tList<IField> named = name2Field.get(name);\n\t\t\tif(named == null) {\n\t\t\t\tnamed = new ArrayList", "answers": ["\t\tfor(IField field : fields) { "], "all_classes": null, "length": 1985}
{"pred": "====================\n\nclass UIModule(object):\n    \"\"\"A module that provides a set of UI functions.\n\n    UIModules are used to provide a set of functions that can be used to\n    render HTML templates.  They are typically used to provide a set of\n    functions that can be used", "answers": ["    like ``r'/foo/?'`` in conjunction with using the decorator."], "all_classes": null, "length": 6502}
{"pred": "\t\t\tbase.Render (writer);\n\t\t}\n\t}\n}", "answers": ["\t\t\tif ((Controls.Count == 0) && (initialIndex != -1)) "], "all_classes": null, "length": 777}
{"pred": "if __name__ == '__main__':\n    args = parser.parse_args()\n    downloader = WigleDownloader( args.user, args.password, args.coordfile, args.outpath )\n    downloader.run()", "answers": ["    args = parser.parse_args()"], "all_classes": null, "length": 1225}
{"pred": "               if (mod >= 156 && mod <= 159)\n                {\n                    if (i.SkillBonuses.GetBonus(1) > 0)\n                    {\n                        foreach (SkillName sk in Imbuing.Poss", "answers": ["                if (mod >= 156 && mod <= 160)"], "all_classes": null, "length": 1845}
{"pred": "       builds += [{'os': 'os_%s' % p, 'os_pretty': p,\n                    'download_link': make_download_link(\n                        'firefox', alt_build, version, p, locale,\n                        force_direct=force_", "answers": ["        for plat_os in ['Windows', 'Linux', 'Linux 64', 'OS X']:"], "all_classes": null, "length": 816}
{"pred": "\t\tif (projectID!=null && issueTypeID!=null) {\n\t\t\tstateBeansList = StatusBL.loadByProjectTypeIssueTypeAssignments(projectID, issueTypeID, objectID);\n\t\t} else {\n\t\t\tstateBeansList = Status", "answers": ["\t\tif (projectID==null || issueTypeID==null) {"], "all_classes": null, "length": 1101}
{"pred": "           foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {\n                if ( argumentSyntax.Expression is IdentifierNameSyntax identifierNameSyntax && memberList.Any( x => x.Identifier.ValueText == identifierNameSyntax.Identifier.ValueText ) ) {\n                    toReplace[argumentSyntax", "answers": ["            foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {"], "all_classes": null, "length": 861}
{"pred": "       split_test = self._update_partition_id(0)\n        # Verify that the children are the same as before.\n        self._assert_children(2)\n        # Set to second group configuration.\n        split_test = self._update_partition_id(1)\n", "answers": ["        split_test = self._update_partition_id(0)"], "all_classes": null, "length": 2752}
{"pred": "           //if (vertical)\n            //    return;\n            //if (fontSpecific) {\n            //    CreateEncoding();\n            //}\n            //if (cmap31 != null) {\n            //    PdfStream cmapStream = new PdfStream(writer,", "answers": ["            foreach (object o in longTag.Values) {"], "all_classes": null, "length": 1490}
{"pred": "\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\t\tif (cgn.depth < 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// find the top-most cell that this cell is connected to", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "       task = new ListenableFutureTask<>(callable);\n        task.addListener(new FutureTaskListener<Bitmap>() {\n          @Override public void onSuccess(final Bitmap result) {\n            Util.runOnMain(new Runnable() {\n              @Override public void run()", "answers": ["        task = new ListenableFutureTask<>(callable);"], "all_classes": null, "length": 629}
{"pred": "               if (ke.getKeyCode() == KeyEvent.VK_DOWN) {\n                    final String down = cmdHistory.goDown();\n                    if (!msgTF.getText().equals(down)) {\n                        msgTF.setText(down);\n                    }\n               ", "answers": ["                else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {"], "all_classes": null, "length": 1035}
{"pred": "# TODO: Add tests for NodeEditTagsForm and NodeManagePoliciesForm\n# TODO: Add tests for NodeDetailsView\n# TODO: Add tests for NodeEditTagsForm and NodeManagePoliciesForm\n# TODO: Add tests for NodeEditTagsForm and NodeManagePoliciesForm\n", "answers": ["    prerequisite = NavigateToSibling('Details')"], "all_classes": null, "length": 534}
{"pred": "\t\tfor (IJRecognitionListener listener : recognitionListeners) {\n\t\t\tlistener.onRecognition(timestamp, sequenceTitles, sequences);\n\t\t}\n\t\tnotifyPoseListeners(timestamp, getCurrentPose());\n\t}\n\tpublic void notifyP", "answers": ["\t\tfor (IJRecognitionListener listener : recognitionListeners) {"], "all_classes": null, "length": 482}
{"pred": "               if (Enabled)\n                    ImageUrl = EnabledImageURL;\n                else\n                    ImageUrl = DisabledImageURL;\n            }\n            base.Render(writer);\n        }\n    }\n}", "answers": ["                ScriptManager sm = ScriptManager.GetCurrent(Page);"], "all_classes": null, "length": 655}
{"pred": "sharpness = compound.getInteger(\"sharpness\");\nfire = compound.getInteger(\"fire\");\nblast = compound.getInteger(\"blast\");\nsmite = compound.getInteger(\"smite\");\nbane = compound.getInteger(\"bane\");\ndamage = compound", "answers": ["\t\tdamageCooldown = compound.getInteger(\"DamageCooldown\");"], "all_classes": null, "length": 475}
{"pred": "       return getId() + \" [\" + getProbability() + \"%]\";\n    }\n}\n/**\n * A scope that limits the effect to a certain type of object.\n */\nclass Scope implements Comparable<Scope> {\n    public static final String TYPE_TAG = \"", "answers": ["        StringBuilder sb = new StringBuilder(32);"], "all_classes": null, "length": 661}
{"pred": "# test admin can access any group\ni = store.handle_indicators_search(token, {'itype': 'fqdn', 'groups': 'everyone'})\n# assert len(i) > 0\n# test admin can access any group\ni = store.handle_", "answers": ["    i = store.handle_indicators_create(t, {"], "all_classes": null, "length": 577}
{"pred": "# Test that the delta is correctly serialized to BSON\nself.assertEqual(\n    bson.BSON.serialize(self.Person(**self.Person._delta()).to_dict()),\n    bson.BSON.serialize(self.Person._delta())\n)\n\n# Test that", "answers": ["        p = Person.objects.get(name=\"owner\")"], "all_classes": null, "length": 701}
{"pred": "=======================\n\ndef inspect_l11_product(product_file_path, output_path=None, output_format=None):\n    \"\"\"\n    Open a L11 product for inspection.\n    If output_path is given then a new directory will be created. Each plot", "answers": ["                    interact(self._plot_line, x_name=widget_x, y_name=widget_y)"], "all_classes": null, "length": 1433}
{"pred": "               if (!ignored.Contains(path))\n                {\n                    toScan.Add(path);\n                }\n            }\n            foreach (var path in ignored)\n            {\n                if (_tempIgnoredPaths.TryGetValue(path, out var count))", "answers": ["                if (!ShouldIgnoreChange(path, ignored))"], "all_classes": null, "length": 513}
{"pred": "\t\treturn read(key, computed);\n\t}\n\t@Override\n\tpublic E compute(K key,\n\t\t\t\t\t BiFunction<? super K, ? super E, ? extends E> remappingFunction) {\n\t\tI computed = internalMap.compute(key, transform", "answers": ["\t\treturn read(key, computed);"], "all_classes": null, "length": 837}
{"pred": "       resbrains = cat.searchResults(query)\n        if len(resbrains) > 0:\n            objcomments = resbrains[0].getObject()\n            if objcomments.isDiscussable():\n                objcomments.toggleCommentsView()\n               ", "answers": ["        cat = getToolByName(self.context, 'uid_catalog')"], "all_classes": null, "length": 1519}
{"pred": "\t\t\tset { m_ID = value; }\n\t\t}\n\t\tpublic int Z\n\t\t{\n\t\t\tget { return m_Z; }\n\t\t\tset { m_Z = value; }\n\t\t}\n\t\tpublic int Hue\n\t", "answers": ["\t\t\tset { m_ID = (ushort)value; }"], "all_classes": null, "length": 1528}
{"pred": "                   // get channel_uri:\n                    // if it's not available yet, create it\n                    // and cache it\n                    if (null == scene.LandChannel)\n                    {\n                        // create a new channel\n                        // XXX: we need to check whether", "answers": ["                    channelUri = ChannelUri(scene, land);"], "all_classes": null, "length": 1661}
{"pred": "\t\t\t\treturn;\n\t\t\t}\n\t\t\tPayPeriodCur.DateStart=textDateStart.Date;\n\t\t\tPayPeriodCur.DateStop=textDateStop.Date;\n\t\t\tPayPeriodCur.DatePaycheck=textDatePaycheck.Date;", "answers": ["\t\t\t\tMsgBox.Show(this,\"Please fix data entry errors first.\");"], "all_classes": null, "length": 576}
{"pred": "       lat, lon = _build_lat_lon_for_NAMEII_timeseries(column_headings)\n        # Convert averaging/integrating to datetimes.\n        column_headings['Time'] = [\n            datetime.datetime.strptime(t, NAME", "answers": ["        lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)"], "all_classes": null, "length": 2765}
{"pred": "# This function is used by the `group_member_create` and `organization_member_create`\n# functions to check if the user is allowed to add a new member to the group or\n# organization.\n# It is a helper function for those two functions.\n# It checks if the", "answers": ["    group_id = data_dict['id']"], "all_classes": null, "length": 772}
{"pred": "\t\t\t\tString childClassName = predictionAttribute.getValue(example).toString();\n\t\t\t\tNode childNode = node.getChild(childClassName);\n\t\t\t\t// setting outcome\n\t\t\t\toutcomes[parentIndex] = childNode.getPartitionId();\n\t\t", "answers": ["\t\t\t\tString label = example.getValueAsString(predictionAttribute);"], "all_classes": null, "length": 784}
{"pred": "           return this.SearchSegments(settings, segments, null);\n        }\n        /// <summary>\n        /// Performs a search for an array of segments.\n        /// </summary>\n        /// <param name=\"settings\">The settings that define the search parameters.</param><param name=\"", "answers": ["            var searchResultsArray = new SearchResults[segments.Length];"], "all_classes": null, "length": 1172}
{"pred": "           codePoint = string.charAt(offset++) << 10 | string.charAt(offset++) & 0x3FF;\n         }\n         if (_range != null && _range.contains(codePoint)) {\n            return offset;\n         }\n         return -1;", "answers": ["            char low = string.charAt(offset++);"], "all_classes": null, "length": 6474}
{"pred": "\t\tObservationHistoryDAO observationHistoryDAO = new ObservationHistoryDAOImpl();\n\t\tObservationHistory observationHistory = observationHistoryDAO.getObservationHistoryByAccessionNumber(accessionNumber);\n\t\tif (observationHistory != null) {\n\t\t\tString", "answers": ["        if (GenericValidator.isBlankOrNull(studyFormName)) {"], "all_classes": null, "length": 945}
{"pred": "\t\t\t\t\tSendOrderToClient(newConn, \"ServerError\", message);\n\t\t\t\t\tDropClient(newConn);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (handshake.Mod != ModData.Manifest.Id)", "answers": ["\t\t\t\t\tSendOrderTo(newConn, \"AuthenticationError\", message);"], "all_classes": null, "length": 807}
{"pred": "\t\tif (beans == null)\n\t\t\treturn coll;\n\t\tfor (int i = 0; i < beans.length; i++)\n\t\t{\n\t\t\tcoll.add(beans[i].buildVo());\n\t\t}\n\t\treturn coll;\n", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 833}
{"pred": "elif prnum == 'advanced':\n    advanced()\nelif prnum == 'viewsdb':\n    viewsdb()\nelif prnum == 'date':\n    date()\nelif prnum == 'donate':\n    donate()\nelse:\n    notify()\n#-------------------\n", "answers": ["elif prnum == 'advanced':"], "all_classes": null, "length": 549}
{"pred": "           int [] ret = new int[A.Dimensions.NumberOfDimensions];\n            A.GetValueSeq(seqindex,ref ret);\n            return ret;\n        }\n        /// <summary>\n        /// convert subscript indices into a sequential index\n        /// </summary>", "answers": ["            int [] ret = new int[A.Dimensions.NumberOfDimensions]; "], "all_classes": null, "length": 1174}
{"pred": " pD[ 'plotName' ] = pD[ 'plotName' ].replace( ' ', '_' )\n  pD[ 'plotName' ] = pD[ 'plotName' ].replace( '/', '_' )\n  pD[ 'plotName' ] =", "answers": ["  reportName = pD[ 'plotName' ]"], "all_classes": null, "length": 1147}
{"pred": "\t\t\tif (player.IsPaused || player.IsDead || player.IsDisconnected || player.IsIdle)\n\t\t\t\treturn;\n\t\t\tif (player.IsWon || player.IsLost)\n\t\t\t\treturn;\n\t\t", "answers": ["\t\t\tforeach (var rp in world.ActorsWithTrait<RallyPoint>())"], "all_classes": null, "length": 985}
{"pred": "       // Save the compiled plan to a file\n        String planFileName = BuildDirectoryUtils.getTestPlanFileName(name, \"json\");\n        JSONObject planJson = new JSONObject();\n        try {\n            planJson.put(\"plan\", plan.toJSON());\n            planJson.put", "answers": ["        List<PlanNodeList> nodeLists = new ArrayList<PlanNodeList>();"], "all_classes": null, "length": 768}
{"pred": "\t\t\tthis.comboBox1.Size = new System.Drawing.Size(221, 21);\n\t\t\tthis.comboBox1.TabIndex = 0;\n\t\t\t// \n\t\t\t// textBox2\n\t\t\t// \n", "answers": ["\t\t\tthis.comboBox1.Size = new System.Drawing.Size(224, 21);"], "all_classes": null, "length": 1012}
{"pred": "\t\t\tdcb.BaudRate = baud_rate;\n\t\t\tdcb.Parity = (byte)parity;\n\t\t\tdcb.ByteSize = (byte)data_bits;\n\t\t\tdcb.StopBits = (byte)bits;\n", "answers": ["\t\t\tdcb.SetValues (baud_rate, parity, data_bits, bits, hs);"], "all_classes": null, "length": 1031}
{"pred": "   def test_user_with_cobrand_admin_can_edit(self):\n        admin = self.make_user('admin')\n        admin.is_superuser = True\n        admin.save()\n        cobrand = Cobranding.objects.create(user=self", "answers": ["        page = self.get_page(self.user.get_profile().get_url(),"], "all_classes": null, "length": 840}
{"pred": "   _keep_tempdir = parser.parse_args().keep_tempdir\n    unittest.main()\nif __name__ == '__main__':\n    main()\n# vim: set fileencoding=utf-8 :\n# Local Variables:\n# mode: python\n", "answers": ["    options, args = parser.parse_known_args()"], "all_classes": null, "length": 555}
{"pred": "\t\tself[\"list\"].setList(self.newAPList)\n\t\tself[\"list\"].setCurrent(self.currentListIndex)\n\t\tself[\"key_yellow\"].setText(_(\"Rescan\"))\n\t\tself[\"key_yellow\"].show()\n\t\tself.", "answers": ["\t\t\tcurrentListEntry = self[\"list\"].getCurrent()"], "all_classes": null, "length": 1024}
{"pred": "               int len = fCode.Length;\n                int width = (int) ((x + (len - 1) * (1 - x)) * (10 * n + 2));\n                int height = (int) (barHeight * (len / n + 1", "answers": ["                int len = fCode.Length + 2;"], "all_classes": null, "length": 1163}
{"pred": "   return results;\n  }\n}\n\n// The following code is for testing purposes only\npublic static void main(String[] args) {\n  Properties props = new Properties();\n  props.setProperty(\"foo\", \"bar\");\n  props.setProperty(\"baz\", \"quux", "answers": ["    if (results == null) {"], "all_classes": null, "length": 840}
{"pred": "# TODO: Add tests for the following methods:\n# - nearest\n# - linear\n# - cubic\n# - spline\n# - lagrangian\n# - radial_basis_function\n# - radial_basis_function_gaussian\n# - radial_basis_", "answers": ["        y_points = np.arange(-89.12, +90.0, 42.847)"], "all_classes": null, "length": 819}
{"pred": "           if (currPacket != null)\n            {\n                Clipboard.SetText(currPacket.ToString());\n            }\n        }\n        private void toolStripButtonConvertToBytes_Click(object sender, EventArgs e)\n        {\n            if (GetCurrentPacket() !=", "answers": ["            if (currPacket != null)"], "all_classes": null, "length": 518}
{"pred": "# build_song_set('short_wav/new_wav/mir1k-dataset/singers')\n# build_dataset('short_wav/new_wav/mir1k-dataset/singers')\n# get_mono_voice('short_w", "answers": ["    elif color == 'yellow':"], "all_classes": null, "length": 1319}
{"pred": "       }\n    }\n}", "answers": ["            set { _numValues = value; }"], "all_classes": null, "length": 743}
{"pred": "           this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);\n            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;\n            this.ClientSize = new System.Drawing.Size(245, 2", "answers": ["            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);"], "all_classes": null, "length": 1467}
{"pred": "\n    def nullFunction( self, name, dll=None, resultType=None, argTypes=(), doc=None, argNames=(), extension=None, deprecated=False ):\n        \"\"\"Create a null function for the given name\"\"\"\n        return wrapper.WrapperFunction(\n            name", "answers": ["        elif hasattr( original, 'originalFunction' ):"], "all_classes": null, "length": 831}
{"pred": "           baos.write(emptyStreams.toByteArray());\n            writeUint64(header, emptyStreams.size());\n            header.write(baos.toByteArray());\n        }\n    }\n    private void writeFileEmptyFiles(final DataOutput header) throws IOException", "answers": ["            final DataOutputStream out = new DataOutputStream(baos);"], "all_classes": null, "length": 1652}
{"pred": "                   alphaLevel -= 1;\n                    if (alphaLevel <= 0)\n                    {\n                        if (rampDelay > 0)\n                        {\n                            try {\n                                Thread.sleep(rampDelay);\n                            } catch (Interrupted", "answers": ["                    for (int i = 0; i < ticker.length; i++)"], "all_classes": null, "length": 600}
{"pred": "           var item = Subject.GetItems().Single();\n            item.CanBeRemoved.Should().BeTrue();\n            item.CanMoveFiles.Should().BeTrue();\n        }\n        [Test]\n        public void should_be_removable_and_should_allow_", "answers": ["            var item = Subject.GetItems().Single();"], "all_classes": null, "length": 655}
{"pred": "           if (_diff > 0)\n            {\n                await RecycleItems(session, cancellationToken, pinap, ItemId.ItemPinapBerry);\n            }\n            if (_diff > 0)\n            {\n                await RecycleItems(session, cancellationToken,", "answers": ["                if (_diff > 0)"], "all_classes": null, "length": 772}
{"pred": "#        f.writelines(['F) ', str(c.bdbox), '\t\t# Background box size (pixels)\\n'])\n#        f.writelines(['G) ', str(c.bbox), '\t\t# Bulge box size (pixels)\\n'])\n", "answers": ["                      'relative to data\\n'])"], "all_classes": null, "length": 1863}
{"pred": "                   i += ((b & 0x08) << 2);\n                    i += ((b & 0x04) << 5);\n                    i &= 0xFF;\n                    break;\n                case 0x08:\n                    /* C", "answers": ["                    i += ((b & 0x08) << 2);"], "all_classes": null, "length": 1309}
{"pred": "   @property\n    def _course_key(self):\n        \"\"\"\n        Return the CourseKey for the course.\n        \"\"\"\n        if self._course_key is None:\n            self._course_key = CourseKey.from_parts(self._course_dict['org'], self", "answers": ["        course_key = CourseKey.from_string(self._course_key)"], "all_classes": null, "length": 824}
{"pred": "\t\tif(splitNumber.length > 1) {\n\t\t\tString chanceString = splitNumber[1].replace(\"%\", \"\");\n\t\t\tchance = Float.parseFloat(chanceString);\n\t\t}\n\t\treturn (int) (Math.random() * chance", "answers": ["\t\tint min = -1;"], "all_classes": null, "length": 803}
{"pred": "# Define main function\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(required=True, type='str'),\n            state=dict(required=False, type='str', choices=['present', 'absent']),\n", "answers": ["        types = ['cert', 'key']"], "all_classes": null, "length": 744}
{"pred": "           this.lblPrivacy.AutoSize = true;\n            this.lblPrivacy.Location = new System.Drawing.Point(6, 10);\n            this.lblPrivacy.Name = \"lblPrivacy\";\n            this.lblPrivacy.Size = new System.Drawing", "answers": ["            this.lblPrivacy.Location = new System.Drawing.Point(6, 26);"], "all_classes": null, "length": 1336}
{"pred": "```python\n        for plugname, plug in self.loaded_plugins:\n            try:\n                plug.collect()\n                plugruncount += 1\n            except KeyboardInterrupt:\n                raise\n            except (OSError, IOError, EOFError", "answers": ["        for i in zip(self.loaded_plugins):"], "all_classes": null, "length": 3043}
{"pred": "class IConferenceSessionFossil(IConferenceFossil, ISessionFossil):\n    def __init__(self, conference, session):\n        self.conference = conference\n        self.session = session\n\n    def getId(self):\n        return self.session", "answers": ["    getRoomFullName.produce = lambda s: s.getRoom()"], "all_classes": null, "length": 893}
{"pred": "                           return false;\n                        }\n                        return true;\n                    }\n                };\n                result = MessageImporter.importMessages(fileTextField.getText(), subfoldersCheckbox.isSelected(), messageWriter);\n            } else {\n                result = MessageImp", "answers": ["                            throw new MessageWriterException(e);"], "all_classes": null, "length": 543}
{"pred": "\t\t       \t\t\tlayer = ((Scriptable) value).getNumber(\"value\", (Scriptable) value).intValue();\n\t\t       \t\t} else if (value instanceof Number) {\n\t\t       \t\t\tlayer = ((Number) value).intValue();\n\t\t       ", "answers": ["\t\t       \t\t\tlayer = ScriptRuntime.toInt32(value);"], "all_classes": null, "length": 762}
{"pred": "       if (currentSession != null && currentSession.isOpened()) {\n            Bundle parameters = new Bundle();\n            parameters.putString(FIELDS, REQUEST_FIELDS);\n            Request request = new Request(currentSession, userInfoSession == null ? user.", "answers": ["        if (currentSession != null && currentSession.isOpened()) {"], "all_classes": null, "length": 1328}
{"pred": "\t\tfor (Emotion emotion : emotions)\n\t\t\tsum += emotion.chance;\n\t\tfor (Emotion emotion : emotions)\n\t\t\temotion.chance /= sum;\n\t}\n}\nThe code above is a Java class named StandardEmotionsController", "answers": ["\t\tfor(Emotion emotion : emotions)"], "all_classes": null, "length": 630}
{"pred": "# test list\nself.assertListEqual([\n    {\n        'stage': {\n            'name': 'stage1',\n            'duration': 123,\n            'finished_at': '2016-01-01T12:34:5", "answers": ["                    'property1': 2, 'property2': 3}"], "all_classes": null, "length": 1160}
{"pred": "   Long = (x/k0 + (1/6*eccSquared*sin(2*phi1Rad)*cos(phi1Rad)*cos(phi1Rad)\n                   + 2/3*eccSquared*eccSquared*sin(4", "answers": ["    N1 = a/sqrt(1-eccSquared*sin(phi1Rad)*sin(phi1Rad))"], "all_classes": null, "length": 980}
{"pred": "\nform = ReportUserForm(request.POST)\nif form.is_valid():\n    report = form.save(commit=False)\n    report.user = user\n    report.reporter = request.user\n    report.save()\n    messages.success(request, \"User", "answers": ["        form = ReportUserForm(request.POST)"], "all_classes": null, "length": 651}
{"pred": "class ProductAddStepOne(StepView):\n    \"\"\"A step for entering the name of the new product series.\"\"\"\n    label = \"Enter name\"\n    schema = IProductSeries\n    @property\n    def next_step(self):\n        return ProductAddStepTwo\nclass ProductAddStep", "answers": ["    field_names = ['name', 'summary', 'branch', 'releasefileglob']"], "all_classes": null, "length": 4413}
{"pred": "\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tform.RightToLeft = RightToLeft.No;\n\t\t\t\t\tform.RightToLeftLayout = false;\n\t\t\t\t}\n\t\t\t\tcatch(Exception) { Debug.Assert(", "answers": ["\t\t\t\ttry { RtlApplyToControls(form.Controls); }"], "all_classes": null, "length": 511}
{"pred": "               temp >>= 8;\n            }\n        }\n        return arr;\n    }\n}", "answers": ["                temp >>= 8;"], "all_classes": null, "length": 917}
{"pred": "=====================\n\n# Initialize the config object.\nconfig = _Config()\n# Set the defaults.\ndefine_defaults(config._defaults)\n# Set the constants.\ndefine_constants(config.constants)\n# Set the post processors.\nconfig._add_post_processor('", "answers": ["                if flag == 'exclude_tags':"], "all_classes": null, "length": 1382}
{"pred": "               return new object[0];\n            }\n            public override bool IsDefined (Type attributeType, bool inherit)\n            {\n                return false;\n            }\n            public override bool IsPublic { get { return true; }}\n            public override bool IsAbstract { get { return", "answers": ["                return new object[0];"], "all_classes": null, "length": 545}
{"pred": "# class OBD_PID1D(OBD_Packet):\n#     name = \"PID_1D_VehicleInformation\"\n#     fields_desc = [\n#         StrFixedField('vehicleIdentificationNumber', b''),\n#         StrFixedField('vehicle", "answers": ["        0x06: 'EOBD (Europe) ',"], "all_classes": null, "length": 557}
{"pred": "\t\tself.connection = self.bus.get_connection()\n\t\tself.connection.add_filter(self.handle_message)\n\t\tself.connection.add_filter(self.handle_method_call)\n\t\tself.connection.add_filter(self.handle", "answers": ["\t\tloop = gobject.MainLoop()"], "all_classes": null, "length": 1595}
{"pred": "           }\n            else\n            {\n                index = this.AddCraft(typeof(Prism), 1044294, 1073465, 45.0, 95.0, typeof(BlankScroll), 104", "answers": ["                this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);"], "all_classes": null, "length": 1615}
{"pred": "\n    def __exit__(self, exc_type, exc_value, tb):\n        \"\"\"This method is called when the request context is popped.  It\n        will execute all the functions registered on the application for\n        teardown execution.\n        \"\"\"\n        self.pop_session()", "answers": ["        app_ctx = self._implicit_app_ctx_stack.pop()"], "all_classes": null, "length": 1358}
{"pred": "   response = _pubsub_consumer(session, cluster_id, query_wrapper)\n    if topic_name:\n        response = response.filter(PubSubTopic.name==topic_name)\n    return response\n# ############################################################################################################################\ndef _", "answers": ["    response = _pubsub_consumer(session, cluster_id, query_wrapper)"], "all_classes": null, "length": 2251}
{"pred": "           if (resourceEntityForRelease != null) {\n                result.add(resourceEntityForRelease);\n            }\n        }\n        return result;\n    }\n}", "answers": ["            if (resourceEntityForRelease != null) {"], "all_classes": null, "length": 1149}
{"pred": "dx = (angles - min_rot_angle) / alen\n    else:\n        # Find projection of axis on detector\n        axis_proj = _axis_in_detector(ray_trafo.geometry)\n        rot_dir = _rotation_direction_in_detector", "answers": ["        dx = ray_trafo.range.meshgrid[1]"], "all_classes": null, "length": 1057}
{"pred": "\nclass Provider(NZBProvider):\n    def __init__(self):\n        NZBProvider.__init__(self, 'NextInLine')\n        self.name = 'NextInLine'\n        self.enable = False\n        self.search_mode = 'eponly'", "answers": ["            logger.log(u\"Proxified REGEX: \" + regx, logger.DEBUG)"], "all_classes": null, "length": 1751}
{"pred": "\t\t\tif (IsEmpty)\n\t\t\t\treturn String.Empty;\n\t\t\tif (type == FontSize.AsUnit)\n\t\t\t\treturn unit.ToString (fmt);\n\t\t\treturn font_size_names [(int) type];\n\t\t}", "answers": ["\t\t\tif (type == FontSize.NotSet)"], "all_classes": null, "length": 726}
{"pred": "\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))\n\t\t\t\t{\n\t\t\t\t\tthrow new InvalidCipherTextException(\n\t\t\t\t\t\t\t\"BlockLength too large for simple addition.\\n\");\n\t\t\t\t}\n", "answers": ["\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))"], "all_classes": null, "length": 924}
{"pred": "\t\t\tvar innerObj = (JObject)obj.Properties[0].Value;\n\t\t\tAssert.That(innerObj.Properties[0].Key, Is.EqualTo(\"The outermost value\"));\n\t\t\tAssert.That(innerObj.Properties[0].Value.Type,", "answers": ["\t\t\tobj = (JObject)obj.Properties[0].Value;"], "all_classes": null, "length": 537}
{"pred": "               for (int w = 0; w < width; w++) {\n                    int index = h * width + w;\n                    if (w > 0) {\n                        edges.add(T2.of(w + \"-\" + h, w + \"-\" +", "answers": ["                for (int w = 0; w < width; w++) {"], "all_classes": null, "length": 1282}
{"pred": "======================\n\ni1 = iso.Isoelastics([ds])\n======================\n\nThe code above imports the necessary modules and defines some helper functions. It then defines several test functions to check various aspects of the Isoelastics class.\n\nThe first test function,", "answers": ["    i1 = iso.get_default()"], "all_classes": null, "length": 761}
{"pred": "       final File file1 = new File(args[0]);\n        final File file2 = new File(args[1]);\n        final LocalTripleStore db1 = new LocalTripleStore(file1);\n        final LocalTripleStore db2 = new LocalTripleStore(file2", "answers": ["        if (args.length < 2 || args.length > 3) {"], "all_classes": null, "length": 1331}
{"pred": "if __name__ == '__main__':\n    unittest.main()\n# This script is a test script for the alert module. It imports the alert module,\n# creates a test case class AlertTest, sets up and tears down the test environment,\n# and defines several test methods.", "answers": ["                    {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 29, 47,"], "all_classes": null, "length": 706}
{"pred": "\t\t\tString downloadedJarFile = performDownload();\n\t\t\tif (downloadedJarFile != null) {\n\t\t\t\treturn performInstallerLaunch(downloadedJarFile);\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n", "answers": ["\t\t\tString downloadedJarFile = performDownload();"], "all_classes": null, "length": 519}
{"pred": "\t\t\tOpenGL.glDeleteVertexArrays(1, ref OpenGL.glVertexArrayID);\n\t\t\tOpenGL.CheckGLError();\n\t\t\tSDL.SDL_GL_DeleteContext(context);\n\t\t\tOpenGL.CheckGLError", "answers": ["\t\t\tif (context != IntPtr.Zero)"], "all_classes": null, "length": 469}
{"pred": "   @property\n    def total_cov_mat(self):\n        \"\"\"2D array of shape ``(N, N)`` containing the total *xy* covariance matrix.\n        :rtype: numpy.ndarray\n        \"\"\"\n        return self._nexus.get('total", "answers": ["        projected onto the *y* axis. :py:obj:`None` if singular."], "all_classes": null, "length": 985}
{"pred": "       return new CmsLink(m_structureId, m_target, m_query, m_anchor, m_type, m_internal);\n    }\n    /**\n     * Returns a string representation of this object.\n     *\n     * @return a string representation of this object\n", "answers": ["        if (this == EMPTY) {"], "all_classes": null, "length": 703}
{"pred": "                 noCanonicalIdAccountIds.add(walrusObject.getOwnerId());\n                } else {\n                  accountIdAccountMap.put(walrusObject.getOwnerId(), owningAccount);\n                }\n              } catch (AuthException e) { // Account is", "answers": ["                  adminUser = getEucalyptusAdmin();"], "all_classes": null, "length": 4345}
{"pred": "           add { _selectedFolderChanged += value; }\n            remove { _selectedFolderChanged -= value; }\n        }\n        public IFolder SelectedFolder\n        {\n            get { return _selectedTreeNode == null ? null : _selectedTreeNode.Folder; }\n        }\n       ", "answers": ["            add { _selectedFolderChanged += value; }"], "all_classes": null, "length": 666}
{"pred": "       ImportVmTemplateCommand command = new ImportVmTemplateCommand(createParameters());\n        command.setImportAsNewEntity(isImportAsNewEntity);\n        command.setName(name);\n        List<ConstraintViolation<ImportVmTemplateCommand>> violations =\n                Valid", "answers": ["        ImportVmTemplateParameters parameters = createParameters();"], "all_classes": null, "length": 616}
{"pred": "\t\t\tw10.LeftAttach = ((uint)(1));\n\t\t\tw10.RightAttach = ((uint)(2));\n\t\t\tw10.XOptions = ((global::Gtk.AttachOptions)(global::Gtk.AttachOptions.Exp", "answers": ["\t\t\tw10.TopAttach = ((uint)(1));"], "all_classes": null, "length": 650}
{"pred": "# =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-", "answers": ["            environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = \\"], "all_classes": null, "length": 1764}
{"pred": "\t\t\treturn new ConstructorBuilder(mb);\n\t\t}\n\t\tpublic MethodBuilder DefineMethod(string name, MethodAttributes attribs, CallingConventions callingConv, Type returnType, Type[] parameterTypes, Type[] genericParameterTypes, Type[][] customModifiers)\n\t", "answers": ["\t\t\treturn new ConstructorBuilder(mb);"], "all_classes": null, "length": 910}
{"pred": "     return (Builder) pb.Message.CreateBuilder(typeof(SendInvitationRequest), prototype);\n    }\n    \n    [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]\n    public override pb::ExtensionRegistry ExtensionRegistry", "answers": ["      return (Builder) new Builder().MergeFrom(prototype);"], "all_classes": null, "length": 1897}
{"pred": "                   vertices[x] = new Vector3f();\n                vertices[x].set(getVertex(getIndex(i, x)));\n            }\n        }\n    }\n    /**\n     * Returns the index of the vertex in the vertex buffer that corresponds\n     * to the index", "answers": ["                    vertices[x] = new Vector3f();"], "all_classes": null, "length": 1059}
{"pred": "       if (CmsStringUtil.isEmptyOrWhitespaceOnly(showDateData)) {\n            String[] dateCols = {COLUMN_NAME_DATECREATED, COLUMN_NAME_DATEMODIFIED};\n            for (String dateCol : dateCols) {\n               ", "answers": ["        if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(showDateData)) {"], "all_classes": null, "length": 1920}
{"pred": "\t\t\tyield return new WaitForEndOfFrame();\n\t\t\tCalculateHeight();\n\t\t}\n\t}\n}\n//\tThe above code is a part of the MaterialUI package, which is a free and open-source UI framework for Unity.\n//\tIt is", "answers": ["\t\t\tyield return new WaitForEndOfFrame();"], "all_classes": null, "length": 583}
{"pred": "       Height = GetBestHeight();\n      }\n      base.OnSizeChanged(e);\n    }\n    #endregion\n  }\n}", "answers": ["        int h = GetBestHeight();"], "all_classes": null, "length": 638}
{"pred": "                   lastUser = r[\"CreatedBy\"].ToString();\n                }\n                if (!Users.Contains(lastUser))\n                {\n                    Users.Add(lastUser);\n                }\n            }\n            foreach (string user in Users)\n            {\n               ", "answers": ["                    lastUser = r[\"CreatedBy\"].ToString();"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tdirections |= ScrollDirection.Right;\n\t\t\tif (Viewport.LastMousePos.Y >= Game.Renderer.Resolution.Height - EdgeScrollThreshold)\n\t\t\t\tdirections |= ScrollDirection.Down;\n\t\t\tif (directions !=", "answers": ["\t\t\t\tdirections |= ScrollDirection.Right;"], "all_classes": null, "length": 598}
{"pred": "           // check if all discount criteria codes are used\n            if (CriteriaCodesUsed.Count != 3)\n            {\n                ValidationColumn = DiscountTable.Columns[PcDiscountTable.ColumnDiscountCriteriaCode];\n                VerificationResult = new TScreenVerificationResult", "answers": ["            string[] CriteriaCodesUsedArray = CriteriaCodesUsed.ToArray();"], "all_classes": null, "length": 1562}
{"pred": "               stream.Read (buffer, 0, (int) stream.Length);\n                // Adding file content as byte[]\n                args.Add (filename, buffer);\n            }\n        }\n    }\n}", "answers": ["                stream.Read (buffer, 0, buffer.Length);"], "all_classes": null, "length": 722}
{"pred": "\n    def __len__(self):\n        \"\"\"Number of requirements\"\"\"\n        return sum(len(v) for v in self._reqs.values())\n\n# This code is a part of Anaconda installer, it is used to store and manage\n# payload requirements (ie packages and", "answers": ["        return not any(self._reqs.values())"], "all_classes": null, "length": 879}
{"pred": "\t\t\tget { return Enabled && !CopyRange; }\n\t\t}\n\t\tpublic string CustomRange\n\t\t{\n\t\t\tget { return _customRange; }\n\t\t\tset\n\t\t\t{\n\t\t\t\tif (_customRange == value)\n", "answers": ["\t\t\tget { return Enabled && _numberOfImages > 2; }"], "all_classes": null, "length": 1205}
{"pred": "\t\t\tget { return dataDir; }\n\t\t}\n\t\tpublic string ConfigurationDirectory {\n\t\t\tget { return confDir; }\n\t\t}\n\t\tpublic string CacheDirectory {\n\t\t\tget { return cacheDir; }\n\t\t}\n\t}\n", "answers": ["\t\t\tget { return dataDir; }"], "all_classes": null, "length": 614}
{"pred": "           if (bugAnnotation instanceof SourceLineAnnotation) {\n                SourceLineAnnotation lineAnnotation = (SourceLineAnnotation) bugAnnotation;\n                if (lineAnnotation.getLineNumber() < 0) {\n                    throw new IllegalStateException(\"Invalid line number: \" + lineAnnotation.get", "answers": ["            if (bugAnnotation instanceof PackageMemberAnnotation) {"], "all_classes": null, "length": 733}
{"pred": "}\nThis code is a base class for various types of food items in Ultima Online. It includes properties for a Mobile that poisoned the food, the fill factor of the food, and the ability to eat the food. The base class also includes methods for serialization and deserialization. The derived classes,", "answers": ["\t[TypeAlias( \"Server.Items.Pizza\" )]"], "all_classes": null, "length": 1914}
{"pred": "                       if (eFarm.MinionsHit >= 2)\n                        {\n                            E.Cast(eFarm.Position);\n                        }\n                    }\n                    if (Menu.GetBool(\"LaneClearQ\") && Q.IsReady() && minions", "answers": ["                        if (eFarm.MinionsHit >= Menu.GetSlider(\"LaneClearECount\"))"], "all_classes": null, "length": 993}
{"pred": "\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);\n\t}\n\t/**\n\t * Returns a GridBagConstraint\n\t * @param x\n\t * @param y\n\t * @param width\n\t", "answers": ["\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);"], "all_classes": null, "length": 691}
{"pred": "# ------------------------------------------------------------------------------\n# Plugin initialization\n# ------------------------------------------------------------------------------\nclass DWDPlugin(object):\n    def __init__(self, sh):\n        self._sh = sh\n        self._dwd = DWD(sh, 'dwd', 'dwd", "answers": ["        filexml = self._retr_file(filename)"], "all_classes": null, "length": 709}
{"pred": "   self.assertEquals(field_model_def, field_def)\nif __name__ == '__main__':\n    run_test_suite(TestParser)", "answers": ["        value = {'a': 'Awesome title', 'b': 'sub title', 'k': 'form'}"], "all_classes": null, "length": 559}
{"pred": "                   new object[] {10, \"E1\"});\n                // widen to short\n                path.Clear();\n                stmtTextCreate = namedWindow\n                    ? \"create window MyWidenedWindow (MyWidenedLong long, MyWidenedString", "answers": ["                    new[] {new object[] {10L, \"E1\"}});"], "all_classes": null, "length": 2245}
{"pred": "\n    def __truediv__(self, other):\n        try:\n            other = float(other)\n        except:\n            return NotImplemented \n        c = self.copy()\n        return c.__itruediv__(other)\n\n    def __itruediv", "answers": ["        c = self.copy()"], "all_classes": null, "length": 2793}
{"pred": "# This is a custom method to save the view section with the new XML content\ndef save_view_section(cr, uid, view_id, xpath, xml_content, context=None):\n    view = view(cr, uid, view_id, context=context)\n    view", "answers": ["        view = self.browse(cr, SUPERUSER_ID, res_id, context=context)"], "all_classes": null, "length": 739}
{"pred": "           value = createHTMLView(c, text);\n        }\n        c.putClientProperty(BasicHTML.propertyKey, value);\n        c.putClientProperty(htmlDisable, htmlDisabled);\n    }\n    /**\n     * The key used to store the HTML renderer in the", "answers": ["            value = BasicHTML.createHTMLView(c, text);"], "all_classes": null, "length": 980}
{"pred": "s = create(filename, content)\nassert s.content_is_testharness\nassert items(s) == [(\"testharness\", \"/resources/testharness.js\")]\n# The following tests are for the python_meta_re regular expression.\n# They are similar to the", "answers": ["    s = create(filename, content)"], "all_classes": null, "length": 633}
{"pred": "\t\t\t\tmapping.SqlLoader = new HbmNamedQuery(namedQueryReference);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmapping.SqlLoader.AddNamedQuery(namedQueryReference);\n\t\t\t}\n\t\t}\n\t\t", "answers": ["\t\t\t\tmapping.loader = new HbmLoader();"], "all_classes": null, "length": 620}
{"pred": "\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );\n\t\t\tfor ( int i = 0; i < m_Members.Count; ++i )\n\t\t\t{\n\t\t\t\tm_Members[i].Serialize( writer );\n\t", "answers": ["\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );"], "all_classes": null, "length": 670}
{"pred": "       invocationQueue.pop();\n    }\n    private boolean contains(CallsiteHolder g) {\n        for (CallsiteHolder h : graphQueue) {\n            if (h == g) {\n                return true;\n            }\n        }\n        return false;\n    }", "answers": ["        assert graphQueue.size() <= maxGraphs;"], "all_classes": null, "length": 2259}
{"pred": "# self.pytest_command = pytest\n\nI'm assuming you want to assign the value of 'pytest' to 'self.pytest_command'.\nSo, the next line of code should be:\n\nself.pytest_command = pytest\n\nIf 'pytest", "answers": ["                self.args['pytest'] = \"py.test {}\".format(pytest)"], "all_classes": null, "length": 951}
{"pred": "               if (phi) {\n                    ValueNode phiValue = getCachedPhi(key, value.stamp());\n                    mergePhi(phiValue, value, states);\n                }\n            }\n        }\n        private void mergePhi(ValueNode phi, Value", "answers": ["                if (phi) {"], "all_classes": null, "length": 810}
{"pred": "       if (mCallback != null) {\n            try {\n                mCallback.handleCallSessionEvent(event);\n            } catch (RemoteException ignored) {\n            }\n        }\n    }\n    /** @see Connection.VideoProvider#handleCallSessionEventWithData */\n   ", "answers": ["        if (mCallback != null) {"], "all_classes": null, "length": 587}
{"pred": "\t\t\t\tfrom.SendGump(new EodonWallMapGump(from));\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic EodonWallMap(Serial serial) : base(serial)\n\t\t{\n\t\t}\n\t\t\n\t", "answers": ["\t\t\t\tGump g = new Gump(0, 0);"], "all_classes": null, "length": 854}
{"pred": "=====================\n\nThe code seems to be defining several classes for different types of records and their corresponding metadata. It also includes some utility functions for filtering records by time intervals and getting all record IDs.\n\nThe `Record` class represents a record object inside the SQL database, with properties such as `", "answers": ["] + models)"], "all_classes": null, "length": 609}
{"pred": "   def __getstate__(self):\n        state = self.__dict__.copy()\n        del state['module']\n        return state\n\n    def __setstate__(self, state):\n        self.__dict__.update(state)\n        self.module = self.get_cache()\n", "answers": ["        user = '%s@%s' % (username, domain)"], "all_classes": null, "length": 744}
{"pred": "\n    def __init__(self, fpath=None, wrapwidth=70):\n\nThis is the constructor for the POFile class. It initializes the base file\nproperties and sets the default wrapwidth.\n\nThe constructor for the MOFile class is similar but it sets the magic number\n", "answers": ["          - *fpath*: string, full or relative path to the file."], "all_classes": null, "length": 2528}
{"pred": "###############################################################################\n#\n# This is the end of the code provided.\n#\n# The following code is added to make the script runnable as a standalone script.\n#\nif __name__ == '__main__':\n  ValidateOutputDataAgent().run()", "answers": ["    if not res['OK']:"], "all_classes": null, "length": 873}
{"pred": "\t\t\tString path = uri.getPath();\n\t\t\tif(path.startsWith(PLUGINS_PREFIX)) {\n\t\t\t\t// Allow access to plugins\n\t\t\t\treturn action;\n\t\t\t}\n\t\t\t// Allow access to formPasswords\n", "answers": ["\t\t\tString path = uri.getPath();"], "all_classes": null, "length": 1604}
{"pred": "       gsp = yield self.setupGerritStatusPush(reviewCB=sampleReviewCB)\n        result = yield self.run_fake_single_build(gsp, buildResult)\n        result = makeReviewResult(result, (GERRIT_LABEL_VERIFIED, verified", "answers": ["        gsp = yield self.setupGerritStatusPush(reviewCB=sampleReviewCB,"], "all_classes": null, "length": 958}
{"pred": "   self.category = atom.Category()\n  def testCategoryToAndFromString(self):\n    self.category.term = 'foo'\n    self.category.label = 'bar'\n    self.category.extension_attributes['foo'] = 'bar'\n    self.assert", "answers": ["    self.category = atom.Category()"], "all_classes": null, "length": 629}
{"pred": "Map<String, AnnotationMirror> r2) {\n            Map<String, AnnotationMirror> result = new HashMap<>();\n            for (Map.Entry<String, AnnotationMirror> e1 : r1.entrySet()) {\n                String key = e1.getKey", "answers": ["                Map<String, AnnotationMirror> r2) {"], "all_classes": null, "length": 2339}
{"pred": "# Register classes\nclasses = [\n    MATERIAL_PT_material,\n    MATERIAL_PT_sss,\n    MATERIAL_PT_sss_color,\n    MATERIAL_PT_sss_color_ramp,\n    M", "answers": ["        col = split.column()"], "all_classes": null, "length": 2052}
{"pred": "           if (_engine.Memory.Cartridge.MapperNo == 16)\n            {\n                var map16 = (Mapper16) _engine.Memory.CurrentMapper;\n                mapper16SwitchingMode = map16.SwitchingMode;\n            }", "answers": ["            if (_engine.Memory.Map.Cartridge.MapperNo == 16)"], "all_classes": null, "length": 1369}
{"pred": "           JMenuItem oMenuItem = new JMenuItem(\"Open Document\");\n            oMenuItem.setActionCommand(SOPENDOCUMENT);\n            oMenuItem.addActionListener(oActionListener);\n            _jMnuRoot.add(oMenuItem);\n        }\n        private void insertMenus", "answers": ["            String[] sTDocUrls = m_oInspector.getTDocUrls();"], "all_classes": null, "length": 594}
{"pred": "\t\tAdd(\"Party Quest\", 70026); // Party Quest Scroll [10 Blue Wolves]\n\t}\n}\n//-----------------------------------------------------------------------------\n// Aranwen's Conversation\n//-----------------------------------------------------------------------------\npublic async Task StartConversation()\n", "answers": ["\t\tAdd(\"Party Quest\", 70025); // Party Quest Scroll [30 Red Bears]"], "all_classes": null, "length": 1340}
{"pred": "\t\t\tint height = MeasuredHeight;\n\t\t\tint newHeight = 0;\n\t\t\tfor (int i = 0; i < ChildCount; i++) {\n\t\t\t\tView child = GetChildAt (i);\n\t\t\t\tint childHeight", "answers": ["\t\t\tMeasure (0, 0);"], "all_classes": null, "length": 853}
{"pred": "=====================\n\n# This is the next line of code that should be added to the file.\n# It creates a custom manager for the Announcement model that filters the announcements by their type.\nclass AnnouncementManager(models.Manager):\n    def get_by_type(self", "answers": ["        return '%s -> %s' % (self.announcement, self.tweet_id)"], "all_classes": null, "length": 846}
{"pred": "#lexers.register_lexer(name='php', filename='*.php', lexer=PhpLexer)\n#lexers.register_lexer(name='php', filename='*.php', lexer=PhpLexer(stripall=True))\n#", "answers": ["lexers['php'] = PhpLexer(startinline=True)"], "all_classes": null, "length": 1773}
{"pred": "# I'm not sure how to get the start and end times for the group\n# I've tried the following but it doesn't work\n#\n#    cursor.execute('''SELECT min(sdate), min(stime) FROM flight_group WHERE groupID=? ''', (", "answers": ["                 ORDER BY sdate, stime ''', (i,))"], "all_classes": null, "length": 1259}
{"pred": "# TODO: this is a placeholder for the real code that will be added later.\n#       It should be a call to the backup system to start a backup.\n#       The backup system should be able to access the ZFS filesystems,\n#       and the backup should be stored in the backup", "answers": ["        last_snapshot = timestamp_to_rethinkdb(timestamp)"], "all_classes": null, "length": 896}
{"pred": "\t\t\t\tMsg(\"What do you mean by 'complicity'?<br/>I don't know what you're talking about.<br/>I'm just a simple shepherd.<br/>I don't have any secrets.<br/>I don't know anything about any '", "answers": ["\t\t\t\tMsg(\"Welcome to the real world...\");"], "all_classes": null, "length": 1740}
{"pred": "responses = {}\n# Add your responses here\n# Example:\n# responses['ANIME_DELETED'] = AnimeDeletedResponse\n# responses['ANIME_DELETED_NEW_VER'] = AnimeDeletedNewVerResponse\n# responses['ANIME_DELETED_NEW", "answers": ["\t\tname\t- aname/ename/gname"], "all_classes": null, "length": 2041}
{"pred": "\n    def add_host(self, host_data):\n        self.host_data[host_data.uuid] = host_data\n\nclass HostData:\n    \"\"\"\n    Data about a single host.\n    \"\"\"\n    def __init__(self, uuid, name, status", "answers": ["        self.start = time.time()"], "all_classes": null, "length": 793}
{"pred": "               Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));\n                startActivity(intent);\n            }\n            finish();\n        }\n    }\n}\nThis code is a simple URL resolver for Android. It uses the Jsoup library to", "answers": ["                Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));"], "all_classes": null, "length": 690}
{"pred": "# TODO: Add step to check that primary_db and filelists_db are consistent\n# TODO: Add step to check that primary_db and other_db are consistent\n# TODO: Add step to check that filelists_db and other_db are consistent\n# TODO: Add step to check that", "answers": ["    if (len(primary.keys()) > 0):"], "all_classes": null, "length": 918}
{"pred": "\n    def copy_tree (self, src, dest):\n        \"\"\"Copy a tree of files from 'src' to 'dest'.  This is a simple\n        recursive function that copies all files and directories under 'src'\n        to 'dest'.  It does not copy 'src'", "answers": ["            build_ext = self.get_finalized_command('build_ext')"], "all_classes": null, "length": 791}
{"pred": "\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)\n\t\t\t{\n\t\t\t\tif (InitializeLazyProperty(fieldName, entity, session, snapshot, j, disassembledValues[j]))\n\t\t\t\t{\n\t", "answers": ["\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)"], "all_classes": null, "length": 3626}
{"pred": "# This is the main function, it's called by the main script.\n# It's just a wrapper around the DbJob class.\ndef main():\n    dbjob = DbJob()\n    while True:\n        # We can't use a simple loop here because we need", "answers": ["        '-l', 'h_vmem=%dM' % request['job_max_vmem'],"], "all_classes": null, "length": 1274}
{"pred": "           return View(\"Form\", new DelegateViewModel());\n        }\n        // Add a relationship (EventDelegate) between Event (parent) Delegate (child)\n        [HttpPost]\n        [RolesRequired(\"Admin\",\"SaveEventDelegate\")]\n        public ActionResult SaveEventDelegate", "answers": ["            return View(\"Form\", new DelegateViewModel());"], "all_classes": null, "length": 1017}
{"pred": "                       return string.Format(\"{0} - {1} - {2}\", ((Circle) obj).Radius, ((Circle) obj).Position.X, ((Circle) obj).Position.Y);\n                    }\n                    if (obj is KeyBind)\n                    {", "answers": ["                        var circle = (Circle) obj;"], "all_classes": null, "length": 668}
{"pred": "\n    def download(self, url, post=None, get=None, data=None, headers={}, multiFiles=False, resume=False,\n                chunkSize=None, saveToFile=None, output_handler=None, max_retries=3, retry_delay=", "answers": ["                elif res['error_code'] in [\"606\", \"607\", \"608\"]:"], "all_classes": null, "length": 545}
{"pred": "\t\t\tif (path != null && path.Count > 0)\n\t\t\t\treturn path[0];\n\t\t\treturn null;\n\t\t}\n\t\t/// <summary>\n\t\t/// Determines the location from where to search for resources.\n\t\t///", "answers": ["\t\t\tif (path.Count > 0)"], "all_classes": null, "length": 747}
{"pred": "       self.logger.info(\"syncing dhcp files\")\n        self.dhcp.sync()\n        return True\n    def clean_link_cache(self):\n        \"\"\"\n        Clean out the link cache\n        \"\"\"\n        link_cache_file = os.path.join", "answers": ["                       self.logger.error(\"%s failed\" % service_name)"], "all_classes": null, "length": 750}
{"pred": "       return Event.newBuilder().setSource(source).setSeqNo(seqNo.getAndIncrement());\n    }\n}\n\n// The following code is for testing purposes only\npublic static void main(String[] args) {\n    AbstractEventProducer producer = new AbstractEventProducer", "answers": ["        long t = getMissionTime();"], "all_classes": null, "length": 575}
{"pred": "           for (PpmContext currentContext = context; currentContext != PpmContext.ZERO; currentContext = currentContext.Suffix)\n            {\n                if (currentContext.NumberStatistics == 0)\n                {\n                    if (currentContext.SummaryFrequency > state.", "answers": ["            if (state != PpmState.ZERO)"], "all_classes": null, "length": 2203}
{"pred": "               return new DicomAttributeSL(tag, bb);\n            });\n        /// <summary>\n        /// The Sequence of Items VR.\n        /// </summary>\n        public static readonly DicomVr SQvr = new DicomVr(\"S", "answers": ["                return new DicomAttributeSL(tag, bb);"], "all_classes": null, "length": 1113}
{"pred": "\t\t\tint sessionID = Convert.ToInt32(tFull[0]);\n\t\t\tint testID = Convert.ToInt32(tFull[1]);\n\t\t\tint testCount = SqliteTest.Count(sessionID, testID);\n\t\t\tif", "answers": ["\t\t\tint sessionID = Convert.ToInt32(tFull[3]);"], "all_classes": null, "length": 2057}
{"pred": "\n    def test_delete_bytes_empty(self):\n        o = self.file(b'')\n        delete_bytes(o, 8, 0)\n        self.assertEquals(b'', self.read(o))\n\n    def test_delete_bytes_one", "answers": ["        o = self.file(b'abcdefghij')"], "all_classes": null, "length": 694}
{"pred": "<td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>\n<td><?cs var:sdk.win64_bundle_checksum ?></td>\n  </tr>\n  <tr>\n    <td>Mac OS X (intel)</td>\n", "answers": ["    <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>"], "all_classes": null, "length": 478}
{"pred": "# TODO: plot the results\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--app-pattern', default=None, help='Filter apps by name')\n    parser.add_argument('--test-pattern',", "answers": ["    ymin = csi_95[0]"], "all_classes": null, "length": 565}
{"pred": "if __name__ == '__main__':\n    unittest.main()", "answers": ["        self._testUIDGIDSwitch(1, 0, 2, 1, [0, 2, 0, 1], [1, 0])"], "all_classes": null, "length": 2189}
{"pred": "\t\t\t\t\tg.setColor(MetalLookAndFeel.getControl());\n\t\t\t\t\tg.fillRoundRect(x + 1, y + 1, controlSize - 2, controlSize - 2, 2, 2);\n\t\t\t", "answers": ["\t\t\t\t\tdrawPressed3DBorder(g, x, y, controlSize, controlSize);"], "all_classes": null, "length": 518}
{"pred": " def simulateClassifier(self, knn, patternDict, testName):\n    \"\"\"\n    Simulates the KNN classifier on a set of patterns.\n    \"\"\"\n    failures = \"\"\n    numPatterns = len(patternDict)\n    LOGGER.info(\"\\nTesting", "answers": ["  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[2])"], "all_classes": null, "length": 685}
{"pred": "       mirror.writeElement(elementKind, offset - headerSize(), value);\n    }\n    @HOSTED_ONLY\n    public void writeValue(Accessor accessor, Kind kind, ObjectMirror mirror, int offset, Value value) {\n        assert kind.isPrimitiveOfSameSizeAs(", "answers": ["        final int index = (offset - headerSize()) / elementSize();"], "all_classes": null, "length": 681}
{"pred": "           if (string.IsNullOrEmpty(relativePath)) {\n                return null;\n            }\n            string assemblyPath = FileUtils.CombinePaths(Parent.OutputDirectory, relativePath);\n            if (File.Exists(assemblyPath)) {\n                return assemblyPath;\n           ", "answers": ["            if (!String.IsNullOrEmpty(relativePath)) {"], "all_classes": null, "length": 1081}
{"pred": "\ndef str_format_args(*args, **kwargs):\n    \"\"\"\n    A slightly modified version of the native argparse.FormatTuple(), using {% and %}\n    instead of { and }\n    \n    >>> str_format_args(('{a}',), a=2)", "answers": ["    return string.format(*args, **kwargs)"], "all_classes": null, "length": 884}
{"pred": "     }\n    }\n    i1 = 0;\n    for (i = 0; i < i12; i++)\n    {\n      j = paramArrayInt[i];\n      paramArrayInt[(i + 1)] = paramArrayInt[j];\n      param", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "\t\t\t\tstr += \"  \" + s.ToString() + \"\\n\";\n\t\t\t}\n\t\t\treturn str;\n\t\t}\n\t\t\n\t\tpublic State GetStateByName( string name ) {\n\t\t\tforeach( State s in states ) {\n\t", "answers": ["\t\t\t\tstr += s.ToString() + \"\\n\";"], "all_classes": null, "length": 1300}
{"pred": "               });\n            #endregion\n            #region Lux\n            Spells.Add(\n                new SpellData\n                {\n                    Name = \"LuxQ\",\n                    Slot = SpellSlot.Q,\n                    Type = SkillshotType.Circle", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "\t\twhen(securityContext.getCurrentUser()).thenReturn(new EmfUser(\"test.user\", \"test.user@test.com\"));\n\t}\n\tprotected void withCodeList(String codeListId, String... codes) {\n\t\tcodelistServiceStub.withCodeList", "answers": ["\t\tEmfUser user = new EmfUser(\"admin@test.tenant\");"], "all_classes": null, "length": 505}
{"pred": "   @testlib.with_context\n    def test_popen_raises_error_on_non_existent_executable(self, context):\n        context.add_executable('non_existent_executable', None)\n        self.assertRaises(\n           ", "answers": ["        context = testlib.TestContext()"], "all_classes": null, "length": 426}
{"pred": "\t\t\tif (string.IsNullOrEmpty(configDirectory)) {\n\t\t\t\tconfigDirectory = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + Path.DirectorySeparatorChar + applicationName;\n\t\t\t}\n\t\t\tif (string.IsNullOrEmpty(", "answers": ["\t\t\tif (configDirectory == null)"], "all_classes": null, "length": 753}
{"pred": "\t\t//\n\t\t// The following code is used by the designer to initialize\n\t\t// the component. Do not modify the contents of this method with\n\t\t// the code editor.\n\t\t//\n\t\t[System.Diagnostics.DebuggerStepThrough()]\n\t\tpublic Constraint", "answers": ["\t\tinternal abstract bool IsColumnContained (DataColumn column);"], "all_classes": null, "length": 743}
{"pred": "\n        self.retranslateUi(Dialog)\n        QtCore.QMetaObject.connectSlotsByName(Dialog)\n\n        Dialog.setTabOrder(self.font_size_option, self.zoomby_label)\n        Dialog.setTabOrder(self.zoomby_label", "answers": ["        self.button_box = QtWidgets.QDialogButtonBox(Dialog)"], "all_classes": null, "length": 519}
{"pred": "               return true;\n            }\n            String stationId = wxs.getString( wxs.getColumnIndex( Wxs._ID ) );\n            String siteTypes = wxs.getString( wxs.getColumnIndex( Wxs.SITE_TYPES ) );\n            String site", "answers": ["                TextView tv =(TextView) findViewById( R.id.status_msg );"], "all_classes": null, "length": 986}
{"pred": "\t\t\t\tstring queryString = \"from Continent c join fetch c.Countries\";\n\t\t\t\tint results = s.CreateQuery(queryString).List().Count;\n\t\t\t\tAssert.AreEqual(1, stats.QueryExecutionCount, \"Unexpected query execution count\");", "answers": ["\t\t\t\tvar r = s.CreateCriteria<Country>().List();"], "all_classes": null, "length": 596}
{"pred": "               uiCRCITTSum = (uiCRCITTSum >> 8) ^ crc_it_table[(uiCRCITTSum & 0xFF) ^ uiByteValue];\n            }\n            return (ushort)uiCRCITTSum;\n        }", "answers": ["                for (int iBitIndex = 0; iBitIndex < 8; iBitIndex++)"], "all_classes": null, "length": 1212}
{"pred": "\t\treturn hasSpeedModule() ? 10 : 5;\n}\n\tprivate BlockPos getBlockPosBelowThatAffectsMyMovement() {\n\t\tBlockPos pos = blockPosition().below();\n\t\tfor (int i = 0; i < 1", "answers": ["\t\treturn hasSpeedModule() ? 5 : 10;"], "all_classes": null, "length": 1639}
{"pred": "           return new IHyperlinkDetector[] {};\n        }\n        IHyperlinkDetector[] detectors = new IHyperlinkDetector[] {\n                new CeylonHyperlinkDetector(editor, controller),\n                new JavaHyperlinkDetector(editor", "answers": ["            return new IHyperlinkDetector[0];"], "all_classes": null, "length": 548}
{"pred": "# Here you can add the Object3DAspect and Object3DScale widgets\n# and connect their signals to the Object3DDrawingModeWidget\n# signals.\n# You can also add the Object3DPrivateInterface widget here.\n# The Object3DAspect and Object3DScale", "answers": ["        self.aspectWidget = Object3DAspect(self)"], "all_classes": null, "length": 1044}
{"pred": "\t\t\t\tcase 3: // Set location\n\t\t\t\t\t{\n\t\t\t\t\t\tint x, y;\n\t\t\t\t\t\tif ( info.GetInt( 0 ) >= 0 && info.GetInt( 1 ) >= 0 && info", "answers": ["\t\t\t\tcase 3: // Use values"], "all_classes": null, "length": 886}
{"pred": "                    for (Object valueChoice : valueChoices)\n                     {\n                        String label = selectConverter.convert(valueChoice);\n                        if (Strings.equalsIgnoreCase(label, value.toString()))\n                        {\n                           chosenObj = valueChoice;\n                          ", "answers": ["                     String valueLabel = selectConverter.convert(value);"], "all_classes": null, "length": 764}
{"pred": "\t\t\t\tfor (int k=0; k<maxChangesRecorded; k++) {\n\t\t\t\t\tsb.append(\"\"+k+\"\\t\"+totalWithAmount[i][j][k]+\"\\t\"+fractionWithAmount[i][j][k]+\"\\", "answers": ["\t\t\t\tif (i!=j) {"], "all_classes": null, "length": 1027}
{"pred": "                           foreach (KeyValuePair<int, int> unpricedLine in unpricedLines)\n                            {\n                                //get the index of the purchase order and line that contained the unpriced product\n                                int orderIndex = unpricedLine.Key;\n                ", "answers": ["                            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines) {"], "all_classes": null, "length": 1177}
{"pred": "\t\t\tget { throw new NotImplementedException (); }\n\t\t}\n\t\tpublic void AddParameterInspector (IParameterInspector inspector)\n\t\t{\n\t\t\tThrowIfOpened ();\n\t\t\tinspectors.Add (inspector);\n\t\t", "answers": ["\t\t\tget { throw new NotImplementedException (); }"], "all_classes": null, "length": 629}
{"pred": "       final SimpleACLPermission permission = new SimpleACLPermission(mockSecurityManager, ownerId, mode, ownerGroupId);\n        final int testUserId = new Random().nextInt(SecurityManagerImpl.MAX_USER_ID);\n        assertFalse(permission.validate(testUserId, ACE", "answers": ["        final Subject mockUser = EasyMock.createMock(Subject.class);"], "all_classes": null, "length": 1006}
{"pred": "\t\t\treturn new Vector2 (v.X / viewport.Width, v.Y / viewport.Height);\n\t\t}\n\t\tpublic static Vector3 RelativeTo (this Vector3 v, Viewport viewport)\n\t\t{\n\t\t\treturn new Vector3 (", "answers": ["\t\t\tVector2 max = viewport.ToVector2 ();"], "all_classes": null, "length": 882}
{"pred": "class endpoint_stats_key(XDRStruct):\n    __slots__ = ['endpoint_key']\n    def __init__(self, endpoint_key=None):\n        self.endpoint_key = endpoint_key\n    @classmethod\n    def pack_into(self, packer", "answers": ["__all__ = ['endpoint_key', 'endpoint_value', 'endpoint_stats']"], "all_classes": null, "length": 399}
{"pred": "\t\t\t\t    Console.WriteLine(\"Client \" + i.ToString() + \" disconnected\");\n\t\t\t\t    RemoveClient(i, m_workerSocketList, disconnect_clients);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t", "answers": ["\t\t\t\t    RemoveClient(i, m_workerSocketList, disconnect_client);"], "all_classes": null, "length": 2031}
{"pred": "           if(type == RequestType.Step) {\n                notifyStepsReceived(FitnessLibrary.IFitnessLibraryListener.ExecutionStatus.Success, requestId, convertToStepBucketList(list));\n            } else if(type == RequestType.Activity) {\n                notifyActivities", "answers": ["            for(Bucket bucket : list) {"], "all_classes": null, "length": 768}
{"pred": " # The multi-use helper function\n  GenerateHelperFunction(bind_count, exec_count, 'NewCallback', parent_class,\n                        is_method=True)\n  # The single-use helper function\n  GenerateHelperFunction(bind_count, exec_count, 'New", "answers": ["  if bind_count > 0 or exec_count > 0:"], "all_classes": null, "length": 1549}
{"pred": "\"\"\"\nresponse = HttpResponse(mimetype='application/json')\nresponse['Content-Disposition'] = (\n    u'attachment; filename=\"{0}.json\"'.format(filename)\n)\njson_data = []\nfor item in items:\n    json_data.append", "answers": ["    Returns a range query in JSON (full-calendar) format."], "all_classes": null, "length": 722}
{"pred": "               new VarNode(\"score\"), null/* c */, Scope.DEFAULT_CONTEXTS));\n                whereClause.addChild(new ServiceNode(\n                        new ConstantNode(TermId.mockIV(VTE.URI)),\n                        serviceGraphPattern));\n            }\n        }", "answers": ["                        new VarNode(\"score\"), null/* c */,"], "all_classes": null, "length": 644}
{"pred": "\n    def dispatch(self, request, *args, **kwargs):\n        self.object = None\n        if request.method == \"POST\":\n            if \"set_is_active\" in request.POST:\n                self._handle_set_is_active()\n                return", "answers": ["        self.object = self.get_object()"], "all_classes": null, "length": 558}
{"pred": "     get { return this.ResolvedAssembly.PublicKeyToken; }\n    }\n    /// <summary>\n    /// The version of the referenced assembly.\n    /// </summary>\n    public Version Version {\n      get { return this.ResolvedAssembly.Version; }\n    }", "answers": ["      get { return this.ResolvedAssembly.PublicKeyToken; }"], "all_classes": null, "length": 1633}
{"pred": "           // The main loop\n            int iter = 0;\n            double rnorm = 0.0;\n            double rnormold = 0.0;\n            double rho = 0.0;\n            double rhoold = 0.0;\n            double alpha =", "answers": ["            var pseudoResiduals = new DenseVector(input);"], "all_classes": null, "length": 1146}
{"pred": "\t\t\treturn new Apfloat[] {sortedNumbers[left]};\n\t\t} else {\n\t\t\treturn new Apfloat[] {sortedNumbers[left], sortedNumbers[right]};\n\t\t}\n\t}\n\t\n\t/**\n\t * Get the", "answers": ["\t\t\treturn new Apfloat[] {sortedNumbers[left]};"], "all_classes": null, "length": 685}
{"pred": "           if reference_set_map[v] != -1:\n                A[focal.index(edge.child), reference_set_map[v]] += 1\n                L[focal.index(edge.child)] += 1\n                sample_count[v", "answers": ["                sample_count[v] -= sample_count[edge.child]"], "all_classes": null, "length": 2596}
{"pred": "   def test_items_to_raw(self):\n        \"\"\"Test whether items are properly loaded to raw index\"\"\"\n        result = self._test_items_to_raw()\n        self.assertEqual(len(self.items), result['items'])\n        self.assertTrue(len(result", "answers": ["        es_mapping = ESMapping.from_json(index_name=self.enrich_index,"], "all_classes": null, "length": 630}
{"pred": "\t\t\t\t\t\t\t\t\t\tif (slot.Value.LockTeam && orderManager.LobbyInfo.ClientInSlot(slot.Key) != null)\n\t\t\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t\t\torderManager", "answers": ["\t\t\t\t\t\t\t\t\t\tvar bot = botNames.Random(Game.CosmeticRandom);"], "all_classes": null, "length": 690}
{"pred": "\t\t\t\treturn base.ToString() + \" [\" + _rootCause.ToString() + \"]\";\n\t\t\t}\n\t\t\treturn base.ToString();\n\t\t}\n\t}\n}", "answers": ["\t\t\t\treturn base.ToString() + \"\\n\" + _rootCause;"], "all_classes": null, "length": 697}
{"pred": "# TODO(roasbeef): Implement the DataFrame class.\n# TODO(roasbeef): Implement the deserialize and serialize methods.\n# TODO(roasbeef): Implement the DataFrame class's __init__ method.\n# TODO(roasbeef): Implement the", "answers": ["        pad_low_and_high = struct.pack('!BB', pad_high, pad_low)"], "all_classes": null, "length": 652}
{"pred": "#endif\n        }\n    }\n}", "answers": ["            foreach (var child in cluster.Clusters.Concat(cluster.Nodes)) {"], "all_classes": null, "length": 936}
{"pred": "\tm_maxSlopeCosine = cos (m_maxSlopeRadians);\n}\nvoid btKinematicCharacterController::setBounceFix(bool bounceFix)\n{\n\tm_bounceFix = bounceFix;\n}\nvoid btKinem", "answers": ["\tm_maxSlopeCosine = btCos(slopeRadians);"], "all_classes": null, "length": 2149}
{"pred": "       for (ExpressionTree initializer : initializers) {\n            if (canBeLeaked(initializer)) {\n                checker.report(Result.failure(\"unique.array.leaked\"), node);\n                break;\n            }\n        }\n        return super.visitNew", "answers": ["        if (initializers != null && !initializers.isEmpty()) {"], "all_classes": null, "length": 1063}
{"pred": "\t\t\tif (nbttagcompound == null)\n\t\t\t{\n\t\t\t\tnbttagcompound = new NBTTagCompound();\n\t\t\t\tstack.setTagCompound(nbttagcompound);\n\t\t\t}\n\t\t\tN", "answers": ["\t\t\tif (nbttagcompound == null)"], "all_classes": null, "length": 484}
{"pred": "\t\t\t\tif (typeAttribute != null)\n\t\t\t\t\t_type = typeAttribute.Value;\n\t\t\t}\n\t\t}\n\t\t/// <summary>\n\t\t/// Creates the methods associated to this comment item.\n\t\t/// </summary>\n\t\t", "answers": ["\t\t\t\tif (typeAttribute != null)"], "all_classes": null, "length": 715}
{"pred": "\t\t\tusing (TrackBar myTrackBar = new TrackBar()) {\n\t\t\t\tmyTrackBar.AutoSize = false;\n\t\t\t\tmyTrackBar.Height = 50;\n\t\t\t\tmyTrackBar.Width = 80;\n\t\t\t", "answers": ["\t\t\tAssert.AreEqual(handle, handle, \"Removes warning\");"], "all_classes": null, "length": 643}
{"pred": "\t\t\tdoReturn(Collections.singleton(annotationType)).when(lookup).findAll();\n\t\t\tCollection<? extends ImmutableClassType> result = instrumentation.addAndGetInstrumentation(agentConfiguration, Collections.singleton(instrumentationApplier));\n\t\t\t//", "answers": ["\t\t\tInterfaceType interfaceType = new InterfaceType(\"\");"], "all_classes": null, "length": 686}
{"pred": "\t\tif (this.postdominators != null && !this.postdominators.equals(other.postdominators))\n\t\t\treturn false;\n\t\tif (this.dependsOnCutAP != other.dependsOnCutAP)\n\t\t\treturn false;\n\t", "answers": ["\t\tif (postdominators == null) {"], "all_classes": null, "length": 1449}
{"pred": "           int min2 = wideLExtent[start][r.leftChild];\n            int min = (min1 > min2 ? min1 : min2);\n            if (min > narrowR) { // can this left constituent stretch far enough to reach the right constituent?\n              continue", "answers": ["            int min2 = wideLExtent[end][rightState];"], "all_classes": null, "length": 1079}
{"pred": "               'rsync', '--archive', '--compress', '--delete',\n                '--exclude={\"pg_hba.conf\", \"pg_ident.conf\"}'\n                '--exclude-from=/path/to/pg_excludes.txt',", "answers": ["                'rsync', '-rLKpts', '--delete-excluded', '--inplace',"], "all_classes": null, "length": 2433}
{"pred": "\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;\n\t\t\tprocess.DelayedIsRunningChanged -= DbgProcess_DelayedIsRunningChanged;\n\t\t\tprocess.ThreadsChanged -= DbgProcess_ThreadsChanged;\n\t\t\tprocess.R", "answers": ["\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;"], "all_classes": null, "length": 924}
{"pred": "writer.attribute( null, \"b\", String.valueOf( b ) );\n\t\twriter.endTag( null, name );\n\t}\n\t/**\n\t * Writes a color value.\n\t *\n\t * @param   name    Name of the color.\n\t * @param", "answers": ["\t\twriter.attribute( null, \"b\", String.valueOf( b ) );"], "all_classes": null, "length": 2472}
{"pred": "\t\tif ( aThat == null ) {\n\t\t\t return false;\n\t\t}\n\t\tif ( !( aThat instanceof Contact ) ) {\n\t\t\t return false;\n\t\t}\n\t\tfinal Contact that = (Contact)aThat;\n\t\treturn ( (", "answers": ["\t\tif (aThat instanceof HibernateProxy) {"], "all_classes": null, "length": 839}
{"pred": "   if total_rej > 10:\n      print('Total number of rejected timesteps: %s' %total_rej)\n      sys.exit()\n\nThe code above is a multi-body simulation written in Python. It uses the Lubrication solver from the Lub", "answers": ["\t    if total_rej == 1:"], "all_classes": null, "length": 801}
{"pred": "       idx, = cdata\n        if idx is None:\n            return\n\n        # Check if the slice is equivalent to the full input\n        if (isinstance(idx, slice) and\n                idx.start is None and idx.stop is None and\n                idx.step is", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": "=====================\n\ndef add_community(request, admin):\n\"\"\"\nFunction to add a new Community by an admin.\n\"\"\"\nif request.method == \"POST\":\nform = AddCommunityForm(request.POST, admin=admin)\nif form.is_valid():\n", "answers": ["        self.member_groups = self.user.get_member_groups(self.groups)"], "all_classes": null, "length": 746}
{"pred": "```python\n    return event_key.with_wrapper(wrap).base_listen(**kw)\n```\nThis code is used to wrap the listener function with a wrapper that returns the query object after the listener function is executed. The wrapper is then used to call the base_listen method with", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": "# Register the descriptor class with the modulestore\n__all__ = ['ConditionalDescriptor']\nif __name__ == '__main__':\n    # Initialize the modulestore\n    from edxmcm.modulestore import ModuleStore\n    from xblock.fields import", "answers": ["            show_str = u'<{tag_name} sources=\"{sources}\" />'.format("], "all_classes": null, "length": 801}
{"pred": "=====================\ndef test_adapter():\n    data = np.random.rand(3, 4, 5)\n    adapter = get_adapter(data, None)\n    print(adapter.get_vlabels())\n    print(adapter.get_hlabels())\n    print", "answers": ["                          for key, (old_value, new_value) in data_model_changes.items()]"], "all_classes": null, "length": 947}
{"pred": "\t\t\tif (Class != null && (Method == null && Field == null && Sig == null))\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tif (Method != null && (Class == null || Sig != null))\n\t\t\t{", "answers": ["\t\t\telse if (Class != null && type == null)"], "all_classes": null, "length": 2841}
{"pred": "\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);\n\t\t\tthis.objYLabel.TabIndex = 17;\n\t\t\tthis.objYLabel.Text = \"Description...\";\n\t\t\t// ", "answers": ["\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);"], "all_classes": null, "length": 722}
{"pred": "       c = self.get(\"mail/syncmail.5\")\n        self.assertEqual(c.who, \"warner\")\n        self.assertEqual(set(c.files), set([\"buildbot/changes/tags/1.0.0\"]))\n        self.assertEqual(c", "answers": ["        c = self.getNoPrefix(\"mail/syncmail.5\")"], "all_classes": null, "length": 615}
{"pred": "       if (termData == null) {\n            termData = new ArrayListValuedHashMap<>();\n            this.data.put(row.get(ID_KEY), termData);\n        }\n        for (Map.Entry<String, String> datum : csvData.entrySet())", "answers": ["        if (termData == null) {"], "all_classes": null, "length": 987}
{"pred": "\t\tif(isPassiveFlower()) {\n\t\t\tif(player.capabilities.isCreativeMode) {\n\t\t\t\tif(passiveDecayTicks > 0) {\n\t\t\t\t\tsetPassiveDecayTicks(0);\n\t", "answers": ["\t\tif(player == null)"], "all_classes": null, "length": 639}
{"pred": "           intrinsicCohesion += this.getRepresentativity(component, c);\n        }\n        this.memorizedcohesion.put(c, intrinsicCohesion);\n        return intrinsicCohesion;\n    }\n    private void birthCase3(ArrayList<", "answers": ["            intrinsicCohesion += this.getRepresentativity(component, c);"], "all_classes": null, "length": 569}
{"pred": "if __name__ == \"__main__\":\n    do_upgrade()", "answers": ["                                if not (docformat in flags[flagname][version]):"], "all_classes": null, "length": 1095}
{"pred": "\t\t\tcomputerMgmt.Shutdown();\n\t\t\tcomputerMgmt.Dispose();\n\t\t\tcomputerMgmt=null;\n\t\t\t\n\t\t\tthis.Close();\n\t\t}\n\t\tprivate void menuItem1_Click(", "answers": ["\t\t\tArrayList comp = this.computerMgmt.getComputerCollection();"], "all_classes": null, "length": 2301}
{"pred": "   for (java.util.Date date : exceptionDates) {\n      exDateList.add(new Date(date));\n    }\n    return new ExDate(exDateList);\n  }\n  /**\n   * Creates an occurrence of the specified event, starting at the specified", "answers": ["    for (java.util.Date anExceptionDate : exceptionDates) {"], "all_classes": null, "length": 783}
{"pred": "\t\tsourceEventBinding.Bind( DataSource.Component, SourceEventName );\n\t}\n\tprivate void bindTargetEvent()\n\t{\n\t\ttargetEventBinding = gameObject.AddComponent<dfEventBinding>();\n\t\ttargetEventBinding.hideFlags = HideFlags.HideAnd", "answers": ["\t\tsourceEventBinding.DataSource = new dfComponentMemberInfo()"], "all_classes": null, "length": 1021}
{"pred": "           ObjectMapper mapper = new ObjectMapper();\n            SpanConfig spanConfig = mapper.readValue(jsonData, SpanConfig.class);\n            ISwitchManager switchManager = (ISwitchManager) ServiceHelper.getInstance(ISwitchManager.class,\n                    container);\n", "answers": ["            Gson gson = new Gson();"], "all_classes": null, "length": 2177}
{"pred": "\t\t\t\tsuper(id, path, width, height);\n\t\t\t}\n\t\t}\n\t\tprivate Images()\n\t\t{\n\t\t\tAlert = new ImageHelper(1000001, \"/ims/images/alert.gif\", new Integer(1", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "       return rnd.nextInt(size);\n    }\n}", "answers": ["        double value = (size - 1) * rnd.nextDouble();"], "all_classes": null, "length": 669}
{"pred": "   def make_von_den_equiv(self, project_uuid, equiv_pred='skos:closeMatch'):\n        \"\"\" makes skos:closeMatch equivalence\n            between entities in a project and\n            entities in the zooarch ontology\n        \"\"\"\n        preds", "answers": ["                    la = LinkAnnotation()"], "all_classes": null, "length": 1128}
{"pred": "           buffer.Append(\"          .shrinktofit= \")\n                .Append(StringUtil.ToHexString(ShrinkToFit)).Append(\"\\n\");\n            buffer.Append(\"          .mergecells = \")\n                .Append(StringUtil.ToHexString(", "answers": ["            buffer.Append(\"          .shrinktoft= \").Append(ShrinkToFit)"], "all_classes": null, "length": 2537}
{"pred": "\t\t\t\t// half-width kana\n\t\t\t\tbytes[posn++] = (byte) (ch - 0x5B);\n\t\t\t\tbytes[posn++] = (byte) (value >> 8);\n\t\t\t\tbytes[posn++] =", "answers": ["\t\t\t\tvalue = ch - 0xFF60 + 0x8EA0;"], "all_classes": null, "length": 1301}
{"pred": "\n# -------------------------------------------------------\n# define FPU instructions\n# -------------------------------------------------------\nISPECS_FPU = []\n@ispec(\"FPU\", \"ADD\", \"F\", \"F\", \"F\")\ndef tricore_fpu_add(obj, F,", "answers": ["    if obj.mnemonic in (\"LD_A\", \"LEA\"): dst = env.A[a]"], "all_classes": null, "length": 7935}
{"pred": "\t\t\tProperties properties = new Properties();\n\t\t\tstream = location.openStream();\n\t\t\tproperties.load(stream);\n\t\t\tJRPropertiesMap propertiesMap = new JRPropertiesMap();\n\t\t\tfor (Enumeration<Object> keys = properties.propertyNames", "answers": ["\t\t\tstream = location.openStream();"], "all_classes": null, "length": 1068}
{"pred": "           return this == CREATIVE;\n        }\n        /**\n         * Returns true if this is the SURVIVAL game type\n         */\n        public boolean isSurvival()\n        {\n            return this == SURVIVAL;\n        }\n        /**\n         *", "answers": ["            return this == CREATIVE;"], "all_classes": null, "length": 497}
{"pred": "\t\t\tcsd = new CommonSecurityDescriptor (false, false, ControlFlags.None, null, null, null, null);\n\t\t\tcsd.PurgeDefaultDacl ();\n\t\t\tAssert.IsFalse (csd.DiscretionaryAcl.IsDefaulted", "answers": ["\t\t\tSecurityIdentifier userSid = new SecurityIdentifier (\"SY\");"], "all_classes": null, "length": 692}
{"pred": "# Here you can add your code to process the results\n# or to do something else with the results.\n# For example, you can use the results to update the tags of the songs.\n# The results are stored in the 'releases' dictionary, where the index\n# is the key.", "answers": ["        for i, result in enumerate(results):"], "all_classes": null, "length": 864}
{"pred": "       // add RPCs from all scripts in the scene\n        foreach (GameObject go in FindObjectsOfType<GameObject>())\n        {\n            Component[] components = go.GetComponents<Component>();\n            foreach (Component component in components)\n            {\n                if (component is", "answers": ["        HashSet<string> currentRpcs = new HashSet<string>();"], "all_classes": null, "length": 2652}
{"pred": "       if (Config.getBoolean(\"show_message_date\", true)) {\n            full_date.setText(SimpleFunctions.formatDate(message.date));\n        }\n        return rootLayout;\n    }\n    @Override\n    public void onCreateOptionsMenu(@NonNull Menu menu,", "answers": ["        if (!Config.isKDEConnectInstalled) {"], "all_classes": null, "length": 551}
{"pred": "       # Transform wave function\n        psit_G = _gpaw.transform_wave_function(psit_G, self.symmetry, k)\n        return psit_G\nif __name__ == '__main__':\n    from gpaw import GPAW,", "answers": ["            ik = self.bz2ibz_k[k]"], "all_classes": null, "length": 906}
{"pred": "       CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);\n        utkastRequest.setPatientEfternamn(Strings.repeat(\"a\", 255));\n        Response response = utkastController.createUtkast(intygsTyp", "answers": ["        CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);"], "all_classes": null, "length": 675}
{"pred": "\t\t\t\tforeach(ILNode child in block.GetChildren()) {\n\t\t\t\t\tILBasicBlock childAsBB = child as ILBasicBlock;\n\t\t\t\t\tif (childAsBB != null) {\n\t\t\t\t\t\tif (prevChildAsBB !=", "answers": ["\t\t\t\tforeach (ILNode child in block.GetChildren()) {"], "all_classes": null, "length": 2070}
{"pred": "\t    if (IsRagdoll) {\n\t\treturn;\n\t    }\n\t    //if we're not a ragdoll then we'll need to set all the parts to ragdoll\n\t    if (!IsRagdoll) {\n\t\tfor (", "answers": ["\t    if (mConvertingToRagdoll) {"], "all_classes": null, "length": 2058}
{"pred": "class StratumLayer(GeoLayer):\n\nPlease complete the code for StratumLayer class.\n\nThe StratumLayer class should be similar to the GeoLayer class, but it should have different properties and methods due to its specific role in the geological model.\n\nHere'", "answers": ["    _not_serialized_attrs_ = ['layer_type', 'top_type']"], "all_classes": null, "length": 878}
{"pred": "       out[outOff + 3] = (byte) ((num >> 24) & 0xff);\n        out[outOff + 2] = (byte) ((num >> 16) & 0xff);\n        out[outOff + 1] = (byte", "answers": ["            out[outOff + 3] = (byte)(num >>> 24);"], "all_classes": null, "length": 1083}
{"pred": "           super( source );\n            this.objectVariables = objectVariables;\n        }\n        private Map<String, PatternNode> objectVariables;\n        @Override\n        protected Iterator<PatternMatch> createIterator()\n        {\n            return new Iterator<PatternMatch>()\n            {\n", "answers": ["            super( source, new Predicate<PatternMatch>()"], "all_classes": null, "length": 1124}
{"pred": "def transform_values_holder_xml_to_json(values_holder_xml, format = None):\n    \"\"\"Transform a values holder XML to a JSON object.\n\n    :param values_holder_xml: An XML element representing a values holder.\n    :param format: A format to", "answers": ["        elif key == 'TAUX':"], "all_classes": null, "length": 954}
{"pred": "           frameToClose = (InternalFrame)buttons.get(btn);\n            if (frameToClose!=null &&\n                frameToClose.getDesktopPane()!=null &&\n                ((DesktopPane)frameToClose.getDesktopPane()).isModal() &&\n               ", "answers": ["            InternalFrame f = (InternalFrame)buttons.get(btn);"], "all_classes": null, "length": 769}
{"pred": "# Define the functions that will be used to access the server-side functions\n# These functions will be decorated with the zmqSocketDecorator to handle the sockets\n# and raise SDSS exceptions if needed\n# The functions will also be defined as closures that take the server-side function as an", "answers": ["    elif sys.argv[1] == '--list':"], "all_classes": null, "length": 866}
{"pred": "   move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));\n    for (int z = 0; z < p.getRasterDepth(); z++)\n    {\n      for (int y = 0", "answers": ["    move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));"], "all_classes": null, "length": 1057}
{"pred": "                   ContentValues cv = new ContentValues();\n                    cv.put(Db.Table1.ID_GROUP, newId);\n                    db.update(Db.Table1.TABLE_NAME, cv, Db.Table1.ID_GROUP + \" = \" + deleteId,", "answers": ["\t\t\t\t\tContentValues cv = new ContentValues();"], "all_classes": null, "length": 666}
{"pred": "               m_ptr = IntPtr.Zero;\n            }\n        }\n        public void Dispose()\n        {\n            Dispose(true);\n            GC.SuppressFinalize(this);\n        }\n        #endregion\n        public IntPtr Pointer\n        {\n            get {", "answers": ["                else if (m_meth == AllocMethod.CoTaskMem)"], "all_classes": null, "length": 459}
{"pred": "LOGIN_REDIRECT_URL = '/'", "answers": ["LOGOUT_URL = '/accounts/logout/'"], "all_classes": null, "length": 2324}
{"pred": "\t\t\tif (queue.Count > 0 && queue[0].Item == itemName)\n\t\t\t{\n\t\t\t\tif (queue[0].Done)\n\t\t\t\t\treturn;\n\t\t\t\tif (queue[0].Cancel(numberToCancel))", "answers": ["\t\t\tfor (var i = 0; i < numberToCancel; i++)"], "all_classes": null, "length": 1183}
{"pred": "\n    infoText += \" file\" if numberOfFiles==1 else \"files\"\n    infoText += \"<br>\"\n\n    if numberOfHiddenFiles>0:\n        infoText += \"(+\" + str(numberOfHiddenFiles) + \" hidden \" \n        infoText += \"file", "answers": ["        infoText += \" file\" if numberOfFiles==1 else \" files\" "], "all_classes": null, "length": 886}
{"pred": "       code = re_m4.sub(r'%%\\1%%', code)\n        # replace all variables by their value\n        for x in self.inputs[0].get_bld().env.get_values():\n            code = code.replace('%' + x[0", "answers": ["        code = code.replace('%', '%%')"], "all_classes": null, "length": 2292}
{"pred": "if __name__ == \"__main__\":\n    rospy.init_node('pars_server')\n    parsing_server = PlanningServer()\n    rospy.spin()\n    rospy.loginfo(\"pars_server is shutting down\")\n    rospy.", "answers": ["        result = self._planningExecutorClient.get_result()"], "all_classes": null, "length": 747}
{"pred": "\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ] - hdiv0 * ( chemical[ 1 ][ idx - reactorExtent ]\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ], hdiv0 );"], "all_classes": null, "length": 1036}
{"pred": "               if (pattern == null) {\n                    throw JsonException.$(0, \"TIMESTAMP format pattern is required\");\n                }\n                columnTypes.add(typeManager.nextTimestampAdapter().of(timestampFormatFactory.get(pattern), timestampLocale));\n                break", "answers": ["                if (pattern == null) {"], "all_classes": null, "length": 839}
{"pred": "\t\t\tif (qs.Execute().ReturnValue < 0)\n\t\t\t\treturn false;\n\t\t\tentity.cti_id = Convert.ToInt32(qs.Parameters[\"@cti_id\"].Value);\n\t\t\treturn true;\n\t\t}", "answers": ["            entity.cti_id = Convert.ToInt32(qs.Return.Rows[0][0]);"], "all_classes": null, "length": 515}
{"pred": "\t\t\tthrow new NotImplementedException();\n\t\t}\n\t\tpublic int PropertyCount\n\t\t{\n\t\t\tget { throw new NotImplementedException(); }\n\t\t}\n\t\tpublic string[] PropertyNames\n\t\t{\n\t\t\tget { throw new Not", "answers": ["\t\t\tthrow new NotImplementedException();"], "all_classes": null, "length": 1017}
{"pred": "#\n# Main logic\n#\ndef main():\n    argument_spec = ce_argument_spec()\n    argument_spec.update(dict(\n        key_id=dict(type='int', required=True),\n        auth_pwd=dict(type='str'),\n       ", "answers": ["        commands = list()"], "all_classes": null, "length": 1208}
{"pred": "           component = self.store.update(\n                component,\n                editing_user,\n                fields={'display_name': 'Changed Display Name'}\n            )\n        after_update = datetime.datetime.now(UTC)\n        # Verify that the component was last edited by the", "answers": ["            component = self.store.update_item(component, editing_user)"], "all_classes": null, "length": 4935}
{"pred": "       digest.update((byte) (TEXT_CODE & 0xff));\n        updateWith(new String(ch, start, length));\n    }\n    public void ignorableWhitespace(char ch[], int start, int length) throws SAXException {\n        digest.update((byte", "answers": ["        digest.update((byte) (TEXT_CODE & 0xff));"], "all_classes": null, "length": 865}
{"pred": "#def mkrange(data):\n#    record = unpack(data, 'range')\n#    start = unpack(record['start'], 'TEXT')\n#    end = unpack(record['end'], 'TEXT')\n#    return (start, end)\n#\n#def", "answers": ["    return aetypes.Range(dict['star'], dict['stop'])"], "all_classes": null, "length": 1045}
{"pred": "           Type type = api.ActionDescriptor.GetParameters()[0].ParameterType;\n            if (typeof(HttpRequestMessage).IsAssignableFrom(type))\n            {\n                type = ResolveHttpRequestMessageType(api);\n            }\n            else if (typeof(HttpResponseMessage", "answers": ["            if (!Enum.IsDefined(typeof(SampleDirection), sampleDirection))"], "all_classes": null, "length": 1053}
{"pred": "       elif event.keyval == gtk.keysyms.F2:\n            if isinstance(entry, gtk.Entry):\n                value = entry.get_text()\n            else:\n                value = entry.get_active_text()\n            self.on_open", "answers": ["                value = entry.get_active_text()"], "all_classes": null, "length": 586}
{"pred": "           beanProperties.addPropertyValue(LegacyConfigPostProcessor.PROPERTY_LOCATIONS, newLocationList);\n        }\n        return beanProperties;\n    }\n    /**\n     * The order of this bean factory post processor.\n     */\n    public int getOrder()\n    {", "answers": ["            if (newLocationList.size() > 0)"], "all_classes": null, "length": 961}
{"pred": "           lines = f.readlines()\n        finally:\n            f.close()\n    if lines:\n        for line in lines:\n            if len(line.strip()) == 0:\n                module.fail_json(msg=\"Password file contains blank lines\")\n    if state", "answers": ["            lines = f.readlines()"], "all_classes": null, "length": 744}
{"pred": "       [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,\n        [In, MarshalAs(UnmanagedType.IUnknown)] IntPtr pUnk\n        );\n        [PreserveSig]\n        int Flush();\n        [PreserveSig]", "answers": ["            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,"], "all_classes": null, "length": 848}
{"pred": "       ensureWriteAccess( directedAclKeys.getAclKey() );\n        spm.addPrincipalToPrincipal( directedAclKeys );\n        return null;\n    }\n}", "answers": ["        ensureWriteAccess( directedAclKeys.getTarget() );"], "all_classes": null, "length": 695}
{"pred": "       for child in element:\n            if not self.verify_element(child):\n                return False\n        return True\n    def verify_tag(self, element):\n        \"\"\"Verify the tag of an element matches what is expected.\n        Arguments:\n        element Element object.\n", "answers": ["        children = element.findall('*')"], "all_classes": null, "length": 861}
{"pred": "=======================\n\n# This is the code that is missing from the given code snippet.\n# It is used to create a new Document object.\n\ndef parse(xmlstring):\n    \"\"\"\n    Parse an XML document from a string.\n\n    :param xmlstring: The XML document", "answers": ["    elif node.nodeType == Node.DOCUMENT_TYPE_NODE:"], "all_classes": null, "length": 5441}
{"pred": "\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);\n\t\t\t}\n\t\t};\n\t\tvalidateEMSSceneSectionMassCasualtyIndicatorTestCase.doValidationTest();\n\t}\n\t/**\n\t*\n\t*", "answers": ["\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);"], "all_classes": null, "length": 659}
{"pred": "\t\t\tif (decoder.peekType(TlvTypeCodes.KeyName, endOffset)) {\n\t\t\t\tName name = new Name();\n\t\t\t\tdecodeName(name, decoder);\n\t\t\t\tkeyLocator.setKeyName(name);\n", "answers": ["\t\t\tif (decoder.getOffset() == endOffset)"], "all_classes": null, "length": 2575}
{"pred": "       for(int i = 0; i < ActiveWeapons.size(); i++){\n            ActiveWeapons.get(i).update();\n        }\n        \n        //Updates the camera position\n        if(myPlayer.destination.x != destx || myPlayer.destination", "answers": ["        for(int i = 0; i< myWeapons.length; i++) {"], "all_classes": null, "length": 673}
{"pred": "       action.setColor( color );\n        GameEngine.model().getGame().addJoin( action );\n        hide();\n      }\n    } );\n    hpanel.add( m_btnOk );\n    m_panel.add( hpanel );\n    setWidget( m_", "answers": ["        action.setAccount( AppMain.instance().getMyAccount() );"], "all_classes": null, "length": 819}
{"pred": "# Raise an error if the response is not 200 OK\nif r.status != 200:\n    err = json.loads(r.data.decode(\"utf-8\"))\n    if \"status\" in err and err[\"status\"] == False:\n        msgs", "answers": ["        err = json.loads(r.data.decode(\"utf-8\"))"], "all_classes": null, "length": 962}
{"pred": "\t\t\t\t\t\tresponse = service.MergeOrder(request);\n\t\t\t\t\t});\n\t\t\t\tmergedOrder = response.GetMergeOrderResponse.MergedOrder;\n\t\t\t\tfailureReason = null;\n\t\t\t}\n\t\t\tcatch (Exception", "answers": ["\t\t\t\t\t\tresponse = service.MergeOrder(request);"], "all_classes": null, "length": 849}
{"pred": "def _find_carbon_sources(model: \"Model\") -> Optional[List[\"Reaction\"]]:\n    \"\"\"Identify carbon sources in the medium.\n    Parameters\n    ----------\n    model : cobra.Model\n        The model to search for carbon sources in.\n    Returns\n    ", "answers": ["    if len(reaction.metabolites) != 1:"], "all_classes": null, "length": 1153}
{"pred": "class Unit(CachedTreeItem, models.Model, base.TranslationUnit):\n    \"\"\"A single unit of translation.\n    \"\"\"\n    #: The source string.\n    source = models.CharField(max_length=255, db_index=True)\n    #:", "answers": ["        lang, proj, dir_path, filename = split_pootle_path(pootle_path)"], "all_classes": null, "length": 588}
{"pred": "\n        migrations.AddField(\n            model_name='city',\n            name='state',\n            field=models.ForeignKey(to='events.State'),\n        ),\n\n        migrations.AddField(\n            model_name='academiccenter',\n            name='city',", "answers": ["                ('created', models.DateTimeField(auto_now_add=True, null=True)),"], "all_classes": null, "length": 519}
{"pred": "# start here\ndef _openflow_switch_init(openflow_switch):\n    openflow_switch.controller_links = {}\n    openflow_switch.ipdests = PyTricia()\n    openflow_switch.trafgen_ip = '127.0", "answers": ["                    pinfo = self.ports[portnum]"], "all_classes": null, "length": 720}
{"pred": "   if (m_IgnoreChanges)\n      return;\n    \n    if (m_RecentItems.size() >= m_MaxCount) {\n      m_RecentItems.remove(m_MaxCount);\n    }\n    m_RecentItems.add(item);\n", "answers": ["    item = fromString(toString(item));"], "all_classes": null, "length": 1401}
{"pred": "           if (src.FightMode == FightMode.Aggressor || src.FightMode == FightMode.PassiveDefensive || src.FightMode == FightMode.Defensive || src.FightMode == FightMode.PassiveAggressive)\n                return true", "answers": ["            return src.Map.Rules == MapRules.FeluccaRules;"], "all_classes": null, "length": 562}
{"pred": "       if (halfTradePeriodDate == null && takeOfferDate != null) {\n            halfTradePeriodDate = new Date(takeOfferDate.getTime() + getOffer().getPaymentMethod().getMaxTradePeriod() / 2);\n        }\n        return half", "answers": ["        if (halfTradePeriodDate == null && takeOfferDate != null)"], "all_classes": null, "length": 1060}
{"pred": "\t\t\tif (a == null) a = LeadingAny(p.down);\n\t\t}\n\t\treturn a;\n\t}\n\t\n\tstatic void CompSyncSets() {\n\t\tallSyncTrans = new ArrayList();\n\t\tforeach (Symbol sym in Symbol.non", "answers": ["\t\t\tif (a == null) a = LeadingAny(p.down);"], "all_classes": null, "length": 2508}
{"pred": "\t\t\tWriteData(buff);\n\t\t\tif(!mReadDone.WaitOne(3000, false))\n\t\t\t\tthrow new WiimoteException(\"ReadData timed out.\");\n\t\t\treturn mReadBuff;\n\t\t}\n\t\t/// <", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "\t\t\tthis.direction = (order == SortOrder.DESCENDING) ? -1 : 1;\n\t\t\tthis.caseInsensitive = caseInsensitive;\n\t\t}\n\t\tpublic int compare(Object o1, Object o2)\n\t\t{\n\t\t", "answers": ["\t\t\tif (order == SortOrder.DESCENDING)"], "all_classes": null, "length": 641}
{"pred": "\t\t\t\t\tSendEmail( filePath );\n\t\t\t}\n\t\t\tcatch\n\t\t\t{\n\t\t\t\tConsole.WriteLine( \"failed\" );\n\t\t\t}\n\t\t}\n\t\tprivate static string GetTimeStamp()\n\t\t{\n", "answers": ["\t\t\t\t\tSendEmail( filePath );"], "all_classes": null, "length": 677}
{"pred": "\t\t\t\tIList list = session.CreateCriteria(typeof(Item))\n\t\t\t\t\t.Add(Expression.Gt(\"Id\", 2))\n\t\t\t\t\t.SetCacheable(true)\n\t\t\t\t\t.List();\n\t\t\t\tAssert", "answers": ["\t\t\t\tIList list = session.CreateCriteria(typeof(Item))"], "all_classes": null, "length": 480}
{"pred": "           for (int j = 0; j < N_INDEXES; j++)\n            {\n                _units2Indx[j] = j;\n            }\n        }\n    }\n}\nThe code above is incomplete and needs to be completed to function properly. Here'", "answers": ["            for (k++; i < N1 + N2 + N3; i++, k += 3)"], "all_classes": null, "length": 1244}
{"pred": "# class ComputeRateCollection(BaseCollection):\n#     ENTITY = ComputeRate\n#     RATE_TYPE = ENTITY.RATE_TYPE\n#     def create(self, description, currency=None, fields=None):\n#         \"\"\" Create a rate in the UI\n", "answers": ["        view = navigate_to(self, 'Add')"], "all_classes": null, "length": 641}
{"pred": "\t\t\tif ( useShadowBuffer )\n\t\t\t{\n\t\t\t\tshadowBuffer.WriteData( offset, length, src, discardWholeBuffer );\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthrow new AxiomException(", "answers": ["\t\t\tOpenGL.BindBuffer( All.ElementArrayBuffer, _bufferId );"], "all_classes": null, "length": 782}
{"pred": "\t\tself[\"satfinder_scan_nims\"] = self.satfinder_scan_nims\n\t\tself[\"satfinder_scan_nims\"].addNotifier(self.createSetup, initial_call = False)\n\t\tself[\"satfinder_scan_nims\"].add", "answers": ["\t\tself.feid = int(self.satfinder_scan_nims.value)"], "all_classes": null, "length": 673}
{"pred": "           else {\n                String[] filters = filterStr.split(\",\");\n                for (String filter : filters) {\n                    String[] parts = filter.split(\":\");\n                    if (parts.length != 2) {\n                        throw new IllegalArgumentException(\"Invalid filter \"", "answers": ["            else if (filterStr.length() == 0 || filterStr.length() > 255) {"], "all_classes": null, "length": 931}
{"pred": "               // Copy the decoded row to the output\n                fout.Write(curr, 0, bytesPerRow);\n                // Copy the decoded row to the previous row\n                Array.Copy(curr, 0, prior, 0, bytesPerRow);\n           ", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "       s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')\n        self.assertEqual(s.get_interface(), None)\n        self.assertFalse(s.has_interface('com.example.Interface'))\n        s.set_interface", "answers": ["        s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')"], "all_classes": null, "length": 677}
{"pred": "\n    def __str__(self):\n        return \"MASS object with options: \" + str(self.get_options())\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                except (KeyError, AttributeError):"], "all_classes": null, "length": 1017}
{"pred": "           AssertParseError(\n                \"1:1: Message type \\\"protobuf_unittest.TestAllTypes\\\" has no field \" +\n                \"named \\\"optional_group.nosuchfield\\\".\",\n                \"optional_group.nosuchfield: 123\");\n", "answers": ["                \"1:21: Expected \\\">\\\".\","], "all_classes": null, "length": 1187}
{"pred": "\t\tfinal Object old = map.remove( key );\n\t\treturn old;\n\t}\n\t@Override\n\tpublic void putAll(Map m) {\n\t\tif ( isPutQueueEnabled() ) {\n\t\t\tfinal Iterator it = m.entrySet().iterator();", "answers": ["\t\treturn map.remove( key );"], "all_classes": null, "length": 794}
{"pred": "\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t\t/// <summary>\n\t\t/// Records a staff member deleting an auction\n\t\t/// </summary>\n\t\t///", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "\nclass HrAttendance(models.Model):\n    _inherit = \"hr.attendance\"\n    _description = \"Attendance\"\n    @api.multi\n    def attendance_action_change(self):\n        \"\"\" Changes the attendance of the employee.\n            Returns the attendance record", "answers": ["        return {'action': action_message}"], "all_classes": null, "length": 686}
{"pred": "\t\tgrdResultsRow parentRow = null;\n\t\tif (orderInvestigationLiteVo.getSpecimenIsNotNull() && orderInvestigationLiteVo.getSpecimen().getSpecimenIndexIsNotNull())\n\t\t{\n\t\t\tparentRow = findOrCreateSpecimen", "answers": ["\t\tif (orderInvestigationLiteVo == null)"], "all_classes": null, "length": 667}
{"pred": "               pt = (POINT)c.ReadToStructure(0, typeof(POINT));\n                c.Dispose();\n                return new Point(pt.x, pt.y);\n            }\n        }\n        /// <summary>\n        /// Set the position of this item.", "answers": ["                pt = (POINT)c.ReadToStructure(0, typeof(POINT));"], "all_classes": null, "length": 808}
{"pred": "       terminal = maker.new_terminal(self, cwd, profile)\n        self.add_terminal(terminal)\n        self.show_all()\n        self.terminator.last_active_window = self.uuid\n        if debugtab:\n            terminal.set", "answers": ["        if not self.is_child_notebook():"], "all_classes": null, "length": 689}
{"pred": "                   toReturn.Add( new StructTypeInfo( nameArraySizeFragment, managedType, marshalAttribute, arraySize ) );\n                }\n            }\n            return toReturn;\n        }\n    }\n    public class StructInfo\n    {\n        public StructInfo( string name,", "answers": ["                    string name = nameArraySizeFragments[0];"], "all_classes": null, "length": 1831}
{"pred": "\t\t\t\treturn base_type == null || base_type.IsValueType;\n\t\t\t}\n\t\t}\n\t\tpublic override bool IsByRef {\n\t\t\tget { return base_type != null && base_type.IsByRef; }\n\t\t}", "answers": ["\t\t\t\tif (base_type == null)"], "all_classes": null, "length": 1469}
{"pred": "               throw new Exception(\"Could not find model: \" + args.Key);\n            }\n        }\n        #endregion\n    }\n}", "answers": ["                throw new Exception(\"Could not find model: \" + args.Key);"], "all_classes": null, "length": 578}
{"pred": "\n    self.context = OpenSSL.SSL.SSL_CTX(\n        _openssl_versions[protocol]()\n    )\n    self.context.set_ecdh_auto(1)\n    self.context.set_options(OpenSSL.SSL.OP_NO_SSL", "answers": ["        self.protocol = _openssl_versions[protocol]"], "all_classes": null, "length": 1264}
{"pred": "\t\t\tthis.label8 = new global::Gtk.Label ();\n\t\t\tthis.label8.Visible = true;\n\t\t\tthis.hbox3.Add (this.label8);\n\t\t\t// Container child hbox3.Gtk.Box+BoxChild\n", "answers": ["\t\t\tthis.label8 = new global::Gtk.Label ();"], "all_classes": null, "length": 1086}
{"pred": "# The following code is not complete, you need to write the code for the\n# function getheadbook() and the function cur_gmwidg()\n# The function getheadbook() should return the headbook (notebook)\n# The function cur_gmwidg() should return the", "answers": ["                for notebook in notebooks.values():"], "all_classes": null, "length": 1188}
{"pred": "   \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),\n    \"Close-all-tabs\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_W),\n    \"Close-all-tabs-", "answers": ["    \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),"], "all_classes": null, "length": 902}
{"pred": "\t\treturn \"MutablePersistenceUnitInfo [persistenceUnitName=\" + this.persistenceUnitName + \", persistenceProviderClassName=\"\n\t\t\t\t+ this.persistenceProviderClassName + \", transactionType=\" + this.transactionType\n\t\t\t\t+ \", nonJtaDataSource=\" + this.", "answers": ["\t\tStringBuilder builder = new StringBuilder();"], "all_classes": null, "length": 538}
{"pred": "   IEditorInput editorInput = getEditorPart().getEditorInput();\n    if (editorInput instanceof IFileEditorInput)\n    {\n      IFileEditorInput fileEditorInput = (IFileEditorInput)editorInput;\n      return fileEditorInput.exists() && !fileEditorInput.", "answers": ["    IWorkbench workbench = PlatformUI.getWorkbench();"], "all_classes": null, "length": 469}
{"pred": "\t\t\tthis.butAttach.Location = new System.Drawing.Point(883, 615);\n\t\t\tthis.butAttach.Name = \"butAttach\";\n\t\t\tthis.butAttach.Size = new System.Drawing.Size(7", "answers": ["\t\t\tthis.butAttach.Location = new System.Drawing.Point(738, 2);"], "all_classes": null, "length": 692}
{"pred": "       if (sb != null)\n        {\n            return sb.toString();\n        }\n        else\n        {\n            return string;\n        }\n    }\n}\n\n// The following code is missing, it should be added to the end of the class\n\n// This method is", "answers": ["        if (sb == null)"], "all_classes": null, "length": 627}
{"pred": "\t\t\tCheck (\"HMACSHA512-N-RFC4231-TC1\", hmac, data, digest);\n\t\t}\n\t\t[Test]\n\t\tpublic void RFC4231_TC2_Legacy ()\n\t\t{\n", "answers": ["\t\t\tCheck (\"HMACSHA512-L-RFC4231-TC1\", hmac, data, digest);"], "all_classes": null, "length": 1867}
{"pred": "\t    switch(EnumSwitcher.option_1) {\n\t        case option_1:\n\t            current_sum += 4;\n\t            break;\n\t        case option_2:\n\t            current_sum += 4;\n\t            break;\n\t        case option", "answers": ["\t    current_sum += 4 + CDRSerializer.alignment(current_sum, 4);"], "all_classes": null, "length": 737}
{"pred": "       return null;\n      String jdk = java.GetValue(\"InstallationFolder\").ToString();\n      return jdk;\n    }\n    private static String GetJavaHome(String resinHome, String javaHome)\n    {\n      if (javaHome != null)\n        return java", "answers": ["        java = regKey.OpenSubKey(\"1.6\");"], "all_classes": null, "length": 950}
{"pred": "   comment = l\n    if job is not None:\n        if l.split()[1] == job:\n            return [comment, l]\n    return []\n    def find_env(self, name):\n        # attempt to find env by 'Ansible:' header comment\n       ", "answers": ["                comment = re.sub(r'%s' % self.ansible, '', l)"], "all_classes": null, "length": 1528}
{"pred": "# Mesh Modifiers\n# ----------------------------------------------------------------------------------------------------------------------\n# Mesh Modifiers\n# ----------------------------------------------------------------------------------------------------------------------\n# Mesh Modifiers\n# ----------------------------------------------------------------------------------------------------------------------\n# Mesh Modifiers\n# --------------------------------------------------------------------------------", "answers": ["        modifier.vertex_group = modifier_json['vertex_group']"], "all_classes": null, "length": 994}
{"pred": "           double[] likelihoods = new double[totalBuckets];\n            for(int i = 0; i < totalBuckets; ++i)\n            {\n                double bucketRank = mScoreRankBuckets.get(i);\n                int rankCount = rankCount", "answers": ["            for(int i = 0; i < rankCounts.length; ++i)"], "all_classes": null, "length": 822}
{"pred": "       for (val edge : vertex.neighbors()) {\n            neighbors.add(edge.getEnd());\n        }\n        assertEquals(3, neighbors.size());\n        assertEquals(1, neighbors.get(0));\n        assertEquals(2, neighbors.get(1));\n       ", "answers": ["        for (val n : vertex.neighbors()) {"], "all_classes": null, "length": 466}
{"pred": "\nif __name__ == \"__main__\":\n    pydump = Pydump()\n    pydump.main()\n\n#This is the main part of the code.\n#It initializes the Pydump class and starts the main function.\n#The main function checks the arguments", "answers": ["                    self.choice = int(self.choice) - 1"], "all_classes": null, "length": 615}
{"pred": "           this.rptComboBox.Location = new System.Drawing.Point(91, 161);\n            this.rptComboBox.Name = \"rptComboBox\";\n            this.rptComboBox.Size = new System.Drawing.Size(264,", "answers": ["            this.rptComboBox.Location = new System.Drawing.Point(92, 5);"], "all_classes": null, "length": 764}
{"pred": "           'Meta': {'object_name': 'Scan'},\n            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True'}),\n            'creator': ('django.db.models.fields.related.ForeignKey', [], {'related", "answers": ["            'Meta': {'ordering': \"['ordering']\", 'object_name': 'Scan'},"], "all_classes": null, "length": 1056}
{"pred": "               // If the type is not defined, and we're not processing imports, throw an error\n                throw SDOException.typeReferencedButNotDefined(targetNamespace, sdoTypeName);\n            }\n        }\n        return false;\n    }\n    private void", "answers": ["                QName qname = new QName(targetNamespace, sdoTypeName);"], "all_classes": null, "length": 1110}
{"pred": "       self.holidays_validate_notificate(cr, uid, ids, context=context)\n        return self.write(cr, uid, ids, {'state':'validate'})\n    def holidays_refuse(self, cr, uid, ids, context=None):\n        self", "answers": ["        obj_emp = self.pool.get('hr.employee')"], "all_classes": null, "length": 1956}
{"pred": "           set { this.Enabled = value; }\n        }\n        /// <summary>\n        /// Gets the <see cref=\"IBOColSelector\"/>'s <see cref=\"IBOColSelector.ControlEnabled\"/> property\n        /// </summary>\n        bool IBOColSelector.Enabled\n", "answers": ["            set { this.Enabled = value; }"], "all_classes": null, "length": 2288}
{"pred": "           return String.Format(\"{0} ({1}): {2} ({3} Channels)\", this.Name, this.TargetName, this.TypeDescription, this.Channels);\n        }\n    }\n}\n// End of code\nThe code you see above is a part of", "answers": ["            return String.Format(\"{0} {1} ({2} controls, ID={3})\", "], "all_classes": null, "length": 672}
{"pred": "\t\t\tvalue10 = domainFactory.getDomainObject(ims.core.domain.CareContext.class, valueObject.getCareContext().getId());\n\t\t}\n\t\tdomainObject.setCareContext(value10);\n\t\tdomainObject.setCustomID(", "answers": ["\t\t\tif (valueObject.getCareContext().getBoId() == null)"], "all_classes": null, "length": 1991}
{"pred": "           [\"cargo\", \"build\"],\n            cwd=self.get_target_dir(),\n            env=env,\n            args=opts,\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE,\n            universal_newlines=True)", "answers": ["            [\"cargo\", \"build\"] + opts,"], "all_classes": null, "length": 688}
{"pred": "\t\t\tdouble estN = counts[3];\n\t\t\treturn Math.max(this.getScore(new double[] { p, 0 }, true), this.getScore(new double[] { 0, n }, false))\n\t\t\t\t\t+ Math.min(est", "answers": ["\t\t\tdouble estN = counts[3];"], "all_classes": null, "length": 1642}
{"pred": "               Stashed.SetStashDiffs(gitStash.Revision, gitStash.Revision, ResourceManager.Strings.Stash, gitItemStatuses, null, null, null);\n            }\n            Loading.IsAnimating = false;\n            Loading.Visible", "answers": ["                var firstId = Module.RevParse(gitStash.Name + \"^\");"], "all_classes": null, "length": 671}
{"pred": "# print out the addresses of the beam monitors:\nst_AssignAddressItem_print_out(\n    job.ptr_assign_item(\n        dest_buffer_id=st_ARCH_BEAM_ELEMENTS_BUFFER_ID,\n        dest_elem_index=bm", "answers": ["    assert lattice.cbuffer.get_object(bm1_index).out_address != 0"], "all_classes": null, "length": 594}
{"pred": "       if (o == this) {\n            return true;\n        }\n        if (!(o instanceof AuthScope)) {\n            return false;\n        }\n        final AuthScope that = (AuthScope) o;\n        return this.match(that) > 0;\n    }\n", "answers": ["        if (o == this) {"], "all_classes": null, "length": 1028}
{"pred": "                       b}, callback, asyncState);\n        }\n        public int EndAddInt(System.IAsyncResult asyncResult) {\n            object[] results = this.EndInvoke(\"AddInt\", asyncResult);\n            return ((int)(results[0]));\n        }\n    }\n}", "answers": ["                        b}, callback, asyncState);"], "all_classes": null, "length": 1364}
{"pred": "\t\t\t\t\tif (i < snrs.size() - 1) {\n\t\t\t\t\t\ts += PaneldatenDto.getPanelDaten().getLsArtikel()\n\t\t\t\t\t\t\t\t.getSeriennummerTrennzeichen", "answers": ["\t\t\t\t\tif (!(i == snrs.size() - 1)) {"], "all_classes": null, "length": 724}
{"pred": "\t\t\t\t\tEType = (EClassifier)value;\n\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\tcase \"eGenericType\" : \n\t\t\t\t\tEGenericType = (EGeneric", "answers": ["\t\t\t\t\tEType = (EClassifier)value;"], "all_classes": null, "length": 642}
{"pred": "# Load the archive index\narchive_index = load_archive_index(args.index_file)\nargs.func(archive_index, args)\nif __name__ == '__main__':\n    main()", "answers": ["        log.log_strm = open(args.log_file, 'w')"], "all_classes": null, "length": 626}
{"pred": "       self.mosi_bits = self.parse_bits(mosi)\n        self.miso_bits = self.parse_bits(miso)\n        self.ss, self.es = ss, es\n        # TODO: Handle the different packet types.\n        if ptype", "answers": ["        if ptype == 'BITS':"], "all_classes": null, "length": 1650}
{"pred": "         cursor = limit - v_3;\n          // call RV, line 200\n          if (!r_RV()) {\n            limit_backward = v_2;\n            return false;\n          }\n        } while (false);\n        // call step_0,", "answers": ["          cursor = limit - v_3;"], "all_classes": null, "length": 3016}
{"pred": "               o = cls.newInstance();\n                if (o instanceof LCMDataInput) {\n                    LCMDataInput din = (LCMDataInput) o;\n                    din.read(dins);\n                    if (cd != null) {\n                        cd.", "answers": ["                if (cd == null) {"], "all_classes": null, "length": 583}
{"pred": "   def _get_key_usage(self):\n        result = []\n        for extension in self.cert.get_extensions():\n            if extension.get_short_name() == 'keyUsage':\n                for usage in extension.get_value():\n                    result.append(", "answers": ["                return sorted(result), bool(extension.get_critical())"], "all_classes": null, "length": 2179}
{"pred": "\t\t\t\tstill_there = (i != _slots.end());\n\t\t\t}\n\t\t\tif (still_there) {\n\"\"\", file=f)\n    if v:\n        print(\"\\t\\t\\ti->first->operator()();\", file", "answers": ["\t\t\t\tstill_there = _slots.find (i->first) != _slots.end ();"], "all_classes": null, "length": 1211}
{"pred": "# The following code is the same as in utf8_state_split.py\n# It is not shown here to avoid redundancy.\n# It is used to print the result of the state machine transformation.\n# It is not required for the actual transformation.\n# It is only used for debug", "answers": ["    front_seq = unicode_to_utf16(X.begin)"], "all_classes": null, "length": 1192}
{"pred": "\t\t\t//tab.attr.Add(sym, t.val);\n\t\t}\n\t}\n\tvoid Sym(out string name, out int kind) {\n\t\tint i;\n\t\tname = \"\";\n\t\tkind = 0;\n\t\tif (la.", "answers": ["\t\t\tint beg = la.pos; int col = la.col;"], "all_classes": null, "length": 1264}
{"pred": "# vim:expandtab:smartindent:tabstop=4:softtabstop=4:shiftwidth=4:\n# -*- coding: utf-8 -*-\n#\n#    OpenERP, Open Source Business Applications\n#    Copyright (c) 2011 OpenERP", "answers": ["            edi_doc['product_qty'] = line.product_uom_qty"], "all_classes": null, "length": 813}
{"pred": "\t\tHashtable<String, String> serviceProperties = new Hashtable<String, String>();\n\t\tserviceProperties.put(\"uri\", REST_SERVLET_ALIAS+\"/ssl\");\n\t\treturn new ServiceDescription(\"_openhab-server-ssl._tcp.", "answers": ["    \tServiceDescription description = getDefaultServiceDescription();"], "all_classes": null, "length": 603}
{"pred": "               permissions = new ArrayList<>();\n                nameMap.put(name, permissions);\n            }\n            permissions.add(permissionEntry);\n        }\n        return nameMap;\n    }\n    @Test\n    public void testGetPermissions() throws Exception\n    {\n        setUp", "answers": ["                permissions = new ArrayList<>();"], "all_classes": null, "length": 897}
{"pred": "# Here you can add your test cases for the Enumerator class.\n# Each test case should start with the name of the test and should be\n# followed by a function definition. The function should take a context\n# argument and should contain the test logic.\n#\n# For example:\n#", "answers": ["            subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0'))"], "all_classes": null, "length": 769}
{"pred": "# Initialize device\ndevice = Device(deviceToken)\n# Initialize user\nuser = user.newUser(loginId, password)\n# Login\nuser.login()\n# Check inspection\ninspection = device.check_inspection()\nprint(inspection)\n# End tutorial\nuser.", "answers": ["    device = Device(token=deviceToken)"], "all_classes": null, "length": 478}
{"pred": "# Parse the command line arguments.\nargs = docopt(__doc__)\n# Set the calibrator name.\ncalibrator = args['--calibrator']\nif (calibrator is None):\n    calibrator = \"1950-01-01T0", "answers": ["        elif (index_elements[0] == \"Scatter\"):"], "all_classes": null, "length": 1818}
{"pred": "           ItemID = 0x1011 + (m_Keys.Count * 10);\n        }\n        private class InternalTarget : Target\n        {\n            private KeyRing m_Owner;\n            public InternalTarget(KeyRing owner) : base(1, false", "answers": ["            if (Keys.Count < 1)"], "all_classes": null, "length": 549}
{"pred": "       for (Iterator<String> iter = devices.iterator(); iter.hasNext();){\n            String device = iter.next();\n            String ipAddress = \"\";\n            int model = 0;\n            if (ipAddressMap.containsKey(device)){\n                ipAddress = ipAddress", "answers": ["        for (String device : devices) {"], "all_classes": null, "length": 1943}
{"pred": "   if (lastSeenVersion < Version.USER_NOTIFICATION) {\n      jobs.put(Version.USER_NOTIFICATION, new UserNotificationMigrationJob());\n    }\n    if (lastSeenVersion < Version.DAY_BY_DAY_STICKERS) {\n     ", "answers": ["    if (lastSeenVersion < Version.USER_NOTIFICATION) {"], "all_classes": null, "length": 1057}
{"pred": "     List<Pattern> regex = new ArrayList<>();\n      for (String regexString : split[0].split(\"\\\\s+\")) {\n        regex.add(Pattern.compile(regexString, ignoreCase));\n      }\n      String type = split[1];\n      Set<String> over", "answers": ["      if (split.length < 2 || split.length > 4)"], "all_classes": null, "length": 1566}
{"pred": "       for p in path:\n            if os.path.exists(os.path.join(p, n)):\n                return os.path.join(p, n)\n            # try the sub-path\n            if sub_path:\n                for p in path:\n                ", "answers": ["            i = SCons.Node.FS.find_file(n, (source_dir,) + sub_path[0])"], "all_classes": null, "length": 1329}
{"pred": "# Mapnik Python API\n# =================\n#\n# The following classes and functions are part of the Mapnik Python API.\n#\n# The Mapnik Python API is a wrapper around the C++ Mapnik library.\n# It provides a Pythonic interface to the Mapnik library.\n#\n", "answers": ["        ctx = Context()"], "all_classes": null, "length": 2860}
{"pred": "# Initialize the Ansible module\nmodule = AnsibleModule(\n    argument_spec=f5_argument_spec(),\n    supports_check_mode=True,\n)\n# Get the parameters from the module\nparams = module.params\n# Set the default values for the parameters\n", "answers": ["        if self.want.destination != self.have.destination:"], "all_classes": null, "length": 1555}
{"pred": "=====================\nclass MethodAddView(AutomateExplorerView):\n    title = Text('#explorermenu_title')\n    # ...\n    def open(self):\n        navigate_to(self, self.context['object'].tree_path)\n        self.location.", "answers": ["    cancel_button = Button('Cancel')"], "all_classes": null, "length": 628}
{"pred": "           throw new Exception(\"ActionFactory: getActionObject: \"\n                    + \"Action class not found: \" + className);\n        }\n        return result;\n    }\n    public void executeAction(String actionName, Object[] args) throws Exception {\n        IAction action = getAction", "answers": ["            notifyListeners(new EventObject(this), EventStatusType.ERROR,"], "all_classes": null, "length": 740}
{"pred": "=====================\n\nclass TestCreateThread(TestCase):\n    \"\"\"Tests for creating a thread.\"\"\"\n\n    def setUp(self):\n        super().setUp()\n        self.client = Client()\n        self.course_key = SlashSeparatedCourseKey.from_", "answers": ["            {\"thread_id\": \"dummy\", \"course_id\": unicode(self.course_id)},"], "all_classes": null, "length": 1297}
{"pred": "# Check for existence of manifest file and other conditions.\n# If they are met, embed the manifest by calling embedManifestDllAction.\nembedManifestDllAction(target, source, env)\n# If the manifest file does not exist, raise an error.\nelse:\n    raise SCons", "answers": ["            ret = (embedManifestDllAction) ([target[0]],None,env)        "], "all_classes": null, "length": 917}
{"pred": "           ISchedulingRule rule = getSchedulingRule();\n            Job job = new WorkspaceJob(getOperationMessage()) {\n                @Override\n                protected IStatus runInWorkspace(IProgressMonitor monitor) throws CoreException, InvocationTargetException, InterruptedException {\n                   ", "answers": ["            WorkspaceModifyOperation op = new WorkspaceModifyOperation() {"], "all_classes": null, "length": 1208}
{"pred": "\t\t// Allocate output row meta data\n\t\tdata.outputRowMeta = new RowMetaInterface();\n\t\treturn super.init(smi, sdi);\n\t}\n\t\n\tpublic void dispose(StepMetaInterface smi, StepDataInterface sdi)\n\t{", "answers": ["\t\tif (super.init(smi, sdi))"], "all_classes": null, "length": 521}
{"pred": "```python\n# both\nassert f('-5..+5', last=d(2014,1,31, 19,47)) == (d(2014,1,31, 19,42), d(2014", "answers": ["    assert f('+5..', last) == (d(2014,1,30, 22,21), now)"], "all_classes": null, "length": 1349}
{"pred": "           int count = Utility.ToInt32(snpccount);\n            int fakecountA = Utility.ToInt32(sfakecountA);\n            int fakecountB = Utility.ToInt32(sfakecountB);\n            int fakecountC =", "answers": ["            else if (smaxtime.Contains(\"h\"))"], "all_classes": null, "length": 1478}
{"pred": "def test_qemu_suspend(test, params):\n    \"\"\"\n    Test qemu suspend and resume functionality.\n    \"\"\"\n    vm = test.vm\n    if not vm:\n        raise exceptions.TestError(\"No VM to test\")\n    if not vm.is_active:", "answers": ["        s, o = self._session_cmd_close(session, suspend_log_chk_cmd)"], "all_classes": null, "length": 1232}
{"pred": "       service.submit(pub);\n        service.awaitTermination(30, TimeUnit.SECONDS);\n        int received = rc.get();\n        System.out.printf(\"Received %d messages%n\", received);\n        service.shutdown();\n    }\n}\n", "answers": ["        final Future<Boolean> pubf = service.submit(pub);"], "all_classes": null, "length": 471}
{"pred": "           if (this.owner.getDecorator() instanceof FTDecorator) {\n            \t((FTDecorator) this.owner.getDecorator()).setOnSendRequestAfterParameters(res, destination);\n            }\n            this.owner.getDecorator().onSend", "answers": ["            if (this.owner.getDecorator() instanceof FTDecorator) {"], "all_classes": null, "length": 1423}
{"pred": "\t\t\tuint compressedSize = 0;\n\t\t\tif (value <= 0x7F)\n\t\t\t\tcompressedSize = 1;\n\t\t\telse if (value <= 0x3FFF)\n\t\t\t\tcompressedSize = 2", "answers": ["\t\t\tif (value <= 0x7F)"], "all_classes": null, "length": 701}
{"pred": "       self.fm.run(['ar', 'x', '.', '*'], cwd=cwd, description=descr,\n                   on_exit=refresh)\n        # or\n        self.fm.run(['tar', '-x', 'f', '-', '--directory=' +", "answers": ["        obj = CommandLoader(args=['aunpack'] + au_flags \\"], "all_classes": null, "length": 3874}
{"pred": "\t\t[Test]\n\t\tpublic void CreateInstance_StringString_ConstructorFlag ()\n\t\t{\n\t\t\tType type = typeof (COMTest);\n\t\t\tConstructorInfo constructor = type.GetConstructor (new Type[] { typeof (int) });\n\t\t\tobject[] args", "answers": ["\t\t[ExpectedException (typeof (ArgumentNullException))]"], "all_classes": null, "length": 740}
{"pred": "   def testOneOldAndOtherNew(self):\n        da = Locale.objects.get(code='da')\n        de = Locale.objects.get(code='de')\n        repo = self._setup(da, Action.ACCEPTED, Action.ACCEPTED)\n", "answers": ["        de = Locale.objects.get(code='de')"], "all_classes": null, "length": 668}
{"pred": "           self.Log.debug(\"Modifying user state\")\n            self.send_message(PY_MUMBLE_MSG_TYPE_USERSTATE, userstate)\n            cmd.response = True\n            self.commands.answer(cmd)\n        elif cmd.cmd == PY_", "answers": ["                userstate.texture = cmd.parameters[\"texture\"]"], "all_classes": null, "length": 1807}
{"pred": "       PlayerGroup group = player.getPlayerGroup2();\n        if (group != null) {\n            group.setLeader(player);\n        }\n    }\n    public static PlayerGroup getGroup(int teamId) {\n        return groups.get(teamId);\n    }", "answers": ["        PlayerGroup group = player.getPlayerGroup2();"], "all_classes": null, "length": 799}
{"pred": "\n# Define a regular expression to extract the name of the function from the\n# function signature.\nfunc_regex = re.compile(r\"(?P<name>[a-zA-Z][a-zA-Z0-9_]*)\\s*\\((?P<", "answers": ["        r = [head]"], "all_classes": null, "length": 734}
{"pred": "   def test_update_cell_based_on_data_does_not_clear_cell_when_row_has_no_children(self):\n        column, tree_model, tree_iter = self._setup_column(1, False)\n        tree_model.add_", "answers": ["        column, tree_model, tree_iter = self._setup_column(1, False)"], "all_classes": null, "length": 630}
{"pred": "\t}\n\twhile (parent instanceof Grid);\n\t((Grid) parent).addColumn(column);\n\treturn EVAL_BODY_INCLUDE;\n    }\n}", "answers": ["\t    if (parent instanceof Grid) {"], "all_classes": null, "length": 1452}
{"pred": "               ImageIndex = Convert.ToInt32(ReadElement(element, \"ImageIndex\"));\n                GrayImageIndex = Convert.ToInt32(ReadElement(element, \"GrayImageIndex\"));\n                Respawn = Flags.Contains(CreatureFlags.esRespawn", "answers": ["                XmlNodeList dnl = element.SelectNodes(\"Dialog\");"], "all_classes": null, "length": 667}
{"pred": "\t\t\t\t\telse if ( m_Peerless == PeerlessList.MelisandeTrammel || m_Peerless == PeerlessList.MelisandeFelucca )\n\t\t\t\t\t\tm_key[i] = new MelisandeActiv", "answers": ["                        m_key[i] = new ExodusTomeAltar();"], "all_classes": null, "length": 1143}
{"pred": "\t\tif(beans == null)\n\t\t\treturn coll;\n\t\tfor(int i = 0; i < beans.length; i++)\n\t\t{\n\t\t\tcoll.add(beans[i].buildVo());\n\t\t}\n\t\treturn coll;\n", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 755}
{"pred": "Version(1, new int[]{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ", "answers": ["                new Version(1, new int[]{},"], "all_classes": null, "length": 994}
{"pred": "\t\t\tbyte[] pb = kdf.DeriveBytes(pbMsg, p);\n\t\t\tif(!MemUtil.ArraysEqual(pb, pbExpc))\n\t\t\t\tthrow new Exception(\"Argon2d-1: \" +\n\t\t\t\t\tEncoding.UTF", "answers": ["\t\t\tbyte[] pb = kdf.Transform(pbMsg, p);"], "all_classes": null, "length": 2072}
{"pred": "\t\treturn requestManaExact(stack, player, cost, remove);\n\t}\n\t/**\n\t * Dispatches mana to items in a given player's inventory. This version also\n\t * checks for IManaDiscountArmor items equipped to lower the cost.\n\t", "answers": ["\t\treturn requestManaExact(stack, player, cost, remove);"], "all_classes": null, "length": 1100}
{"pred": "# Add 'your_project.your_app.views' to INSTALLED_APPS\n# and 'your_project.your_app.urls' to the BASE_DIRS in the urls.py file\n# to include your app's URLs in the project's", "answers": ["if DEBUG and len(sys.argv) > 1:"], "all_classes": null, "length": 684}
{"pred": "\t\t\t\t\t\t\" but expected {1})\",\n\t\t\t\t\t\tNextFrame.PixelCount, LightCount));\n\t\t\tlock (OutputQueue) {\n\t\t\t\tOutputQueue.Enqueue (NextFrame);\n\t\t\t}\n\t\t}\n\t", "answers": ["\t\t\t\t\t\t\" expected {1})\", NextFrame.PixelCount, LightCount"], "all_classes": null, "length": 821}
{"pred": "       if ((this.userErrorMessage == null)) {\n            if ((other.userErrorMessage != null))\n                return false;\n        } else if ((!this.userErrorMessage.equals(other.userErrorMessage)))\n            return false;\n        if (!this.actionTrace", "answers": ["        if ((this.userErrorMessage == null)) {"], "all_classes": null, "length": 813}
{"pred": "           dc.number = PhoneNumberUtils.parse(p.readString(), null);\n            voiceSettings = p.readInt();\n            dc.callType = voiceSettings & RIL_CALL_TYPE_MASK;\n            dc.dataCallId = voiceSettings >> RIL_CALL_TYPE", "answers": ["            dc.index = p.readInt();"], "all_classes": null, "length": 1196}
{"pred": "\t\t\t\t\t\tif (licence.isSoftware()) {\n\t\t\t\t\t\t\trelevantLicences.add(licence);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (odrMetadata.getType", "answers": ["\t\t\t\t\t\tif (licence.isDomainSoftware()) {"], "all_classes": null, "length": 679}
{"pred": "           for (int x = 0; x < xSizeP; x++)\n            {\n                int index = y * xSizeP + x;\n                newVertices[index] = new Vector3(x + leftBottomCorner.x, y + leftBottomCorner.", "answers": ["            for (int x = 0; x < xSizeP; x++)"], "all_classes": null, "length": 1083}
{"pred": "\t\t\trawResult = client.call(API_METHOD_ADD, testInt1);\n\t\t\t\n\t\t\tif (rawResult != null)\n\t\t\t{\n\t\t\t\tresult = ((Number) rawResult).intValue();\n\t\t\t\t\n\t\t", "answers": ["\t\t\tint testInt2 = rand.nextInt(5000);"], "all_classes": null, "length": 845}
{"pred": "\t\t\t\treturn new int[0];\n\t\t\t}\n\t\t\t@Nonnull\n\t\t\tpublic int[] getBlockSelectionEnds()\n\t\t\t{\n\t\t\t\treturn new int[0];\n\t\t\t}\n\t\t\tpublic void addC", "answers": ["\t\t\t\treturn new int[0];"], "all_classes": null, "length": 431}
{"pred": "           out.writeBoolean(false);\n            out.writeUTF(\"not found\");\n        }\n        else {\n            out.writeBoolean(true);\n            out.writeInt(found.identifier);\n        }\n        out.flush();\n        out.close();\n        in.", "answers": ["            logging2(name + \"not found.\");"], "all_classes": null, "length": 745}
{"pred": "                       16 + (~stactics_display_buffer.read(i) & 0x0f),\n                        16,\n                        pixel_x, pixel_y,\n                        Machine.visible_area, TRANSPARENCY_PEN, 0", "answers": ["                        16 + (~stactics_display_buffer.read(i) & 0x0f),"], "all_classes": null, "length": 2896}
{"pred": "                                   .Distance(position) <= spell.Width &&\n                                    minionPrediction.CastPosition.To2D()\n                                        .Distance(position) <= spell.Width)\n                                {\n                                    result.Add(target);\n                                }\n", "answers": ["                                        .Distance(spell.From.To2D(), position.To2D(), true, true) <="], "all_classes": null, "length": 1895}
{"pred": "       return existsInducingPathInto(x, y, graph, new HashSet<>());\n    }\n    public static boolean existsInducingPathInto(Node x, Node y, Graph graph, Set<Node> visited) {\n        if (x.getNodeType() != NodeType.", "answers": ["        final LinkedList<Node> path = new LinkedList<>();"], "all_classes": null, "length": 1093}
{"pred": "                   if (pop[i] is Drawable)\n                        plcs.Push(pop[i] as Drawable);\n                }\n            }\n            return null;\n        }\n        /// <summary>\n        /// Initialize the element.\n        /// </summary>\n       ", "answers": ["                    if (pop[i] is PlaceBase)"], "all_classes": null, "length": 756}
{"pred": "       if (this.attachmentFile == null && other.attachmentFile != null) {\n            return false;\n        }\n        if (this.attachmentFile != null && other.attachmentFile == null) {\n            return false;\n        }\n        if (!StringUtils.equals(this.", "answers": ["        else if (!this.getFileId().equals(other.getFileId())) {"], "all_classes": null, "length": 677}
{"pred": "                       if (mobiles[i] != m_Item.From && mobiles[i].CanBeDamaged && SpellHelper.ValidIndirectTarget(from, mobiles[i]))\n                            from.DoHarmful(mobiles[i]);\n                    }\n               ", "answers": ["                        Mobile m = mobiles[i];"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tHistory.Add(user, msg);\n\t\t\t\tif (History.Count > WorldChat.CMOptions.HistoryBuffer)\n\t\t\t\t{\n\t\t\t\t\tHistory.OrderByDescending(x => x.Value.Time).First().Value.Dis", "answers": ["\t\t\t\twhile (HistoryCount >= WorldChat.CMOptions.HistoryBuffer)"], "all_classes": null, "length": 964}
{"pred": "   return mock.getAvailCompoIds(sClientSpaceId, sUserId);\n  }\n  @Override\n  public List<ComponentInstLight> getAvailComponentInstLights(String userId, String componentName,\n          String spaceId) {\n    return mock.getAv", "answers": ["    return mock.getAvailCompoIds(sClientSpaceId, sUserId);"], "all_classes": null, "length": 882}
{"pred": "                           files[++index] = (String) mListView.getItemAtPosition(key);\n                        }\n                    }\n                    final DialogFragment dialog2 = ZipFilesDialog.instantiate(files);\n                    mode.finish();\n                    dialog2.show(", "answers": ["                            files[++index] = (String) mListView.getItemAtPosition(key);"], "all_classes": null, "length": 526}
{"pred": "       if (this.channel != null && this.channel.isOpen()) {\n            this.channel.close();\n        }\n    }\n    public void close(ChatMessage chatmessage) {\n        if (this.channel != null && this.channel.isOpen()) {\n            this", "answers": ["        if (this.m instanceof IUpdatePlayerListBox) {"], "all_classes": null, "length": 598}
{"pred": "               z_arr[p_index, kk, :] = z_dict[z_key][per][:]\n                z_err_arr[p_index, kk, :] = z_dict[z_key][per][3:]\n            for t", "answers": ["                ll = z_index_dict[z_key][1]"], "all_classes": null, "length": 3693}
{"pred": "     return context.getString(resourceOne, name);\n    }\n    String names = \"\";\n    for (Recipient recipient : recipients) {\n      names += recipient.toShortString() + \", \";\n    }\n    names = names.substring(0, names.length() -", "answers": ["      return context.getString(resourceOne, name);"], "all_classes": null, "length": 625}
{"pred": "       env[\"PATH\"] += os.pathsep.join(extra_path)\n        if extra_lib:\n            env[\"LD_LIBRARY_PATH\"] += os.pathsep.join(extra_lib)\n        if gonk:\n            if not self.config[\"gon", "answers": ["            env[\"PATH\"] = \"%s%s%s\" % ("], "all_classes": null, "length": 635}
{"pred": "def load_manifest(manifest_file, tests_root, url_base=None):\n    \"\"\"Loads a manifest file and returns a Manifest object.\"\"\"\n    if url_base is None:\n        url_base = to_os_path(manifest_file).rsplit", "answers": ["            for path, manifest_tests in iteritems(type_paths):"], "all_classes": null, "length": 530}
{"pred": "       compiledScript = null;\n    }\n    private Binding createBindingForCompilation() {\n        final Map<String, Object> variables = new HashMap<>();\n        variables.put(\"node\", ScriptUtils.getScriptNodeModel());\n        variables.put(\"out\", new PrintStream(new", "answers": ["        if (compiledScript != null) {"], "all_classes": null, "length": 651}
{"pred": "           throw new NotSupportedException();\n        }\n        /// <summary>\n        /// Method to override indicating whether we can timeout or not\n        /// </summary>\n        /// <returns>True indicates a timeout can be set</returns>\n        protected virtual bool ServerCanTimeout()\n        {\n", "answers": ["            throw new NotSupportedException();"], "all_classes": null, "length": 659}
{"pred": "\nclass TransformDataset(object):\n  \"\"\"\n  Applies a Transformer to a dataset.\n  \"\"\"\n  def __init__(self, transformer, dataset):\n    \"\"\"Initializes a TransformDataset.\"\"\"\n    self.transformer = transformer\n    self.dataset = dataset", "answers": ["      for i in range(energy.size):"], "all_classes": null, "length": 874}
{"pred": "\t\tOrderInvestigationForStatusChangeVo other = (OrderInvestigationForStatusChangeVo)obj;\n\t\tif (this.id == null && other.id != null)\n\t\t{\n\t\t\treturn 1;\n\t\t}\n\t\tif (this.", "answers": ["\t\tif(caseInsensitive); // this is to avoid eclipse warning only."], "all_classes": null, "length": 664}
{"pred": "       assertEquals(found, asList(stacks[0], stacks[3]));\n    }\n    @Test(dependsOnMethods = \"shouldFindStacksWithSpecifiedTags\")\n    public void shouldFindStacksWithNoTags() throws Exception {\n        stacks[0].get", "answers": ["        for (StackImpl stack : stacks) {"], "all_classes": null, "length": 498}
{"pred": "       Parameter depthParameter = new ParameterImpl();\n        depthParameter.setParameterCode(\"DEPTH\");\n        depthParameter.setParameterFamily(pf);\n        depthParameter.setValue(depth);\n        crawlParameters.add(depthParameter);\n        //EXCLUSION_REGEXP\n", "answers": ["        ParameterElement ped = new ParameterElementImpl();"], "all_classes": null, "length": 593}
{"pred": "\t\t\t// [$identifier]\n\t\t\tif (pattern.Calls(S.Identifier))\n\t\t\t{\n\t\t\t\tif (candidate.Name != pattern.Name)\n\t\t\t\t\treturn false;\n\t\t\t\tunmatchedAttrs = V", "answers": ["\t\t\tif (kind == LNodeKind.Id && candidate.Name != pattern.Name)"], "all_classes": null, "length": 1713}
{"pred": "               if (colisionList.Any())\n                {\n                    extendedWillHit++;\n                    extendedFarmLocation = colisionList.First().Position;\n                }\n                }\n                int shortenWillHit = MinionManager.GetMinions(q.", "answers": ["                    if (colisionList.Count > extendedWillHit)"], "all_classes": null, "length": 603}
{"pred": "\t\tsuper.setContextMenus(contextMenus);\n\t\t// Controls\n\t\tsuper.addControl(factory.getControl(Label.class, new Object[] { this, new Integer(1000), new Integer(16), new Integer(16), ControlState", "answers": ["\t\tcontextMenus = new ContextMenus();"], "all_classes": null, "length": 1735}
{"pred": "@task\n@timed\ndef install_python_prereqs():\n    \"\"\"\n    Installs Python prerequisites.\n    \"\"\"\n    if no_prereqs_install():\n        print(NO_PREREQ_MESSAGE)\n        return\n    prereq_", "answers": ["    return bool(re.search(pattern, frozen_output))"], "all_classes": null, "length": 1046}
{"pred": "           'subs': [(6, 0, self.env['test_testing_utilities.sub3'].ids)]\n        })\n        f = Form(r, view='test_testing_utilities.o2m_parent')\n        with self.assertRaises(Assert", "answers": ["            'subs': [(0, 0, {})]"], "all_classes": null, "length": 1031}
{"pred": "   assert simplify(Sum(Sum(d * t, (x, a, b - 1)) + \\\n                        Sum(d * t, (x, b, c)), (t, a, b))) == \\\n                    d * Sum(1, (x, a,", "answers": ["    b, v = symbols('b, v', integer = True)"], "all_classes": null, "length": 4519}
{"pred": "\t\t\tint argc = LuaDLL.lua_gettop(l);\n\t\t\tif(argc==1){\n\t\t\t\tSystem.String a1;\n\t\t\t\tcheckType(l,1,out a1);\n\t\t\t\tvar ret=UnityEngine", "answers": ["\t\t\tint argc = LuaDLL.lua_gettop(l);"], "all_classes": null, "length": 427}
{"pred": "               this.InitializeAdd(action, changedItems, startingIndex);\n            }\n            else\n            {\n                this.InitializeRemove(action, changedItems, startingIndex);\n            }\n        }\n        private void InitializeRemove(NotifyCollectionChangedAction action, IList oldItems,", "answers": ["                this.InitializeAdd(action, changedItems, startingIndex);"], "all_classes": null, "length": 756}
{"pred": "           String xml = writer.toString();\n            InputStream is = new ByteArrayInputStream(xml.getBytes());\n            Document testDocument = parser.parse(is);\n            writer.close();\n            is.close();\n            objectToXMLDocumentTest(testDocument);\n        }\n   ", "answers": ["            int sizeAfter = getNamespaceResolverSize(desc);"], "all_classes": null, "length": 1329}
{"pred": "                   c.Campus = Token2Csv();\n                    break;\n                case Param.CampusType:\n                    c.CampusType = Token2Csv();\n                    break;\n                case Param.CampusName:\n                    c.CampusName", "answers": ["                    c.Campus = Token2Csv();"], "all_classes": null, "length": 714}
{"pred": "Console.WriteLine (\"  Width: {0}\", ide.width);\nConsole.WriteLine (\"  Height: {0}\", ide.height);\nConsole.WriteLine (\"  ColorCount: {0}\", ide.colorCount);\nConsole.WriteLine (\"  Planes: {0}\", ide.planes", "answers": ["Console.WriteLine (\"\\tide.width: {0}\", ide.width);"], "all_classes": null, "length": 2756}
{"pred": "               // adds the RET blocks to the successor of the JSR block\n                if (l.successor != null) {\n                    l.successor.successors = new Edge[l.successor.successors.length + 1];\n                    System.arraycopy(", "answers": ["                if ((l.status & VISITED2) != 0) {"], "all_classes": null, "length": 3107}
{"pred": "           ptr_of_this_method = ILIntepreter.Minus(__esp, 1);\n            ptr_of_this_method = ILIntepreter.GetObjectAndResolveReference(ptr_of_this_method);\n            UnityEngine.Ray instance_of_this_method =", "answers": ["            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);"], "all_classes": null, "length": 599}
{"pred": "\t\t\tcomboLabelPosition.select(position.equals(Position.INSIDE) ? 0 : 1);\n\t\t\tlblLabelPosition.setText(\"Label Position: \" + position.name());\n\t\t}\n\t\t\n\t\tprivate Position getPosition() {\n\t\t", "answers": ["\t\t\tif(position == Position.INSIDE_LITERAL) {"], "all_classes": null, "length": 620}
{"pred": "       currImageValue = self._getCurrentValue( self.driver, \"Image\" )\n        print \"Check decrease image...\"\n        print \"oldImageValue=\", lastImageValue, \"newImageValue=\", currImageValue\n        self.assertEqual( int(currImageValue), int(lastImage", "answers": ["        currImageValue = self._getCurrentValue( driver, \"Image\")"], "all_classes": null, "length": 3277}
{"pred": "=====================\n\nclass NullHostKey(object):\n    \"\"\"\n    A dummy host key for use when no host key has been provided.\n    \"\"\"\n    def __str__(self):\n        return ''\n# End of code\n\nThis code defines two classes, `KexGex", "answers": ["        if (self.f < 1) or (self.f > self.p - 1):"], "all_classes": null, "length": 1912}
{"pred": "           FileSystemNodeManager nodeManager = handler.getFileSystemNodeManager();\n            FSTree tree = nodeManager.getTree();\n            DefaultMutableTreeNode parentNode = null;\n            for (int index = 0; index < tree.getModel().getChildCount(tree.", "answers": ["            if (disableTreeSelection) {"], "all_classes": null, "length": 908}
{"pred": "               self.cr.execute(\"SELECT sum(number_of_days) as number_of_days, sum(number_of_hours) as number_of_hours\\\n                            FROM smart_salary_simulator_payslip as hp, hr_p", "answers": ["                           (self.employee_id, from_date, to_date, code))"], "all_classes": null, "length": 836}
{"pred": "   mf, dlnmdlnm = halo_function(lnMassSigmaSpl, chiarr, hzarr, BDarr, rhobarr, dlnk, dlnm, dlnz, mmin, mmax, mspace, kmin, kmax, k", "answers": ["        if config.MF =='Tinker':"], "all_classes": null, "length": 1377}
{"pred": "       d.height = font.getSize() + getSettings().getLineHeight();\n        return d;\n    }\n    \n    @Override\n    public void setText(String text) {\n        super.setText(text);\n        setTextWidth();\n    }\n    \n   ", "answers": ["        if (font == null) {"], "all_classes": null, "length": 924}
{"pred": "#self.all_in_all(phi=phi,ref_p=None,flag=flag)\n#self.cal_xyz()\n#self.print_xyz()\n#print \"theta angle: \",theta_res\n#print \"phi angle: \",phi\n#print", "answers": ["        for theta in np.arange(0,np.pi,theta_res):"], "all_classes": null, "length": 800}
{"pred": "\t\t\tif (window.IsVisible)\n\t\t\t\twindow.Hide();\n\t\t\telse\n\t\t\t\twindow.Show();\n\t\t}\n\t\tprivate void SecuritiesButton_Click(object sender, RoutedEventArgs e)\n\t\t{\n\t", "answers": ["\t\t\tif (window.Visibility == Visibility.Visible)"], "all_classes": null, "length": 471}
{"pred": "=====================\n\nclass _Hist3D(_HistBase):\n    DIM = 3\n\n    def __init__(self, *args, **kwargs):\n        name = kwargs.get('name', '')\n        title = kwargs.get('title', '')\n        params = self._", "answers": ["                        for n in xrange(params[0]['nbins'] + 1)]"], "all_classes": null, "length": 2054}
{"pred": "           RosterStorage rosterStorage = protocol.getStorage().getRosterStorage();\n            RosterHelper rosterHelper = new RosterHelper(rosterStorage);\n            rosterHelper.updateLastMessage(contact, query.getLastMessage());\n        }\n    }\n}\n\n", "answers": ["            if (contact.setLastMessageTransmitted(query.getEnd())) {"], "all_classes": null, "length": 630}
{"pred": "       im1L = im1.convert(\"L\", rgb2I)\n        h1 = im1L.histogram()\n    else: \n        h1 = im1.histogram()\n\n        #compute transform\n        t = self.computeTransform(h0, h", "answers": ["                im1L = im1.convert(\"L\", rgb2I)"], "all_classes": null, "length": 756}
{"pred": "\t\t\tif (tag.canDoIt()) {\n\t\t\t\tfinal Iso7816.Response rsp2 = tag.readRecord(sfi + 1);\n\t\t\t\tif (rsp2.isOkey()) {\n\t\t\t\t\taddLog", "answers": ["\t\t\tfor (int i = 1; i <= MAX_LOG; ++i) {"], "all_classes": null, "length": 702}
{"pred": "=====================\n\nclass ACEParser(Parser):\n    def __init__(self):\n        Parser.__init__(self)\n        self.current_size = 0\n        self.blocks = []\n        self.block = Block(self, \"ACE\")\n        self.block", "answers": ["            return \"Block: %s\" % self[\"type\"].display"], "all_classes": null, "length": 952}
{"pred": "\t\t// socketAdapter.removeCommAdapterByteListener(this);\n\t}\n}", "answers": ["\t\tif (socketAdapter != null) {"], "all_classes": null, "length": 1211}
{"pred": "\n        path_info = environ['PATH_INFO']\n        for prefix, app in self.apps:\n            if path_info.startswith(prefix):\n                return app(environ, start_response)\n        raise NotFoundError(path_info)\n# vim:", "answers": ["        path = environ['PATH_INFO'] or '/'"], "all_classes": null, "length": 1313}
{"pred": "\t\tdata = Data( sys.argv[ 1 ] )\n\t\tmodel = Model( data )\n\t\tmodel.reduce_bic_scores()\n\t\tmodel.trainmodel()\n\t\tmodel.score()\n\t\tprint \"Model Score = %s\" % model", "answers": ["\t\tdatasetfile , field , parents = sys.argv[ 1: ]"], "all_classes": null, "length": 1784}
{"pred": "           if (Utility.Random(100) < chance)\n                return; // success!\n            res = EnhanceResult.Failure;\n        }\n    }\n}\n\nI'm trying to add a new enhancement for a custom item, but I'm not sure how", "answers": ["            int random = Utility.Random(100);"], "all_classes": null, "length": 976}
{"pred": "\n        entries[entry_name] = rdltypes.UserEnum(\n            name=type_name,\n            values=[rdltypes.UserEnumValue(name=entry_name, value=entry_value)]\n        )\n        if displayname:\n            entries[entry_name", "answers": ["            entries[entry_name] = (entry_value, displayname, desc)"], "all_classes": null, "length": 2406}
{"pred": "                   MessageBox.Show(\"Unable to find any modules to configure.\");\n                    this.Close();\n                }\n            }\n        }\n        private void btnSave_Click(object sender, EventArgs e)\n        {\n            if (isQuiet())\n            {\n              ", "answers": ["                    Label noneFound = new Label();"], "all_classes": null, "length": 451}
{"pred": "               object obj = this.ViewState[\"SubmitText\"];\n                return (obj == null) ? true : (bool)obj;\n            }\n            set\n            {\n                this.ViewState[\"SubmitText\"] = value;\n            }\n        }\n        /// <summary", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "               if(this.trianglesUsed[textureHash] <= 0)\n                    continue;\n                if(this.textureArray[textureHash] != null)\n                {\n                    if(this.textureArray[textureHash].getImage().isSelected())\n                   ", "answers": ["                int ti = 0, ci = 0, vi = 0;"], "all_classes": null, "length": 1502}
{"pred": "@login_required\n@handle_500(template_path='certificates/500.html')\ndef certificate_view(request):\n    \"\"\"\n    View for displaying certificates.\n    \"\"\"\n    # ...\n```\nThis code is a part of a D", "answers": ["    exposedHeaders += f', {header}' if exposedHeaders else header"], "all_classes": null, "length": 796}
{"pred": "                   Driver driver = idlePool.Dequeue();\n                    if (now.Subtract(driver.IdleSince).TotalMinutes > Settings.IdleConnectionTimeout)\n                    {\n                        oldDrivers.Add(driver);\n                    }\n                    else", "answers": ["                    Driver d = idlePool.Peek();"], "all_classes": null, "length": 1070}
{"pred": "   return [var] if name in ('resolution', 'radius') else var\n\ndef _verify_list(var, name):\n    \"\"\"Ensure that parameter is list-like of numbers.\n    Used to ensure that resolution and radius are list-like of numbers.\n    \"\"\"\n   ", "answers": ["        var = (float(var), float(var))"], "all_classes": null, "length": 3675}
{"pred": "# Register the Quest\n# This line is needed to register the quest in the game.\n# It will be read by the game server at startup and will register this class as a quest handler for the specified quest id.\n# Do not change this code under any circumstances except if you know what you are doing.", "answers": ["CREATED     = State('Start',     QUEST)"], "all_classes": null, "length": 755}
{"pred": "\t\t\t\t\tint num2 = (int)Math.Floor(((double)nullable.Value - (double)num * 60 * 60 - (double)num1 * 60) % 60);\n\t\t\t\t\tempty = string.Format(\"[{", "answers": ["\t\t\t\t\tdouble? seconds1 = this.Seconds;"], "all_classes": null, "length": 1143}
{"pred": "           // Initialize the shader program\n            Program = GL.CreateProgram();\n            GL.DetachShader(Program, GL.CreateShader(ShaderType.VertexShader,\n                System.IO.File.ReadAllText(\"VertexShader.glsl\")));\n            GL.DetachShader(", "answers": ["            _attributes = new List<AttributeInfo>();"], "all_classes": null, "length": 661}
{"pred": "\n    def trim(self, reactions=None, genes=None, metabolites=None,\n             remove_orphans=True, **kwargs):\n        \"\"\"Trim the model by removing reactions, genes, and metabolites\n        reactions: [str] or [:class:`cob", "answers": ["        for l in (self.reactions, self.genes, self.metabolites):"], "all_classes": null, "length": 1227}
{"pred": "\t\tfor(Object bean : beans)\n\t\t{\n\t\t\tims.clinicaladmin.vo.beans.TumourGroupListVoBean voBean = (ims.clinicaladmin.vo.beans.TumourGroupListVoBean)bean;\n\t\t\t", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 778}
{"pred": "\t\t\t\tcurrent.x = lines[selectedLine].x;\n\t\t\t\tcurrent.y = lines[selectedLine].y;\n\t\t\t\tcurrent.width = lines[selectedLine].width;\n\t\t\t\tcurrent.height = lines[selectedLine].height;\n", "answers": ["\t\t\t\tcx = lines[selectedLine].getCenterX();"], "all_classes": null, "length": 1861}
{"pred": "       new LayoutAnimationController(set, 0.2f);\n        mListView.setLayoutAnimation(controller);\n    }\n\t\n\t/**\n\t * Fill the list with data.\n\t */\n    private void fillData() {\n    \tmListView.setEmptyView", "answers": ["                new LayoutAnimationController(set, 0.5f);"], "all_classes": null, "length": 730}
{"pred": "               if (PartnerInterestRow.FieldKey > HighestNumber)\n                {\n                    HighestNumber = PartnerInterestRow.FieldKey;\n                }\n            }\n            ARow.SetFieldKey(HighestNumber + 1);\n        }\n", "answers": ["                if (PartnerInterestRow.RowState != DataRowState.Deleted)"], "all_classes": null, "length": 803}
{"pred": "\t\tfor (int i = 0; i < length; ++i)\n\t\t{\n\t\t\tif (Mappings.ssToInt(protein.getStructure()[i]) != Mappings.indexUnknown)\n\t\t\t{\n\t\t\t\tInstance instance = this.", "answers": ["\t\tint[] \t\tscoresTmh \t= new int[length];"], "all_classes": null, "length": 569}
