{"pred": "\t\t\tprimerak.setInventarnaKnjiga(invKnjPanel.getCode());\n\t\t\tprimerak.setPodlokacija(podlokacijaPanel.getCode());\n\t\t\tprimerak.setBrojPrimeraka((Integer)raspodelaSpinner.getValue());\n\t\t\tprimerak.setPreostalo(Integer.parseInt(preost", "answers": ["\t\t\tString invKnj = invKnjPanel.getCode();"], "all_classes": null, "length": 451}
{"pred": "              SubCriteria[\"GroupID\"] = new SearchCondition<String>(\"GroupID\");\n              }\n              return (ISearchCondition<String>)SubCriteria[\"GroupID\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"GroupID\")]\n        public String GroupIDValue\n       ", "answers": ["                 SubCriteria[\"GroupID\"] = new SearchCondition<String>(\"GroupID\");"], "all_classes": null, "length": 475}
{"pred": "\t\taliases.Add (\"GB2312\", \"gb2312\");\n\t\taliases.Add (\"gb2312\", \"gb2312\");\n\t\taliases.Add (\"gb2312-80\", \"gb2312\");\n\t\taliases.Add (\"gb2312-80\", \"gb2312\");\n\t\taliases.Add", "answers": ["\t\taliases.Add (\"GBK\", \"gb2312\");"], "all_classes": null, "length": 545}
{"pred": "        if source.get() == '[' + class_name:\n            return class_contents\n    return None\n```\nThe final answer is: \n```\ndef _parse_char_class(source):\n    for class_name, class_contents in _BRACKET_CHARACTER_CLASSES.iteritems():\n        if source.get() == '[' + class_name:\n           ", "answers": ["        if _parse_verbatim(source, '[:%s:]' % class_name):"], "all_classes": null, "length": 850}
{"pred": "#izracunavanje mera poklapanja izmedju slike i predstavnikovanih brojeva\n#izracunavanje mera poklapanja izmedju slike i predstavnikovanih brojeva\n#izracunavanje mera", "answers": ["check = numbers[5][123]"], "all_classes": null, "length": 502}
{"pred": "        assertEquals(1L, listener.assertOneGetNewAndReset().get(\"longBoxed\"));\n        sendBean(\"B\", 99, null);\n        sendBean(\"A\", 1, 99L);\n        assertEquals(99L, listener.assertOneGetNewAndReset().get(\"longBoxed\"));\n", "answers": ["        sendBean(\"A\", null, null);"], "all_classes": null, "length": 756}
{"pred": "                item.setExpanded(true);\n                item.setSelection(true);\n                break;\n            }\n            if (item.getItemCount() > 0) {\n                restoreSelection(selectionText, item.getItems());\n            }\n        }\n    }\n    private void saveSettings() {\n        if (activePropertyPage!= null) {\n            activePropertyPage", "answers": ["                tree.setSelection(new TreeItem[] { item });"], "all_classes": null, "length": 1800}
{"pred": "        nilCard.setText(Language.INSTANCE.localizeWithReplace(\"instance.nodisplay\", \"\\n\\n\"));\n    }\n} \nPlease complete the code given above. \nThe code is written in Java and it seems to be a part of a larger application. The code is for a tab in a GUI application that displays a list", "answers": ["        if (nilCard != null) {"], "all_classes": null, "length": 511}
{"pred": "\t\t\tsqrtAspect = FloatMath.sqrt(w / h);\n\t\t}\n\t}\n\tprivate void loadBitmap() throws IOException {\n\t\tInputStream is = new FileInputStream(file);\n\t\tbitmap = BitmapFactory.decodeStream(is);\n\t\tis.close();\n\t}\n\tprivate void loadBitmapFromStream(InputStream is) throws IOException {\n\t\tbitmap =", "answers": ["\t\t\tfloat r = (w+h)/2f;"], "all_classes": null, "length": 1042}
{"pred": "            self.__repeat = (delay, interval)\n            self.__tick_id = gobject.timeout_add(10, self._tick_cb)\n        elif delay is None and self.__repeat[0] is not None:\n            self.__repeat = (None, None)\n            if self.__tick_id is not None:\n", "answers": ["            self.__tick_id = gobject.timeout_add(10, self._tick_cb)"], "all_classes": null, "length": 703}
{"pred": "    logger.addHandler(logged_critical)\n    return logged_critical\ndef get_test_paths(**kwargs):\n    test_paths = {}\n    test_paths[\"/\"] = kwargs[\"test_paths\"]\n    return test_paths\ndef get_test_paths_from_config(config, **kwargs):\n    test_paths = {}\n    test_paths[\"/\"] =", "answers": ["    handler = handlers.LogLevelFilter(logged_critical, \"CRITICAL\")"], "all_classes": null, "length": 1196}
{"pred": "        if self.getState()!= 'idle' and self.getState()!= 'deactivated':\n            self.log.error('Wavemeter is not in idle state')\n            return -1\n        # stop the measuring thread\n        self.sig_handle_timer.emit(False)\n        # stop the wavemeter\n        self._", "answers": ["        if self.getState() == 'idle':"], "all_classes": null, "length": 885}
{"pred": "        List<String> mustStatusNames = new LinkedList<String>();\n        mustStatusNames.add(\"available\");\n        mustStatusNames.add(\"dnd\");\n        mustStatusNames.add(\"xa\");\n        mustStatusNames.add(\"offline\");\n        mustStatusNames.add(\"unknown\");\n        mustStatusNames.add(\"subscribe\");\n        mustStatus", "answers": ["        List<String> requiredStatusNames ="], "all_classes": null, "length": 678}
{"pred": "```csharp\nawait cmd.Execute();\n```\nThis line of code is missing. It should be added to complete the code snippet. \n\nHere is the complete code snippet:\n\n```csharp\nawait cmd.Execute();\n```csharp\n```csharp\n            }\n            await poll.Send();\n            ActivePoll = poll;\n", "answers": ["                            await cmd.ExecuteArmed(this, null);"], "all_classes": null, "length": 3344}
{"pred": "\t\t\tthis.label1.Location = new System.Drawing.Point(6, 53);\n\t\t\tthis.label1.Name = \"label1\";\n\t\t\tthis.label1.Size = new System.Drawing.Size(148, 18);\n\t\t\tthis.label1.TabIndex = 0;\n\t\t\tthis.label1.Text = \"Description\";\n\t\t\tthis.label1", "answers": ["\t\t\tthis.label1.Location = new System.Drawing.Point(6, 51);"], "all_classes": null, "length": 1316}
{"pred": "\t\t\t\tif (throwOnMissing && error!= null)\n\t\t\t\t\tthrow error;\n\t\t\t\tif (assembly == null) {\n\t\t\t\t\tassembly = BuildManager.GetAssembly (name);\n\t\t\t\t\tif (assembly!= null)\n\t\t\t\t\t\tassemblyCache.Add (name, assembly);\n\t\t\t\t}\n\t\t\t\treturn assembly;\n\t\t\t}\n\t\t}\n", "answers": ["\t\t\t\tif (assembly == null) {"], "all_classes": null, "length": 1336}
{"pred": "        if self.interface == 'all':\n            self.param_type = INTERFACE_ALL\n        elif self.interface.isdigit():\n            self.param_type = INTERFACE_TYPE\n        else:\n            self.param_type = INTERFACE_FULL_NAME\n        return self.param_type\n    def main(self):\n        \"\"\"Main function\"\"\"\n        self.check_params()\n       ", "answers": ["        if self.interface == 'all':"], "all_classes": null, "length": 1718}
{"pred": "    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      if (!Character.isDigit(c) && c!= ',') return false;\n    }\n    return true;\n  }\n  // Helper method to test for a valid URL.\n  private boolean isValid", "answers": ["    for (int i = 0; i < s.length(); i++)"], "all_classes": null, "length": 939}
{"pred": "\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t}\n} \n#endregion AuthorHeader\n#endregion AuthorHeader\n#endregion AuthorHeader\n#endregion AuthorHeader\n#endregion AuthorHeader\n#endregion AuthorHeader\n#endregion AuthorHeader\n#endregion AuthorHeader\n#endregion AuthorHeader\n#endregion Author", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "                            sead_partnn_l = getNeighbours(c_sead, nodemap, true);\n                        } else {\n                            sead_partnn_l = new ArrayList<Integer>();\n                        }\n                        if (sead_partnn_l!= null) {\n                            for (int k = 0; (k < sead_partnn", "answers": ["                            if (c_sead == start || c_sead == stop) {"], "all_classes": null, "length": 1426}
{"pred": "\t\t\tthis.ResumeLayout(false);\n\t\t\tthis.PerformLayout();\n\t\t\tthis.PerformLayout();\n\t\t\tthis.ResumeLayout(false);\n\t\t\tthis.PerformLayout();\n\t\t\tthis.ResumeLayout(false);\n\t\t\tthis.PerformLayout();\n\t\t\tthis.ResumeLayout(false);\n\t\t\tthis.PerformLayout();\n\t\t\tthis.ResumeLayout(false);\n\t\t\tthis.PerformLayout();\n\t\t\tthis.ResumeLayout(false);\n\t\t\tthis.PerformLayout();\n\t\t\tthis.ResumeLayout(false);\n\t\t", "answers": ["\t\t\tthis.Size = new System.Drawing.Size(371, 300);"], "all_classes": null, "length": 825}
{"pred": "    behavior = {\n        'observations': observations,\n        'translations': translations_dict,\n        'tour': tourlist,\n        }\n    with open(OutFileNames.behavior, 'w') as f:\n        json.dump(behavior, f, indent=4)\n        \n    return behavior\ndef writeBehaviorCSV(", "answers": ["    behavior_list = [ checkOnTour(tourlist, o,"], "all_classes": null, "length": 609}
{"pred": "```python\nwith Html(\"div\", class_=\"content\", id='footer') as footer:\n```\nThis line of code is used to create a new HTML element with the class \"content\" and the id \"footer\". The \"with\" statement is used to create a new scope for the HTML element, which", "answers": ["        footer = self.write_footer(None)"], "all_classes": null, "length": 960}
{"pred": "            self.progress(\"Checking we are still on the ground\")\n            if abs(m.relative_alt) > max_relalt_mm:\n                self.progress(\"Relative Altitude %u mm\" % m.relative_alt)\n                self.progress(\"Expected to be on the ground\")\n                self.progress(\"Disarming\")\n                self.disarm_vehicle", "answers": ["            if abs(m.relative_alt) > max_relalt_mm:"], "all_classes": null, "length": 577}
{"pred": "\t\t\t\t\t\t\tif (strings[0] == \"GlobalSettings\")\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar globalSettings = Session.GlobalSettings.Deserialize(node.Value);\n\t\t\t\t\t\t\t\torderManager.LobbyInfo.GlobalSettings = globalSettings;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tGame.SyncLobbyInfo();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\tcase \"SyncLobby", "answers": ["\t\t\t\t\t\t\tif (strings[0] == \"GlobalSettings\")"], "all_classes": null, "length": 591}
{"pred": "\t\t\t\tSystem.arraycopy(src, srcOffset, buf, 0, byteCount);\n\t\t\t\tbufferedPacket.setPayload(buf);\n\t\t\t\tstate = SocketReadState.READ_NOTHING;\n\t\t\t\treturn bufferedPacket;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\treturn null;\n\t}\n\t/**\n\t * This function will return the current", "answers": ["\t\t\t\tfor (int i = 0; i < byteCount; i++) {"], "all_classes": null, "length": 783}
{"pred": "        opiRuntimeToolBarDelegate = new OPIRuntimeToolBarDelegate(this);\n        opiRuntimeToolBarDelegate.init(site, input);\n        if (persist)\n        {\n            final IMemento memento = createMemento();\n            saveMemento(memento);\n        }\n    }\n    /** @return Memento for this view */\n   ", "answers": ["        if (opiRuntimeToolBarDelegate != null)"], "all_classes": null, "length": 813}
{"pred": "            if (launcher!= null && launcher.isMenuVisible()) {\n                launcher.showMenu(e);\n            }\n        }\n    }\n}\nThis is a custom JComboBox class that overrides the default behavior of JComboBox to control the number of displayed items at once. It also handles text contextual menus for editable JComboBoxes. The class has several", "answers": ["            if (launcher != null && !e.isPopupTrigger()) {"], "all_classes": null, "length": 933}
{"pred": "def test_clean_last_names(self):\n    names = [\n        (\"MACDONALD\", \"MacDonald\"),\n        (\"MACDONALD\\nJohn\", \"MacDonald\"),\n        (\"MACDONALD\\nJohn\\n\", \"MacDonald\"),\n        (\"MACDONALD\\nJohn\\n\\n\", \"MacDonald\"),\n", "answers": ["            (\"O`NEAL \\nCarol Joy\", \"Carol Joy O'Neal\"),"], "all_classes": null, "length": 919}
{"pred": "            sort_by, sort_order = sort\n            if sort_by == 'uploadDate':\n                key_func = itemgetter('upload_date')\n            elif sort_by == 'displayname':\n                key_func = itemgetter('display_name')\n            else:\n                raise ValueError(\"Invalid sort_by value: %s\" % sort", "answers": ["            if sort[0] == 'uploadDate':"], "all_classes": null, "length": 1853}
{"pred": "            }\n        }\n    }\n}\n```\nThe final answer is: \n```\n            {\n                index = -1;\n                Current = default;\n            }\n            public bool MoveNext()\n            {\n                if (index < list.Count)\n                {\n                    Current = list[index];\n                    index++;\n                    return true;\n               ", "answers": ["                index = -1;"], "all_classes": null, "length": 1053}
{"pred": "                parentpath = parentpath[len(cwd):]\n                if parentpath.endswith(os.sep):\n                    parentpath = parentpath[:-1]\n    return unionrepository(ui, path, parentpath)\ndef unionrepo(ui, path, path2, create=False):\n    \"\"\"create a union repository from two repositories\"\"\"\n    if", "answers": ["                parentpath = parentpath[len(cwd):]"], "all_classes": null, "length": 795}
{"pred": "        if sys.version_info[0] == 2:\n            kwargs.pop('sinfo', None)\n        record = logging.LogRecord(name, level, fn, lno, msg, args, exc_info,\n                                   **kwargs)\n        record.__dict__.update(structured)\n        return record\nclass StructuredFormatter", "answers": ["        if sys.version_info[0] == 2:"], "all_classes": null, "length": 897}
{"pred": "                                m.Skills.Spellweaving.BaseFixedPoint += 1;\n                                m.Mana -= 20;\n                            }\n                            else\n                            {\n                                m.SendMessage(\"You have reached the skill cap for that skill.\");\n                            }\n                        }\n                        else\n                        {\n                            m.SendMessage(\"You need 100 gold pieces in", "answers": ["                                m.Mana -= 20;"], "all_classes": null, "length": 569}
{"pred": "            for key, value in hash_.items():\n                if key in model._meta.fields:\n                    fields[key] = value\n                else:\n                    extra_attrs[key] = value\n            model_obj = queryset.get(**fields)\n            for key, value in extra_attrs.items():\n                setattr(model_obj, key, value", "answers": ["            for k, v in hash_.iteritems():"], "all_classes": null, "length": 546}
{"pred": "            return page_not_authorized(req=req, referer=\"/edit\",\n                                       text=auth_message, navtrail=navtrail)\n        recid = argd['recid']\n        body, errors, warnings = perform_request_newticket(ln, recid)\n        return page(title = _(\"New Ticket\"),\n                    body =", "answers": ["            return page_not_authorized(req=req, referer=\"/edit\","], "all_classes": null, "length": 756}
{"pred": "```\n      use_tty:\n        version_added: '2.5'\n        default: 'yes'\n        description: add -tt to ssh commands to force tty allocation\n        env: [{name: ANSIBLE_SSH_USETTY}]\n        ini:\n          - key: use_tty\n            section", "answers": ["        - {key: usetty, section: ssh_connection}"], "all_classes": null, "length": 968}
{"pred": "\t\tfor(int x = 0; x < DataCollection.count(); x++)\n\t\t{\n\t\t\t// encode the data\n\t\t\t//... (rest of the code)\n\t\t}\n\t\treturn dataString;\n\t}\n\tprivate String encodeNASMessage(WardlistData data)\n\t{\n\t\tString dataString =", "answers": ["\t\tWardlistRecord data = (WardlistRecord)DataCollection.get(0);"], "all_classes": null, "length": 1476}
{"pred": "            record_add_field(rec, '300', subfields=[('a', page_count)])\n        abstract = self.get_abstract(xml)\n        if abstract:\n            record_add_field(rec, '520', subfields=[('a', abstract)])\n        keywords = self.get_keywords(xml)\n        if keywords:\n            for k in keywords", "answers": ["            record_add_field(rec, '300', subfields=[('a', page_count)])"], "all_classes": null, "length": 1283}
{"pred": "                assertEquals(A.getQuick(r, c), B.getQuick(c, r));\n            }\n        }\n    }\n    public void testViewRow() {\n        IntMatrix1D row = A.viewRow(NROWS / 2);\n        assertEquals(NCOLUMNS, row.size());\n        for (int c = 0;", "answers": ["                assertEquals(A.getQuick(r, NCOLUMNS - 1 - c), B.getQuick(r, c));"], "all_classes": null, "length": 1319}
{"pred": "# Send Unit Data\n                 (PacketField(\"commandSpecificData\", ENIPSendUnitData,\n                             ENIPSendUnitData),\n                  lambda pkt: pkt.commandId == 0x70),\n                # Indicate Status\n                (PacketField(\"commandSpecificData\", None, CommandSpecificData),\n                 lambda pkt", "answers": ["                 lambda pkt: pkt.commandId == 0x6f),"], "all_classes": null, "length": 625}
{"pred": "\t\t//... BUSINESS LOGGIC... //\n\t\t//... BUSINESS LOGGIC... //\n\t\t//... BUSINESS LOGGIC... //\n\t\t//... BUSINESS LOGGIC... //\n\t\t//... BUSINESS LOGGIC... //\n\t\t//... BUSINESS LOGGIC... //\n\t\t//...", "answers": ["\t\tfinal CoordinateReferenceSystem crs = reader.getCrs();"], "all_classes": null, "length": 805}
{"pred": "            ((Creature) e).setTamed(false);\n        }\n        \n        return e;\n    }\n}\n```\nThe code is almost complete, but there are a few issues that need to be addressed. The code is an enum for MobArena, a Minecraft plugin, and it's used to spawn creatures in the game", "answers": ["            Creature c = (Creature) e;"], "all_classes": null, "length": 386}
{"pred": "\t\t\tMemoryStream ms = new MemoryStream();\n\t\t\tbin.Write(lookups, 0, lookups.Length);\n\t\t\tbin.Write(new byte[4], 0, 4);\n\t\t\tbin.Write(new byte[4], 0, 4);\n\t\t\tbin.Write(new byte[4], ", "answers": ["\t\t\tushort* line = (ushort*)bd.Scan0;"], "all_classes": null, "length": 1243}
{"pred": "                    if (house == null)\n                        house = BaseHouse.FindHouseAt(new Point3D(m.X, m.Y + 1, 127), m.Map, 16);\n                    if (house!= null)\n                        bonus = 50.0;\n                }\n                int range = Math.Min((int)((100", "answers": ["                    if (house == null)"], "all_classes": null, "length": 585}
{"pred": "\t\t\t\t\t{\n\t\t\t\t\t\tConsole.WriteLine(displaySet.Name);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthrow;\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tDispose(displaySets);\n\t\t\t\tDispose(seriesCT, seriesPET, seriesPETCor);\n\t\t\t}\n\t\t}\n\t\t[Test]\n\t\tpublic void TestPETFusion", "answers": ["\t\t\t\t\t\tConsole.WriteLine(\" > {0}\", displaySet.Descriptor.Description);"], "all_classes": null, "length": 803}
{"pred": "    \"\"\" Find the appropriate reader for a file \"\"\"\n    ext = os.path.splitext(fname)[1][1:]\n    if ext in supported_extensions():\n        return supported_extensions()[ext]\n    else:\n        raise ValueError(\"File %s has unknown extension %s\" % (fname, ext))\ndef read_timestamps(fname):\n", "answers": ["    exts = supported_extensions()"], "all_classes": null, "length": 653}
{"pred": "\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\t\tif (cgn.depth == -1) continue;\n\t\t\t\t\t\tif (cgn.depth > 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tGraphNode parent = graphNodes.get(cell.getParent());\n\t\t\t\t\t\t\tif (parent == null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tSystem.out.println(\"", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "\t\t\t    case 189: // -/_ key\n                    if (CAPS)\n                    {\n                        Program.keyH_ENT = (Program.keyH_ENT & (~4));\n                    }\n                    else\n                    {\n                        Program.keyH_ENT = (Program.keyH_ENT & (~2));\n                        Program.keyB_SPC = (Program", "answers": ["\t\t\t    case 189: // -/_ key"], "all_classes": null, "length": 1748}
{"pred": "out_list += [weights_dmat_all[index]]\nout_comment += ['Weights of distortion matrix']\nout_units += ['']\nresults.write(out_list, names=out_names, header=header, comment=out_comment,\n              units=out_units, extname='DATA')\nresults.close()\n```\nThe code is a part of a larger", "answers": ["        out_list += [weights_dmat_all[index]]"], "all_classes": null, "length": 1374}
{"pred": "    obj = obj.lstrip(\"\\ufeff\") if obj.startswith(\"\\ufeff\") else obj\n    lines = obj.splitlines()\n    if not lines:\n        return []\n    if implementation == RisImplementation.BASE:\n        parser = Ris(lines, mapping, strict)\n    elif implementation == RisImplementation.WOK:\n        parser", "answers": ["    obj = obj.lstrip(\"\\ufeff\")"], "all_classes": null, "length": 676}
{"pred": "\t\tif (orig == null ||!orig.exists() || orig.length() == 0)\n\t\t\treturn;\n\t\tString newUuid = mDbHelper.getBookUuid(newId);\n\t\tcopyFileToCoverImageIfMissing(orig, newUuid);\n\t}\n\t/**\n\t * Copy the UUID-based cover from its current location", "answers": ["\t\tif (orig == null || !orig.exists() || orig.length() == 0)"], "all_classes": null, "length": 866}
{"pred": "            strength += this.calculateBestTableStrength(opponent.getValue());\n        }\n        tableStrengthScore.setScore(strength);\n        tableStrengthScore.setPlayer(player);\n        this.addAScore(tableStrengthScore);\n    }\n    private int calculateBestTableStrength(Player player) {\n        ArrayList<PlayerScore> clonePlayerScore = new ArrayList", "answers": ["            for (PlayerScore scoreTable : this.scoreTable) {"], "all_classes": null, "length": 1212}
{"pred": "            res = c.get(\"/\")\n            res.get_data()\n            assert res.status_code == 401\n    def _make_auth_headers(self, password):\n        return Headers({\"Authorization\": f\"Basic {base64.b64encode(password.encode()).decode()}\"})\n    def _make_auth_headers(self, password):\n        return", "answers": ["            res = c.get(\"/\")"], "all_classes": null, "length": 919}
{"pred": "```java\nnsClientService = mLocalBinder.getService();\n```\nThis line of code is used to get the NSClientService instance from the LocalBinder. The LocalBinder is a binder that is used to communicate with the NSClientService. The getService() method of the LocalBinder returns the NSClientService instance.", "answers": ["                nsClientService = mLocalBinder.getServiceInstance();"], "all_classes": null, "length": 516}
{"pred": "```python\n            # Now we have the makefiles, we can build the OpenSSL library\n            # and the Python extensions.\n            if arch == \"x86\":\n                # 32 bit build\n                os.system(\"nmake -f \"+makefile+\" \"+make_flags)\n            else:\n                # 64", "answers": ["            if arch == \"amd64\":"], "all_classes": null, "length": 982}
{"pred": "\t\tfor(int i=0; i<length; i++){\n\t\t\tif(i>=tempCostList.Length){\n\t\t\t\ttowerList[index].baseStat.costs[i]=0;\n\t\t\t}\n\t\t\telse{\n\t\t\t\ttowerList[index].baseStat.costs[i]=tempCostList[i];\n\t\t\t}\n\t\t", "answers": ["\t\tfor(int i=0; i<length; i++){"], "all_classes": null, "length": 3890}
{"pred": "\t\t\t\tAddRes( index, typeof( Scimitar ), 1, 1044037 );\n\t\t\t\tAddRes( index, typeof( Scimitar ), 1, 1044037 );\n\t\t\t\tAddRes( index, typeof( Scimitar ), 1, 1044037 );\n\t\t\t\tAddRes(", "answers": ["\t\t\t\tAddRes( index, typeof( BrilliantAmber ), 1032697, 1, 1044240 );"], "all_classes": null, "length": 3677}
{"pred": "def test_gwt_plurals(self):\n    \"\"\"Test conversion of gwt plurals.\"\"\"\n    propsource = \"\"\"# Translators: Number of items\nprefetchCount=1\nprefetchCount=2\nprefetchCount=3\nprefetchCount=4\nprefetchCount=5\npref", "answers": ["        options = self.help_check(options, \"-P, --pot\")"], "all_classes": null, "length": 1336}
{"pred": "\t\t\tforeach (object obj in members) {\n\t\t\t\t// What should be done here?\n\t\t\t}\n\t\t}\n\t}\n} \nPlease complete the code given above. \n\n```csharp\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Reflection;\nusing System.Text;\n\n", "answers": ["\t\t\tforeach (Signal sig in sigs.Values) {"], "all_classes": null, "length": 1298}
{"pred": "    module = AnsibleModule(argument_spec=fields)\n    connection = Connection(module._socket_path)\n    if not connection:\n        module.fail_json(msg=FAIL_SOCKET_MSG)\n    fos = FortiOSHandler(connection)\n    is_error, has_changed, msg = fortios_wireless_controller(data=module.params, fos=f", "answers": ["    module = AnsibleModule(argument_spec=fields,"], "all_classes": null, "length": 1009}
{"pred": "    node.setLeaf(leaf);\n  }\n  public void setLoaded(boolean loaded) {\n    this.loaded = loaded;\n  }\n  public void setLoading(boolean loading) {\n    this.loading = loading;\n  }\n  public void setPresentableTextContainer(Element presentableTextContainer) {\n    this.presentableTextContainer =", "answers": ["    if (node instanceof MutableNode) {"], "all_classes": null, "length": 568}
{"pred": "            return GroupByWithMinSize(prevChildren, c => c.Published, c => c.Published.Year.ToString());\n        }\n        private IEnumerable<ContentItem> ChildrenWithArchive(IEnumerable<ContentItem> previousChildren, Query query, GroupFactory factory)\n        {\n            if (AllowDirectQuery)\n            {\n                var", "answers": ["            var page = prevChildren.Take(StartPagingTreshold).ToList();"], "all_classes": null, "length": 781}
{"pred": "        soaResponse = dns.message.make_response(query)\n        soaResponse.use_edns(edns=False)\n        soaResponse.answer.append(soa)\n        responses.append(soaResponse)\n        response = dns.message.make_response(query)\n        response.use_edns(edns=False)\n        content = \"\"\n        for i in", "answers": ["        soaResponse = dns.message.make_response(query)"], "all_classes": null, "length": 648}
{"pred": "        if (kind == null) {\n            throw new IllegalArgumentException(\"Unknown javaccKind: \" + javaccKind);\n        }\n        return kind;\n    }\n    public int javaccKind() {\n        return javaccKind;\n    }\n    public TokenCategory category() {\n        return category;\n    }\n    public String", "answers": ["        if (kind == null) {"], "all_classes": null, "length": 524}
{"pred": "        }\n        public Control GetLabelForPercentageControl()\n        {\n            return this.FindControlRecursive(PercentageControlID) as Label;\n        }\n        public Control GetLabelForTitleControl()\n        {\n            return this.FindControlRecursive(\"LabelForTitle\") as Label;\n        }\n        #endregion\n    }\n}\n```\nThe", "answers": ["            return this.FindControlRecursive(DescriptionControlID) as Label;"], "all_classes": null, "length": 450}
{"pred": "```python\n            query_string = urllib.urlencode(query_args)\n            path = path + '?' + query_string\n```\n```python\n        if headers is None:\n            headers = {}\n        if self.is_secure():\n            headers['Host'] = host\n        else:\n            headers['Host'] = self.server_name", "answers": ["            path += '?' + query_args"], "all_classes": null, "length": 1198}
{"pred": "\t\t\t\tcanvas.drawBitmap(tiles[i].getBitmap(), left, top, null);\n\t\t\t}\n\t\t}\n\t}\n\tprivate void drawPath(Canvas canvas, double localScale){\n\t\tfor(int i = 0; i < edges.size(); i++){\n\t\t\tLatLonPos pos = edges.get(i).getPos", "answers": ["\t\t\t\tRectF destRect = new RectF(left, top, right, bottom);"], "all_classes": null, "length": 1184}
{"pred": "            HueInfo = new Dictionary<DyeType, Tuple<int, int>>();\n            HueInfo.Add(DyeType.None, new Tuple<int, int>(0, 0));\n            HueInfo.Add(DyeType.WindAzul, new Tuple<int, int>(0x1A, 0x1A));\n", "answers": ["            HueInfo = new Dictionary<DyeType, Tuple<int, int>>();"], "all_classes": null, "length": 535}
{"pred": "                this.alertDialog.show(MSGS.deleteCertificate(), MSGS.deleteCertificateConfirm(), new ConfirmListener() {\n                    @Override\n                    public void onConfirm() {\n                        CertificateListTabUi.this.gwtCertificatesService.uninstallCertificate(selected.getAlias(), c -> {\n                            CertificateListTabUi.this.refresh();\n                        });\n                    }\n               ", "answers": ["                final Modal modal = new Modal();"], "all_classes": null, "length": 698}
{"pred": "\t\t\t\t\"    {0}\" +\n\t\t\t\t\"    Public Class SomeClass{0}\" +\n\t\t\t\t\"        {0}\" +\n\t\t\t\t\"        Private _someField As SomeType{0}\" +\n\t\t\t\t\"        {0}\" +\n\t\t\t\t\"        Public Sub New(){0}\" +\n\t\t\t", "answers": ["\t\t\t\t\"    {0}\" +"], "all_classes": null, "length": 1270}
{"pred": "            list.append(self.file + os.extsep + ext)\n        return list\n    def do_close(self):\n        if self.dbm:\n            self.dbm.close()\n            self.dbm = None\n    def do_open(self, flags):\n        self.dbm = self.dbmmodule.open(self.file, flags)\n", "answers": ["            if os.access(self.file + os.extsep + ext, os.F_OK):"], "all_classes": null, "length": 1142}
{"pred": "        return \"ImageIcon: \" + description;\n    }\n    /**\n     * Returns the accessible description of the icon.\n     *\n     * @return the accessible description of the icon\n     */\n    public String getAccessibleDescription() {\n        return description;\n    }\n    /**\n     * Returns the accessible role of the icon", "answers": ["        if (description != null) {"], "all_classes": null, "length": 1934}
{"pred": "            all_plugins = self._bot.plugin_manager.getAllPlugins()\n        return '\\n'.join(['%s (%s)' % (plugin.name, plugin.documentation) for plugin in all_plugins])\n    @botcmd(admin_only=True)\n    def plugin_list(self, _, args):\n        \"\"\" list all the plugins loaded in the", "answers": ["            all_plugins = self._bot.plugin_manager.get_all_plugin_names()"], "all_classes": null, "length": 833}
{"pred": "                \"vdom\": {\"required\": False, \"type\": \"str\"}\n            }\n        }\n    }\n    module = AnsibleModule(argument_spec=fields)\n    connection = Connection(module._socket_path)\n    if not connection:\n        module.fail_json(msg=FAIL_SOCKET_MSG)\n    fos = FortiOSHandler(connection", "answers": ["                \"vdom\": {\"required\": False, \"type\": \"str\"}"], "all_classes": null, "length": 1164}
{"pred": "            throw new IOException();\n        }\n        fileDecoder = savedDecoder;\n    }\n    private native int readByte(Object fileDecoder);\n    private native int bytesRemain(Object fileDecoder);\n    private native int readBytes(Object fileDecoder, byte b[], int off, int len);\n    private native Object clone(Object fileDecoder", "answers": ["            throw new IOException();"], "all_classes": null, "length": 880}
{"pred": "\t\t\t\treturn originalObject!= null;\n\t\t\tcase ActivitydiagramPackage.TRACED_ACTIVITY__TRACE_SEQUENCE:\n\t\t\t\treturn traceSequence!= null &&!traceSequence.isEmpty();\n\t\t}\n\t\treturn super.eIsSet(featureID);\n\t}\n} \nPlease complete the code. \n\nNote: The code is generated by the EM", "answers": ["\t\t\t\treturn originalObject != null;"], "all_classes": null, "length": 533}
{"pred": "\t\t// TODO: implement this method\n\t\treturn null;\n\t}\n} \npackage org.opennms.netmgt.importer.operations;\n\nimport java.util.List;\n\nimport org.opennms.netmgt.model.OnmsNode;\nimport org.opennms.netmgt.dao.api.OnmsNodeDao;\n\npublic class", "answers": ["\t\tList<Event> events = new LinkedList<Event>();"], "all_classes": null, "length": 888}
{"pred": "    if module.check_mode:\n        module.exit_json(changed=changed, queries=publication.executed_queries, **publication.get_info())\n    else:\n        if state == 'present':\n            if publication.exists:\n                changed = publication.update(tables, params, owner)\n            else:\n                changed = publication.create(tables", "answers": ["    if state == 'present':"], "all_classes": null, "length": 2176}
{"pred": "\t\t\tint version = reader.ReadInt();\n\t\t\tif ( version == 0 )\n\t\t\t{\n\t\t\t\t// Add code here to handle version 0\n\t\t\t}\n\t\t}\n\t}\n}\n} \n/////////////////////////////////////////////////////\n//\n//Created by:  Morrigan and Ashlar, together forever.\n//\n/////////////////////////////////////////////////////\n```\nThe", "answers": ["\t\t\tint version = reader.ReadInt();"], "all_classes": null, "length": 737}
{"pred": "        return T.mean(T.sum(pre_sigmoid_nv *\n                            T.log(pre_sigmoid_nv) +\n                            (1 - pre_sigmoid_nv) *\n                            T.log(1 - pre_sigmoid_nv),\n                            axis=1))\n        \"\"\"\n        # note : pre_sigmoid_nv is the value of the sigmoid function (", "answers": ["        of log(sigmoid(..)) and will not apply the wanted"], "all_classes": null, "length": 1545}
{"pred": "            return new TripChain(Person);\n        }\n        #endregion ITripChain Members\n    }\n}\n```\nThe final answer is: \n```csharp\npublic ITripChain Clone()\n{\n    return new TripChain(Person);\n}\n``` \nThis code is a method that creates a shallow clone of the current trip chain", "answers": ["            ITripChain chain = (ITripChain)MemberwiseClone();"], "all_classes": null, "length": 798}
{"pred": "        super(edge.getOwner(), new Rectangle(0, 0, 0, 0));\n        // TODO: this is a hack to get the correct bounds for the FigRole\n        // and FigOrdering.  It should be fixed in the FigTextGroup class.\n        // The problem is that the", "answers": ["        role = new FigRole();"], "all_classes": null, "length": 2539}
{"pred": "                    throw ex;\n                }\n            }\n        }\n    }\n}\n#endif\n```\nThe code is written in C# and is a part of the NLog logging framework. The PerfCounterTarget class is a target that increments a specified performance counter on each write. The code is mostly complete, but there are a few", "answers": ["                    if (LogManager.ThrowExceptions) throw ex;"], "all_classes": null, "length": 849}
{"pred": "            name,checksum = checksums.get(block=False)\n            assert os.path.isfile( pjoin( cfg.webdav_backend_directory, name ) )\n            with open(pjoin(cfg.webdav_backend_directory, name), \"rb\") as f:\n                m = hashlib.md5()\n                m.update( f.read()", "answers": ["            name, checksum = checksums.get(block=False)"], "all_classes": null, "length": 599}
{"pred": "        stac = self.labels.setdefault(args[0], stac)\n        self.stack_count = stac\n    @stacker(Pseudop.JUMP_IF_FALSE)\n    def stacker_jump_if_false(self, pseudop, args, push, pop):\n        stac = self.stack_count\n        stac =", "answers": ["        dest = args[0]"], "all_classes": null, "length": 655}
{"pred": "\t\t\t\tresult.append((ofs, \"\\x00\" * mem_len))\n\t\t\t\tlen -= mem_len\n\t\t\t\tofs += mem_len\n\t\t\t\tcontinue\n\t\t\tresult.append((ofs, self.data.read(cur.offset + prog_ofs, file_len)))\n\t\t\tlen -= file_len\n\t\t\tofs += file_len\n\t\treturn", "answers": ["\t\t\t\tresult += [DATA_ORIGINAL] * mem_len"], "all_classes": null, "length": 1032}
{"pred": "\t\t\twhile (startIndex!= -1) {\n\t\t\t\tint endIndex = value.indexOf(\"}\", startIndex);\n\t\t\t\tif (endIndex == -1) {\n\t\t\t\t\tthrow new IllegalArgumentException(\"Macro not closed!\");\n\t\t\t\t}\n\t\t\t\tString macroName = value.substring(startIndex + 2, endIndex);\n\t\t\t\tString macroValue = macroHandler.get", "answers": ["\t\t\tStringBuffer result = new StringBuffer();"], "all_classes": null, "length": 3860}
{"pred": "      elements.add(ASN1Boolean.encodeAsBoolean(false));\n    }\n    if (! includeAuthZEntry)\n    {\n      elements.add(ASN1Boolean.encodeAsBoolean(false));\n    }\n    if (attributes!= null)\n    {\n      final ArrayList<ASN1Element> attributeElements = new ArrayList<>(attributes.size());\n", "answers": ["      elements.add(new ASN1Boolean(TYPE_INCLUDE_AUTHN_ENTRY, false));"], "all_classes": null, "length": 1468}
{"pred": "\t\tfor(int i = 0; i < beans.length; i++)\n\t\t{\n\t\t\tcoll.add(beans[i].buildVo());\n\t\t}\n\t\treturn coll;\n\t}\n} \n//#############################################################################\n//#                                                                           #\n//#  This file is part of the IMS MAXIMS Clinical System.                     #\n//# ", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 773}
{"pred": "\t\t\treturn new EmptyIterator<String>();\n\t\t}\n\t}\n}\npackage com.idevicesinc.sweetblue;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.Map;\nimport android.content.Context;\nimport com.idevicesinc.sweetblue.utils.EmptyIterator;\nimport com.idevicesinc.sweet", "answers": ["\t\t\treturn new EmptyIterator<String>();"], "all_classes": null, "length": 526}
{"pred": "            var serializer = GetResponseSerializer(contentType);\n            if (serializer == null)\n                throw new NotSupportedException(\"ContentType not supported: \" + contentType);\n            var httpRes = new HttpResponseStreamWrapper(httpResponse);\n            serializer(requestContext, response, httpRes);\n        }\n        private ResponseSerializerDelegate GetResponseSerializer(string contentType", "answers": ["            var serializer = GetResponseSerializer(contentType);"], "all_classes": null, "length": 488}
{"pred": "        }\n    }\n    public void ShowPhoneCallRecord(string CallNumber)\n    {\n        if (serviceProxy == null)\n            throw new ApplicationException(LocalizedResourceManager.GetString(\"DotNetScript\", \"DynamicsSession.Error.NotLoggedIn\"));\n        Guid CallNumberGuid = Guid.Parse(CallNumber);\n        ShowPhoneCallRecord(CallNumber", "answers": ["            string CallNumberGuid = CallNumber.ToString();"], "all_classes": null, "length": 648}
{"pred": "        }\n        text = text.substring(nextToken + 7);\n        nextToken = text.indexOf(\" width=\");\n        if (nextToken < 0) {\n            throw (new IllegalArgumentException(\"Invalid EXPLAIN string: no \\\" width=\\\"\"));\n        }\n        try {\n            width = Long.parseLong(text.substring(0, next", "answers": ["        text = text.substring(nextToken + 7);"], "all_classes": null, "length": 772}
{"pred": "        n = m + i16 - 2;\n        i25 = 1;\n        if ((paramInt1!= 0? 1 : 0)!= 0)\n        {\n          Dlartg(localdoubleW1, localdoubleW2, localdoubleW3, localdoubleW4", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "                if (constraintEntry.startsWith(\"keySize\")) {\n                    Matcher matcher = keySizePattern.matcher(constraintEntry);\n                    if (matcher.matches()) {\n                        String op = matcher.group(1);\n                        String size = matcher.group(2);\n                        if (op.equals(\"<=\")) {\n                            constraintsMap.put(size, new", "answers": ["                if (debug != null) {"], "all_classes": null, "length": 983}
{"pred": "      DefaultPort proxy_port = proxyCell.getPort(0);\n      DefaultPort device_port = null;\n      ProxyInfo proxy_info = (ProxyInfo) proxyCell.getUserObject();\n      ConfigElement proxy_elt = proxy_info.getProxy();\n      int unit_number = proxy_elt.getPropertyValue(0);\n      // XXX: This is", "answers": ["      ProxyInfo proxy_info = (ProxyInfo) proxyCell.getUserObject();"], "all_classes": null, "length": 2936}
{"pred": "                object obj = this.ViewState[\"SubmitText\"];\n                return (obj == null)? true : (bool)obj;\n            }\n            set\n            {\n                this.ViewState[\"SubmitText\"] = value;\n            }\n        }\n        /// <summary>\n        /// \n        /// </summary>\n        [Meta]\n", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "```python\ndef create_new_filesystem(self, new_path):\n    \"\"\"Creates a collection starting from a root directory.\n    Args:\n        new_path: The path to recursively search for the collection within.\n    Returns:\n        None\n    \"\"\"\n    os.mkdir(new_path)\n    for artist in self.collection:\n        artist", "answers": ["                for song in self.collection[artist][album]:"], "all_classes": null, "length": 826}
{"pred": "        SecurityManager sm = System.getSecurityManager();\n        if (sm!= null)\n            sm.checkPermission(SecurityConstants.GET_CLASSLOADER_PERMISSION);\n    }\n    private static void checkForDuplicatePkgs(Configuration cf,\n                                              Function<String, ClassLoader> clf)\n    {\n        Map<String, ClassLoader> loaders =", "answers": ["        SecurityManager sm = System.getSecurityManager();"], "all_classes": null, "length": 3987}
{"pred": "            if (order.ShippingStatus == ShippingStatus.ShippingNotRequired)\n            {\n                order.ShippingStatusId = (int)ShippingStatus.Shipped;\n            }\n            else\n            {\n                order.ShippingStatusId = (int)ShippingStatus.Delivered;\n            }\n            _orderService.UpdateOrder(order", "answers": ["\t\t\t\torder.ShippingStatusId = (int)ShippingStatus.Delivered;"], "all_classes": null, "length": 5265}
{"pred": "        AutoNumberingScheme autoNumberingScheme = new AutoNumberingScheme();\n        autoNumberingScheme.setSchemeName(schemeName);\n        autoNumberingScheme.setSchemeClassName(schemeClassName);\n        autoNumberingScheme.setFormatName(formatName);\n        autoNumberingScheme.setIsNumericOnly(isNumericOnly);\n", "answers": ["        AutoNumberingScheme ans = new AutoNumberingScheme();"], "all_classes": null, "length": 5629}
{"pred": "\t\t\tAssert.That (source.SingleOrDefault (), Is.EqualTo (0));\n\t\t}\n\t\t[Test]\n\t\tpublic void SingleOrDefault_SourceWithOneElement_ReturnsThisElement ()\n\t\t{\n\t\t\tvar source = Read<int> (1);\n\t\t\tAssert.That (source.SingleOrDefault (), Is.EqualTo (1));\n\t\t}\n\t\t[Test", "answers": ["\t\t\tvar source = Read<int> ();"], "all_classes": null, "length": 5586}
{"pred": "\t\t\t\t\tArrayList<String> valuesList = new ArrayList<String>();\n\t\t\t\t\tArrayList<String> domainsList = new ArrayList<String>();\n\t\t\t\t\tArrayList<String> functionsList = new ArrayList<String>();\n\t\t\t\t\tfor (int i = 0; i < tempValues.length; i++) {\n\t\t\t\t\t\tString v = tempValues[i];\n\t\t\t\t\t\tString d = temp", "answers": ["\t\t\t\t\tArrayList<String> valuesList = new ArrayList<String>();"], "all_classes": null, "length": 4724}
{"pred": "        return self._conf_helper('sp', options)\n    def _create_devs(self):\n        self.enabled_list = MemoryDevice(['A', 'B', 'C', 'D'])\n        self.current_ch = MemoryDevice(['A', 'B', 'C', 'D'])\n        self.sp = ChoiceDevice('", "answers": ["        if dev_obj == self.fetch:"], "all_classes": null, "length": 4119}
{"pred": "    if (success) {\n      // upload was successful, so we can now delete the build folder\n      // (it's no longer needed)\n      Base.deleteFolder(tempBuildFolder);\n      // and we can also delete the temp folder\n      Base.deleteFolder(tempFolder);\n    }\n    return success? suggestedClassName", "answers": ["    return success ? suggestedClassName : null;"], "all_classes": null, "length": 6878}
{"pred": "            Workplane().box(1,1,1).faces(\">Z\").edges().fillet(0.1)\n        Fillets are one of the cases where you may need to use the add method to select\n        multiple edges. For example, this example creates a cube with the top and bottom edges\n", "answers": ["            s = Workplane().box(1,1,1).faces(\"+Z\").edges().fillet(0.1)"], "all_classes": null, "length": 4053}
{"pred": "            sleep(0.01)\n        # Reading FIFO count\n        fifoCount = self.getFIFOCount()\n        #print('Current FIFO count = %s' % fifoCount)\n        # Writing final memory update (function unknown)\n        j = 0\n        while (j < 4) or (", "answers": ["            fifoCount = self.getFIFOCount()"], "all_classes": null, "length": 6204}
{"pred": "```python\ndef bulk_print_memberships(names):\n    if names and 'names' in names:\n        for name in names['names']:\n            item = frappe.get_doc('Item', name)\n            if item:\n                item.print_item()\n                print(\"printed item: %s\" % name)\n            else:\n", "answers": ["\t\tnames = names['names']"], "all_classes": null, "length": 4346}
{"pred": "\t\t\t\twhile (itHistory.hasNext()) {\n\t\t\t\t\tFLRHistory history = (FLRHistory) itHistory.next();\n\t\t\t\t\tdata[i][ProjektReportHelper.FLRHISTORY_I_ID] = history\n\t\t\t\t\t\t\t.getI_id();\n\t\t\t\t\tdata[i][ProjektReportHelper.FLRHISTORY_I_ID_PROJE", "answers": ["\t\t\t\twhile (itHistory.hasNext()) {"], "all_classes": null, "length": 4200}
{"pred": "                list.Add(1070000); // missing set bonus\n            }\n            if (this.m_Resource!= null)\n                list.Add(1070001, this.m_Resource.Name); // resource\n            if (this.m_Resource!= null && this.m_Resource is Resource)\n                list.Add(1070002, this", "answers": ["                list.Add(1072378); // <br>Only when full set is present:\t\t\t\t"], "all_classes": null, "length": 6963}
{"pred": "         sb.append((char) ('a' + d - 10));\n      }\n      d = (c >> 6) & 0x3f;\n      if (d < 10) {\n         sb.append((char) ('0' + d));\n      } else {\n         sb.append((char)", "answers": ["         sb.append((char) ('a' + d - 10));"], "all_classes": null, "length": 4005}
{"pred": "\t\t\tswitch (type)\n\t\t\t{\n\t\t\t\tcase PacketTypes.PlayerInfo:\n\t\t\t\t\t// Handle player info packets\n\t\t\t\t\tbreak;\n\t\t\t\tcase PacketTypes.PlayerInfo2:\n\t\t\t\t\t// Handle player info 2 packets\n\t\t\t\t\tbreak;\n\t\t\t\tcase PacketTypes.PlayerInfo3:\n\t\t\t\t\t// Handle player info 3 packets", "answers": ["\t\t\tvar player = Players[e.Msg.whoAmI];"], "all_classes": null, "length": 4973}
{"pred": "    public List<Stop> listOrganizationPublicTransportStops(String organizationId) throws ApiException {\n        ApiResponse<List<Stop>> resp = listOrganizationPublicTransportStopsWithHttpInfo(organizationId);\n        return resp.getData();\n    }\n}\n```\nThe code is a Java class that provides methods for interacting with a public", "answers": ["        if (organizationId == null) {"], "all_classes": null, "length": 5074}
{"pred": "            X           -   array of nodes.\n            Y           -   array of weights.\n          -- ALGORITHM --\n            -- ALGORITHM --\n            -- ALGORITHM --\n            -- ALGORITHM --\n            -- ALGORITHM --\n            -- ALGORITHM --\n            -- ALGORITHM --\n            -- ALGORITHM --\n            -- ALGORITHM --\n           ", "answers": ["            X           -   array[0..N-1] - array of quadrature nodes,"], "all_classes": null, "length": 4527}
{"pred": "        # pylint: disable=protected-access\n        self.assertEqual(\n            modulestore().get_course_history(course_key).count(),\n            1,\n            \"Course history should be 1\"\n        )\n```\nThe code is a test case for a modulestore, which is a database that stores course data. The test", "answers": ["            'deleting_user', parent.version_agnostic(), category_queue[0]"], "all_classes": null, "length": 4289}
{"pred": "                                    + \"10^\" + i);\n                                }\n                                else {    //not \"log10\"-type label\n                                    if (this.expTickLabelsFlag) {\n                                        //create \"1e#\"-type label\n                                        tickLabel = (((i < 0)? \"-\" : \"\")\n                                            + \"e\" +", "answers": ["                                            + \"10^\" + Math.abs(i));"], "all_classes": null, "length": 4434}
{"pred": "              .map(pushedAsset -> pushedAsset.getAsset().getIdentifier())\n              .collect(Collectors.toList());\n        assertTrue(newBundlePushedAssets.contains(template.getIdentifier()));\n    }\n    /**\n     * Test that the bundler will include the asset's dependencies even if the asset is excluded by the filter.\n     */\n    @", "answers": ["                .map(pushedAsset -> pushedAsset.getEnvironmentId())"], "all_classes": null, "length": 6390}
{"pred": "        String fileName = \"quick\" + RUNID + \"_1.txt\";\n        File file = new File(getResourcePath() + fileName);\n        byte[] fileBytes = Files.readAllBytes(file.toPath());\n        String fileMimeType = MimetypeMap.MIMETYPE_TEXT_PLAIN;\n        String nodeId = getMyNodeId", "answers": ["        String fileName1 = \"fileOne_\" + RUNID + \".txt\";"], "all_classes": null, "length": 4714}
{"pred": "            if (obj instanceof Number) {\n                Number num = (Number) obj;\n                if (num instanceof Float || num instanceof Double) {\n                    return num.floatValue() == Float.valueOf(val).floatValue();\n                } else {\n                    return num.longValue() == Long.valueOf(val).longValue();\n                }\n           ", "answers": ["            if (obj == null) {"], "all_classes": null, "length": 4128}
{"pred": "                            }\n                            else\n                            {\n                                Syntax.Warning(part, \"Part not attached to parent node\");\n                            }\n                        }\n                    }\n                    else\n                    {\n                        Syntax.Warning(part, \"Part not attached to parent node\");\n                    }\n                }\n                else\n                {\n                    Syntax.Warning(part, \"Part not attached to parent", "answers": ["                                if (grapple.DockUid != part.Uid)"], "all_classes": null, "length": 4169}
{"pred": "            if not xml_id:\n                raise ValueError, _('No such external id: %s') % (key)\n            if not self._check_xml_id(cr, uid, key):\n                raise ValueError, _('Invalid external id: %s') % (key)\n            if not self._check_xml_id(cr, uid", "answers": ["            ir_values_obj = pooler.get_pool(cr.dbname).get('ir.values')"], "all_classes": null, "length": 4578}
{"pred": "            return actionTL.getVolatile() == SYNCHRONIZE_CODE;\n        }\n        @Uninterruptible(reason = \"Called from uninterruptible code.\", mayBeInlined = true)\n        public static void setActionPending() {\n            actionTL.setVolatile(SYNCHRONIZE_CODE);\n        }\n       ", "answers": ["            return actionTL.getVolatile() == SYNCHRONIZE_CODE;"], "all_classes": null, "length": 4390}
{"pred": "\t\t\tlong size = lgetxattr (path, name, value, 0);\n\t\t\tif (size <= 0)\n\t\t\t\treturn size;\n\t\t\tvalue = new byte [size];\n\t\t\treturn lgetxattr (path, name, value, (ulong) size);\n\t\t}\n\t\t// fget", "answers": ["\t\t\tlong size = lgetxattr (path, name, value, 0);"], "all_classes": null, "length": 6868}
{"pred": "\t\t\t\tsuper(id, path, width, height);\n\t\t\t}\n\t\t}\n\t\tprivate Images()\n\t\t{\n\t\t\tCore = new CoreImages();\n\t\t}\n\t\tpublic final class CoreImages implements java.io.Serializable\n\t\t{\n\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\tprivate CoreImages()\n", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "        return encodeBytesToBytes( source, off, len, options, false );\n    }   // end encodeBytesToBytes\n    \n    /**\n     * Similar to {@link #encodeBytes(byte[], int, int, int)} but returns\n     * a byte array instead of a String. This is more efficient if", "answers": ["        if( source == null ){"], "all_classes": null, "length": 5175}
{"pred": "\t\t\t\tnew ColumnInfo (\"IsCaseSensitive\", typeof(bool)),\n\t\t\t\tnew ColumnInfo (\"IsFixedLength\", typeof(bool)),\n\t\t\t\tnew ColumnInfo (\"IsFixedPrecisionScale\", typeof(bool)),\n\t\t\t\tnew ColumnInfo (\"IsLong\", typeof(bool)),\n\t\t\t\tnew ColumnInfo (\"IsNullable\", typeof(bool)),\n\t\t\t\tnew ColumnInfo (\"", "answers": ["\t\t\t\tnew ColumnInfo (\"IsCaseSensitive\", typeof(bool)),"], "all_classes": null, "length": 4122}
{"pred": "\t\t\t\tBigInteger u2 = u1.OuterProduct(v1);\n\t\t\t\tBigInteger v2 = u1.OuterProduct(v1);\n\t\t\t\tu1 = u2;\n\t\t\t\tv1 = v2;\n\t\t\t\tu3 = q[0];\n\t\t\t\tv3 = q[1];\n\t\t\t}\n\t\t\tif (", "answers": ["\t\t\t\tBigInteger tn = u1.Subtract(v1.Multiply(q[0]));"], "all_classes": null, "length": 5148}
{"pred": "\t\t\t\tif (_abi_info == null) {\n\t\t\t\t\t_abi_info = new GLib.AbiStruct (typeof (Message));\n\t\t\t\t}\n\t\t\t\treturn _abi_info;\n\t\t\t}\n\t\t}\n\t}\n#endregion\n}\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n", "answers": ["\t\t\t\tif (_abi_info == null)"], "all_classes": null, "length": 4205}
{"pred": "                if (name.endsWith(\".zargo\")) {\n                    Configuration.setString(\n                            PersistenceManager.KEY_PROJECT_NAME_PATH,\n                            PersistenceManager.getInstance().getBaseName(\n                                    theFile.getPath()));\n                    name = name.substring(0, name.length() - 6);\n                }\n                if (name.endsWith(\".zargo\")) {\n                   ", "answers": ["                if (!name.endsWith(\".\" + filter.getExtension())) {"], "all_classes": null, "length": 5940}
{"pred": "                5: SortableHeader('Outline', False, '', 'col-center'),\n                6: SortableHeader('Script', False, '', 'col-center'),\n                7: SortableHeader('Slide', False, '', 'col-center'),\n                8: SortableHeader('Video', False, '',", "answers": ["                5: SortableHeader('Outline', False, '', 'col-center'),"], "all_classes": null, "length": 4072}
{"pred": "            string[][] ss11 = new string[][] { s111, s112 };\n            string[] s121 = new string[] { \"hello\"};\n            string[][] ss12 = new string[][] { s121 };\n            string[][][] sssi1 = new string[][][] { ss11, ss12 };\n            string[]", "answers": ["            string[][] ss11 = new string[][] { s111, s112 };"], "all_classes": null, "length": 4165}
{"pred": "            field = opts.get_field(unique_check[0])\n            return ValidationError(\n                message=field.error_messages['unique'],\n                code='unique',\n                params=params\n            )\n        # A unique together field\n        else:\n            return ValidationError(\n                message=opts.error_messages['unique_together'],\n                code='unique", "answers": ["            field = opts.get_field(unique_check[0])"], "all_classes": null, "length": 4513}
{"pred": "            paramout.write(\"%-10s %-10s %-10s %-10s %-10s %-10s %-10s %-10s %-10s %-10s %-10s %-10s %-10s %-10s %-10s %-10s %-10s %-10s %-10s %-10", "answers": ["            for key, value in sorted(paramtestdic.iteritems()):"], "all_classes": null, "length": 4363}
{"pred": "    for i in range(0, len(h), 20):\n        heads.append(h[i:i+20])\n    return heads\n```python\ndef handlecheckheads(op, inpart):\n    \"\"\"check that head of the repo did not change\n    This is used to detect a push race when using unbundle", "answers": ["    while len(h) == 20:"], "all_classes": null, "length": 4561}
{"pred": "        if(contentPaneStyle.getBorder()!= null) {\n            prefWidth = Math.max(prefWidth, contentPaneStyle.getBorder().getMinimumWidth());\n            prefHeight = Math.max(prefHeight, contentPaneStyle.getBorder().getMinimumHeight());\n        }\n        return new Dimension(prefWidth, prefHeight);\n    }\n   ", "answers": ["        prefWidth = Math.min(prefWidth, width);"], "all_classes": null, "length": 6347}
{"pred": "        ca_repr = literal_eval(cas_data_str)\n        ca_repr = AttrDict(ca_repr)\n        ca_repr = AttrDict(ca_repr)\n        ca_repr = AttrDict(ca_repr)\n        ca_repr = AttrDict(ca_repr)\n        ca_repr = AttrDict(ca_repr)\n        ca_repr = AttrDict(ca_repr", "answers": ["        cas = literal_eval(cas_data_str)"], "all_classes": null, "length": 5088}
{"pred": "\t\t\t\t\tpixel = cursor_bitmap.GetPixel(x, y);\n\t\t\t\t\tif (pixel == cursor_pixel) {\n\t\t\t\t\t\tcursor_bits[(x / 8) + (y * (width / 8))] |= (Byte)(1 << (7 - (x % 8)));\n\t\t\t\t\t}\n\t\t\t\t\tpixel = cursor_mask", "answers": ["\t\t\t\t\tpixel = cursor_bitmap.GetPixel(x, y);"], "all_classes": null, "length": 6831}
{"pred": "\t\t\t//Find all available time slots for each day in the date range.\n\t\t\tforeach(DateTime date in dateRange) {\n\t\t\t\tList<TimeSlot> listTimeSlots=new List<TimeSlot>();\n\t\t\t\tList<Operatory> listOps=new List<Operatory>();\n\t\t\t\tList<Operatory> listOpsToCheck", "answers": ["\t\t\tList<DateTime> listUniqueDays=new List<DateTime>();"], "all_classes": null, "length": 4064}
{"pred": "        return sqlite3VdbeCompare( pMem1, pMem2, pColl );\n      }\n      /* If both values are blobs, compare them using memcmp(). */\n      Debug.Assert( ( combined_flags & MEM_Blob )!= 0 );\n      Debug.Assert( ( combined_flags & MEM_Str )== ", "answers": ["        pMem1.enc == SQLITE_UTF16LE || pMem1.enc == SQLITE_UTF16BE );"], "all_classes": null, "length": 5688}
{"pred": "                }\n            }\n            if (changesMask[130])\n            {\n                for (var i = 0; i < 4; ++i)\n                {\n                    if (changesMask[131 + i])\n                    {\n                        data.Aura[i] = ReadAura(packet, indexes, \"Aura\", i);\n                   ", "answers": ["                        data.MaxPower[i] = packet.ReadInt32(\"MaxPower\", indexes, i);"], "all_classes": null, "length": 4140}
{"pred": "        # enter each SNP\n        for snp in self.locsnps:\n            # in case multiple consens were merged in step 6 of this sample\n            for tup in tups:\n                cidx, coffset = tup\n                pos = snp + (self.gtrim - coffset)\n               ", "answers": ["        seq = self.seqs[nidx]"], "all_classes": null, "length": 7755}
{"pred": "            Index ix = indexByTagAndClass[tag];\n            if (ix == null) {\n                ix = new Index(tagName(tag)+\" for \"+classRef, new Entry[0]);\n                indexByTagAndClass[tag] = ix;\n            }\n            Entry[] cp = ix.cp;\n            if (cp ==", "answers": ["            Index[] perClassIndexes = indexByTagAndClass[tag];"], "all_classes": null, "length": 5112}
{"pred": "            this.quoteLabel.Size = new System.Drawing.Size(0, 13);\n            this.quoteLabel.TabIndex = 0;\n            this.quoteLabel.Text = \"Quote\";\n            this.quoteLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;\n            this.quoteLabel.Visible = false;\n            // \n            // processor\n            // \n           ", "answers": ["            this.quoteLabel.Size = new System.Drawing.Size(46, 16);"], "all_classes": null, "length": 4569}
{"pred": "            data['rrule_type'] = rrule_type[rule._freq - 1]\n            data['interval'] = rule._interval\n            data['count'] = rule._count\n            data['final_date'] = rule._until\n            data['end_type'] = rule._until and 'end_date", "answers": ["            data['rrule_type'] = rrule_type[rule._freq]"], "all_classes": null, "length": 4433}
{"pred": "                // Copy the decoded row to the output\n                fout.Write(curr, 0, bytesPerPixel);\n                // Copy the decoded row to the prior row\n                System.Array.Copy(curr, 0, prior, 0, bytesPerPixel);\n                // Read the next row\n                tot = 0;\n                while", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "      get { return defaultInstance; }\n    }\n    \n    protected override ReportRefundRequest ThisMessage {\n      get { return this; }\n    }\n    \n    public static pbd::MessageDescriptor Descriptor {\n      get { return global::bnet.protocol.exchange_object_provider.ExchangeObjectProviderTypes.Descriptor.GetNestedDescriptor(global::", "answers": ["      get { return DefaultInstance; }"], "all_classes": null, "length": 5791}
{"pred": "                        AApAnalAttribAccess.LoadViaAApDocumentDetail(MainDs, rv.Row);\n                    }\n                }\n                if (PartnerKey > 0)\n                {\n                    AApSupplierAccess.LoadViaPartnerKey(MainDs, PartnerKey);\n                }\n            }\n            MainDs.AcceptChanges();\n            return MainDs;\n       ", "answers": ["                        AApDocumentDetailRow DetailRow = (AApDocumentDetailRow)rv.Row;"], "all_classes": null, "length": 5677}
{"pred": "\t\t\t\tOwner.SendMessage(String.Format(\"{0} completed and auto-rewarded\", Name));\n\t\t\t\t// reward the player\n\t\t\t\tRewardPlayer();\n\t\t\t}\n\t\t}\n\t\tpublic void RewardPlayer()\n\t\t{\n\t\t\t// reward the player\n\t\t\tif (RewardItem!= null &&!m_Reward", "answers": ["\t\t\t\tif (RewardItem != null)"], "all_classes": null, "length": 4101}
{"pred": "\t            return (lastItemIndex - firstItemIndex) + 1;\n\t        }\n\t    }\n\t    public bool ContainsKey(TKey key)\n\t    {\n\t        return global::System.Collections.Generic.Comparer<TKey>.Default.Compare(key, items[firstItemIndex].Key) <= 0 && global::System.Collections.Generic.Comparer<TKey", "answers": ["\t            return lastItemIndex - firstItemIndex + 1;"], "all_classes": null, "length": 5727}
{"pred": "                if (AControlLabel!= null)\n                {\n                    AControlLabel.Location = new Point(0, NextControlVPos);\n                    AControlLabel.Size = new Size(ArgumentPanel.Width, AControlLabel.Height);\n                    ArgumentPanel.Controls.Add(AControlLabel);\n                    NextControlVPos += AControlLabel.Height", "answers": ["                if (AControlLabel != null)"], "all_classes": null, "length": 7766}
{"pred": "\t\t\treturn Unique(target, null);\n\t\t}\n\t\t/// <summary>\n\t\t/// Returns a new list containing only the unique elements of the target collection, preserving the order.\n\t\t/// The specified <see cref=\"IEqualityComparer{T}\"/> is used to determine uniqueness.\n\t\t/// </summary>\n\t", "answers": ["\t\t\treturn Unique(target, null);"], "all_classes": null, "length": 4367}
{"pred": "```\nDT_PPC64_GLINK  = (DT_LOPROC + 0)\n```\nShould be completed as follows:\n```\nDT_PPC64_GLINK  = (DT_LOPROC + 0)\nDT_PPC64_HLINK = (DT_LOPROC + 1)\nDT_PPC64_T", "answers": ["DT_PPC64_OPD    = (DT_LOPROC + 1)"], "all_classes": null, "length": 6803}
{"pred": "html.WriteLine(\"      table { width: 100%; }\");\nhtml.WriteLine(\"      table td { padding: 2px; border: 1px solid #000000; }\");\nhtml.WriteLine(\"      table th { background-color: #969696; color: #FFFFFF; }\");\nhtml.WriteLine(\"      </", "answers": ["                html.WriteLine(\"      table { width: 100%; }\");"], "all_classes": null, "length": 5413}
{"pred": "\t\t\t//... (rest of the code remains the same)\n``` \nPlease complete the code given above. Here is the rest of the code:\n```csharp\n\t\t\t//... (rest of the code remains the same)\n\t\t\t//... (rest of the code remains the same)\n\t\t\t//...", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "                elif p == 1:\n                    min_distance += abs(node.split - x[node.split_dim])\n                else:\n                    min_distance += (node.split - x[node.split_dim]) ** p\n                sd[node.split_dim] = min_distance\n                heappush(q, (min_distance, tuple(sd), far))\n", "answers": ["                    sd[node.split_dim] = np.abs(node.split - x[node.split_dim])"], "all_classes": null, "length": 5233}
{"pred": "\t\t// assert that the game is in the correct position\n\t\tassertEquals(acn, rules.formatGame(game, Locale.ENGLISH));\n\t}\n} \npackage de.schildbach.game.chess;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertTrue;\nimport java.io", "answers": ["\t\tassertEquals(acn, rules.formatGame(game, Locale.ENGLISH));"], "all_classes": null, "length": 4129}
{"pred": "    catch (Exception e)\n    {\n      // TODO Auto-generated catch block\n      e.printStackTrace();\n    }\n    return null;\n  }\n  /**\n   * @param f\n   * @return\n   */\n  public static String getTranscriptId(final Feature f)\n  {\n    try\n    {\n      if", "answers": ["    catch (InvalidRelationException e){}"], "all_classes": null, "length": 7770}
{"pred": "\t\t\t\t}\n\t\t\t}\n\t\t\tif (version >= 2)\n\t\t\t{\n\t\t\t\tm_FightMode = (FightMode)reader.ReadInt();\n\t\t\t\tm_bControlled = reader.ReadBoolean();\n\t\t\t\tm_ControlledMaster = reader.ReadMobile();\n\t\t\t\tm_ControlledTarget = reader.ReadMobile();\n\t\t\t\tm_ControlledDestination", "answers": ["\t\t\t\t\tstring str = reader.ReadString();"], "all_classes": null, "length": 5717}
{"pred": "\t\t\t\t\t\t\t\t// Update the sidedefs\n\t\t\t\t\t\t\t\tforeach(Sidedef sd in newsector.Sidedefs)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t// Update the sidedefs\n\t\t\t\t\t\t\t\t\tsd.Update();\n\t\t\t\t\t\t\t\t\t// Update the sidedefs\n\t\t\t\t\t\t\t\t\tsd.Update();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Update the sidedefs\n", "answers": ["\t\t\t\t\t\t\t\tif(newsector == null) return false;"], "all_classes": null, "length": 5677}
{"pred": "        translation = parent_doc.translated_to(document_locale)\n    except Document.DoesNotExist:\n        translation = None\n    if translation and translation.current_revision:\n        # If the translation already exists, we can just redirect to it\n        return redirect(reverse('wiki.document',\n                                locale=document_locale,\n                                args=[translation.slug]))\n   ", "answers": ["        doc = parent_doc.translations.get(locale=document_locale)"], "all_classes": null, "length": 4854}
{"pred": "                lDummyHeights[i] = lNewMaxRows;\n            }\n            \n            // now we'll merge the tables\n            if (isTable) {\n                newRows = new ArrayList();\n                for (i=0; i < lTotalRows; i++) {\n                    newRows.Add(new Row(lTotalColumns", "answers": ["                lDummyHeights [i] = lNewMaxRows;"], "all_classes": null, "length": 5053}
{"pred": "\t\t\t\t\t\treferenceNode.AddLink( GetReferenceNode( script ), \"Behaviour\" );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn referenceNode;\n\t\t}\n\t\tprivate ReferenceNode SearchBlendTree( BlendTree blendTree )\n\t\t{\n\t\t\tReferenceNode referenceNode = PopReferenceNode();\n\t\t\tforeach( BlendTreeState", "answers": ["\t\t\t\t\t\treferenceNode.AddLinkTo( GetReferenceNode( script ) );"], "all_classes": null, "length": 4267}
{"pred": "\t\t\t\t}\n\t\t\t\t// Replace -InvulnerabilityUpgrade\n\t\t\t\tvar trait = node.Value.Nodes.FirstOrDefault(n => n.Key == \"-InvulnerabilityUpgrade\");\n\t\t\t\tif (trait!= null)\n\t\t\t\t{\n\t\t\t\t\tnode.Value.Nodes.Add(new MiniYamlNode(\"InvulnerabilityMultiplier@EXPERIENCE\", new Mini", "answers": ["\t\t\t\t\t\tif (trait != null)"], "all_classes": null, "length": 5181}
{"pred": "values.sort(key=self._key)\nself._update(values)\nreturn self.__class__(values, key=self._key)\n    def __iadd__(self, other):\n        \"\"\"Add all values from `other` to the sorted-key list.\n        ``skl += other``\n        Values in `other` do not", "answers": ["        return self.__class__(values, key=self._key)"], "all_classes": null, "length": 7674}
{"pred": "        self._finalize_loaded(states)\n```\n\nThe final answer is: \n```\n        self._finalize_loaded(states)\n``` \nThis line of code is used to finalize the loaded states in the session. It is a private method of the Session class and is used to finalize the loaded states after they have been loaded from", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "                    else if (this.RequiredRace == Race.Dwarf)\n                        from.SendLocalizedMessage(1072204); // Only Dwarves may use this.\n                    else\n                        from.SendLocalizedMessage(1072205); // Only {0} may use this.\n                    from.SendLocalizedMessage(string.Format(1072205, this.Required", "answers": ["                    else if (this.RequiredRace == Race.Gargoyle)"], "all_classes": null, "length": 4125}
{"pred": "\t\t\t\tnew syspalvalue { @class = \"ITTY\", value = 220, name = \"FULLTEXT_THESAURUS_PHRASE_TABLE\" },\n\t\t\t\tnew syspalvalue { @class = \"ITTY\", value = 221, name = \"FULLTEXT_THESAURUS_PHRASE_TABLE", "answers": ["\t\t\t\tnew syspalvalue { @class = \"LEOP\", value = 0, name = \"TABLE\" },"], "all_classes": null, "length": 7135}
{"pred": "        if (emails == null) {\n            return;\n        }\n        for (int i = 0; i < emails.length(); i++) {\n            JSONObject email = emails.getJSONObject(i);\n            JSONArray emailTypes = email.optJSONArray(\"type\");\n            ContentValues contentValues;\n            if (emailTypes!= null) {\n                for", "answers": ["        if (emails == null) {"], "all_classes": null, "length": 4282}
{"pred": "            if (Diff!= null)\n            {\n                result[\"diff\"] = Diff;\n            }\n            if (Result.ContainsKey(\"changed\"))\n                result[\"changed\"] = Result[\"changed\"];\n            if (Result.ContainsKey(\"rc\"))\n                result[\"rc\"] = Result[\"rc\"];\n            if (Result.ContainsKey(\"msg\"))\n               ", "answers": ["            if (Diff.Count > 0 && DiffMode)"], "all_classes": null, "length": 4201}
{"pred": "\t\t\tint i;\n\t\t\tint nSelectors = 0;\n\t\t\tint nSelectors2 = 0;\n\t\t\tint nSelectors3 = 0;\n\t\t\tint nSelectors4 = 0;\n\t\t\tint nSelectors5 = 0;\n\t\t\tint nSelectors6 = 0;\n\t\t\tint nSelectors7 = ", "answers": ["\t\t\tint n = BZip2Constants.baseBlockSize * blockSize100k;"], "all_classes": null, "length": 5391}
{"pred": "                case 0x6A:  // getActorChoreLimbFrame\n                    var a = Actors[args[0]];\n                    Push(a.GetChoreLimbFrame(args[1]));\n                    break;\n                case 0x6B:  // getActorChoreLimbFrame2\n                    var", "answers": ["                        var a = Actors[args[1]];"], "all_classes": null, "length": 4518}
{"pred": "                    if (iFile!= null)\n                        iFile.close();\n                }\n            }\n            catch (final IOException ex)\n            {\n                throw new ObjectStoreException(ex);\n            }\n        }\n    }\n    private final void deleteEntries (final ArrayList<InputObjectState> objectStates, final ArrayList<InputObjectState> deletedLogs", "answers": ["                    if (iFile != null)"], "all_classes": null, "length": 4288}
{"pred": "\t\t\ttrackError += trackSegmentError ;\n\t\t}\n\t\n\t\treturn trackError ;\n\t}\n\tpublic static <T extends Track> double simplifyTrack( T track, final int maxPoints )\n\t{\n\t\tdouble trackError = 0.0 ;\n\t\n\t\tfor (TrackSegment trkSeg: track.getTrack", "answers": ["\t\t\tif (trackSegmentError > trackError)"], "all_classes": null, "length": 5623}
{"pred": "\t\t\t\t\"    {0}\" +\n\t\t\t\t\"    Function Something() As System.String{0}\" +\n\t\t\t\t\"    Function Something() As System.String{0}\" +\n\t\t\t\t\"    Function Something() As System.String{0}\" +\n\t\t\t\t\"End Interface{0}\", NewLine), code);\n\t", "answers": ["\t\t\t\t\"    {0}\" +"], "all_classes": null, "length": 5620}
{"pred": "            Spells.Add(new SpellData\n            {\n                MissileSpellName = \"JhinRShotMis\",\n                MissileSpeed = 2000,\n                MissileAccel = 0,\n                MissileDecel = 0,\n                MissileRange = 3500,\n                MissileWidth = 80,\n                MissileHeight =", "answers": ["                    ExtraMissileNames = new[] { \"JhinRShotMis4\" },"], "all_classes": null, "length": 4463}
{"pred": "                            m_House.Delete();\n                        }\n                    }\n                }\n            }\n        }\n    }\n    public class PreviewHouse : House\n    {\n        public PreviewHouse(int type) : base(type)\n        {\n        }\n        public override void OnDelete()\n        {\n            base.OnDelete();\n            if (Components!= null)\n", "answers": ["                            if (m_House.MovingCrate != null)"], "all_classes": null, "length": 5532}
{"pred": "\t\tplot = new Plot(\"Plot\", 0, 0, 400, 400);\n\t\tplot.show();\n\t}\n\tvoid showPlot() {\n\t\tif (plot==null)\n\t\t\tinterp.error(\"No plot defined\");\n\t\tplot.show();\n\t}\n\tvoid updatePlot() {\n\t\tif (", "answers": ["\t\tString title = getFirstString();"], "all_classes": null, "length": 5653}
{"pred": "                        widgetName = xbmcgui.Window( \"10000\" ).getProperty( \"widgetName\" )\n                    else:\n                        widgetName = selectedShortcut.getProperty( \"widgetName\" )\n                # Set widget title\n                self._set_widget_label( listitem, widgetName )\n                # Set widget path\n                self._", "answers": ["                        widgetTempName = xbmc.getInfoLabel(widgetName)"], "all_classes": null, "length": 6955}
{"pred": "        return encodeBytesToBytes( source, 0, source.length, Base64.NO_OPTIONS );\n    }   // end encodeBytesToBytes\n    \n    /**\n     * Similar to {@link #encodeBytes(byte[],int,int,int)} but returns\n     * a byte array instead of instantiating a String. This is", "answers": ["        byte[] encoded = null;"], "all_classes": null, "length": 5023}
{"pred": "            mnem[ishr] = \"ishr\";\n            mnem[lshr] = \"lshr\";\n            mnem[iushr] = \"iushr\";\n            mnem[lushr] = \"lushr\";\n            mnem[iand] = \"iand\";\n            mnem[land", "answers": ["            mnem[ishr] = \"ishr\";"], "all_classes": null, "length": 6113}
{"pred": "def _get_selinux_enabled():\n    return selinux.is_selinux_enabled()\n```\nThe final answer is: \n```\ndef _get_selinux_enabled():\n    return selinux.is_selinux_enabled()\n``` \nThis code defines a function `_get_selinux_enabled()` that returns the result of calling `selinux", "answers": ["            umask = os.umask(0)"], "all_classes": null, "length": 7132}
{"pred": "\t\t\t\t\tdo {\n\t\t\t\t\t\tMenus [selected].Current = (Menus [selected].Current+1) % Menus [selected].Children.Length;\n\t\t\t\t\t} while (Menus [selected].Children [Menus [selected].Current] == null);\n\t\t\t\t\tif (Menus [selected].Children [Menus [selected].Current].", "answers": ["\t\t\t\t\tforeach (var mi in Menus [selected].Children){"], "all_classes": null, "length": 7643}
{"pred": "        if (lastScanOffset + pixelStride > data.length) {\n            throw new RasterFormatException(\"Data buffer is too small\");\n        }\n    }\n    /**\n     * Returns the number of bands in the Raster.\n     * @return the number of bands in the Raster.\n     */\n    public int get", "answers": ["        int lastPixelOffset = (width - 1) * pixelStride;"], "all_classes": null, "length": 4323}
{"pred": "        return self.get_shared_meminfo()\n```\nThe final answer is: \n```\ndef get_shared_meminfo(self):\n    \"\"\"\n    Returns the VM's shared memory information.\n    :return: Shared memory used by VM (MB)\n    \"\"\"\n    if self.is_dead():\n        logging.error(\"Could not get shared", "answers": ["        shm = int(open(filename).read().split()[2])"], "all_classes": null, "length": 7764}
{"pred": "g.parser.add_argument('include_metadata', type=strict_bool, location='args')\n```\nThe final answer is: \n```\ng.parser.add_argument('include_metadata', type=strict_bool, location='args')\n``` \nThis line of code adds a new argument to the parser, which is used to validate and", "answers": ["    exclude_types = args.get('exclude_types')"], "all_classes": null, "length": 4956}
{"pred": "    objects = CourseEnrollmentManager()\n    def __str__(self):\n        return u\"{} enrolled in {}\".format(self.user.username, self.course_id)\n    def __repr__(self):\n        return u\"{} enrolled in {}\".format(self.user.username, self.course_id)\n    def get_course(self):\n        return", "answers": ["    objects = CourseEnrollmentManager()"], "all_classes": null, "length": 4276}
{"pred": "        system_id = self.get_system_id(system)\n        if not system_id:\n            continue\n        self.client.remove_custom_values(system_id, keys)\n####################\ndef get_system_id(self, system):\n    if system in self.ssh_systems:\n        return self.ssh_systems[system]\n    if system in", "answers": ["        system_id = self.get_system_id(system)"], "all_classes": null, "length": 5050}
{"pred": "'        'types': ('general-music',), \n}\n```\nThe final answer is: \n```\n# -*- coding: utf-8 -*-\nfrom abjad.tools import durationtools\nfrom abjad.tools import lilypondfiletools\nfrom abjad.tools import lilypondparsertools\nfrom abjad", "answers": ["        'types': ('general-music', 'sequential-music',),"], "all_classes": null, "length": 4888}
{"pred": "\t\t\t\t.Append (string.Join (\" \", Text))\n\t\t\t\t.ToString ();\n\t\t}\n\t\t\n#endregion\n\t}\n} \n// Copyright (C) 2006-2007  Brian T. Sniffen\n//\n// This library is free software; you can redistribute it and/or\n// modify it under the terms", "answers": ["\t\t\t\t.Append (base.ToString ()).ToString ();"], "all_classes": null, "length": 5367}
{"pred": "                chr.CollidingObj = false;\n            }\n            foreach (OdePrim prim in _prims)\n            {\n                // Reset the collision values to false\n                // since we don't know if we're colliding yet\n                prim.CollidingObj = false;\n            }\n            //m_log.Debug", "answers": ["                if (chr.Shell == IntPtr.Zero || chr.Body == IntPtr.Zero)"], "all_classes": null, "length": 6278}
{"pred": "for i in xrange(number_threads):\n    ts.append(RetrievalWorker(recs_queue, insert_queue, correct_queue, finished_queue, failed_ids, task_stats, suspend_wait_queue, suspend_resume_queue, main_syn_queue, number_threads, force_reupload = force_reupload))\n    ts[i].start()\n   ", "answers": ["        update_t = StatusUpdater(total_recs, finished_queue)"], "all_classes": null, "length": 6540}
{"pred": "        digits=dp.get_precision('Product Price'))\n    price_subtotal = fields.Float(string='Subtotal', readonly=True,\n        compute='_compute_price', store=True)\n    quantity = fields.Float(string='Quantity', digits=dp.get_precision('Product Unit of Measure'),\n        required=True, default=1.0)\n", "answers": ["        digits= dp.get_precision('Product Price'),"], "all_classes": null, "length": 4978}
{"pred": "        for p in self._populations:\n            p.write_data(io, variables, gather, clear, annotations)\n        if gather is False and self._simulator.state.mpi_comm is not None:\n            # if we're not gathering, we need to make sure that the\n            # recorder is not trying to", "answers": ["        data = self.get_data(variables, gather, clear, annotations)"], "all_classes": null, "length": 5678}
{"pred": "                return -value.byteValue();\n            }\n        };\n    }\n    /**\n     * Creates a new expression that evaluates to the logical NOT of the given\n     * operand.\n     *\n     * @param operand\n     */\n    public static UnaryExpression not(Expression operand) {\n        return new UnaryExpression(operand) {\n", "answers": ["                Class<? extends Number> type = value.getClass();"], "all_classes": null, "length": 5044}
{"pred": "            Spells.Add(new SpellData\n            {\n                ExtraSpellName = \"lucianrmissileoffhand\",\n                MissileSpellName = \"lucianrmissileoffhand\",\n                MissileSpeed = 2800,\n                MissileAccel = 0,\n                MissileDecel = 0,\n               ", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "                    \"   NEW: \" + nodeUpdate);\n        }\n        return true;\n    }\n    \n    /**\n     * Helper method to update the node's <b>cm:modified</b> property.\n     * \n     * @param nodeId the ID of the node to update\n     * @param txn    the", "answers": ["                    \"   NEW: \" + nodeUpdate);"], "all_classes": null, "length": 6068}
{"pred": "      if (isMainAxisRow) {\n        // If we are laying out in the main axis, we need to compute the cross axis\n        // size for each child. We do this by calling the layout function on each\n        // child, passing in the cross axis size as the available width/height.\n", "answers": ["      for (i = startOfLineIndex; i < endOfLineIndex; ++i) {"], "all_classes": null, "length": 4941}
{"pred": "\t\t\t\tyAxis.DrawGrid( g, this, scaleFactor, shiftPos );\n\t\t\t\tshiftPos += yAxis._tmpSpace;\n\t\t\t}\n\t\t\tshiftPos = 0.0f;\n\t\t\tforeach ( Y2Axis yAxis in _y2AxisList )\n\t\t\t{\n\t\t\t\tyAxis.DrawGrid( g,", "answers": ["\t\t\t\tyAxis.DrawGrid( g, this, scaleFactor, shiftPos );"], "all_classes": null, "length": 4173}
{"pred": "            if (info < 0)\n                throw new ArgumentException(\"qr: error inside lapack library\"); \n            return ret; \n        }\n        /// <summary>\n        /// QR decomposition of a matrix A, with pivoting.\n        /// </summary>\n        /// <param name=\"A\">The matrix to decom", "answers": ["            if (info < 0)"], "all_classes": null, "length": 4728}
{"pred": "                if (c!= null) {\n                    c.setFont(getFont());\n                }\n            }\n        }\n    }\n    /**\n     * Creates a new <code>HTMLEditorKit</code> instance.\n     * This is the default editor kit for the <code>JEditorPane</code> class.\n     * <", "answers": ["                if ((c != null)"], "all_classes": null, "length": 9124}
{"pred": "\t\t\t\t// If we are in a block of comments, we need to\n\t\t\t\t// check if we have reached the end of the line\n\t\t\t\t// or the end of the block\n\t\t\t\tif (xml_comment_state == XmlCommentState.InBlock) {\n\t\t\t\t\tif (c == -1 || c ==", "answers": ["\t\t\t\tswitch (c) {"], "all_classes": null, "length": 8996}
{"pred": "def getScmOverride(self, env, overrides):\n    scm = getScm(self, env)\n    if scm is None:\n        return None\n    if'scm' in overrides:\n        return overrides['scm']\n    return scm\n\n## Step 1: Problem Explanation\nThe code provided is a", "answers": ["        depStates = { n : s.copy() for (n,s) in states.items() }"], "all_classes": null, "length": 8648}
{"pred": "            xmlWriter.WriteAttributeString(\"SelectedIndex\", XmlConvert.ToString(pane.SelectedIndex));\n            xmlWriter.WriteAttributeString(\"IsAutoHidden\", XmlConvert.ToString(pane.IsAutoHidden));\n            foreach (DocumentContent content in pane.Items)\n            {\n                SaveLayout(xmlWriter, content);\n            }\n            xmlWriter.WriteEndElement", "answers": ["            if (pane.Items.Count > 1)"], "all_classes": null, "length": 8608}
{"pred": "                        &nbsp;(<span class=\"warning\">extra: %(diff)s</span>)<br />\n                        &nbsp;&nbsp;&nbsp;- configuration file \\\"websearch_external_collections_config.py\\\" has %(number_file)s collections\n                        <br /><br /><a href=\"%(site_url)s/admin/websearch_external_collections", "answers": ["                        &nbsp;(<span class=\"warning\">extra: %(diff)s</span>)<br />"], "all_classes": null, "length": 11089}
{"pred": "def _number(text):\n    \"\"\"For Python2 routines that can only process int type.\"\"\"\n    if sys.version_info[0] == 3:\n        if type(text)!= int:\n            return int(text)\n        else:\n            return text\n    elif sys.version_info[0] == 2:\n        if", "answers": ["        if type(text) == int:"], "all_classes": null, "length": 9909}
{"pred": "            if (result!= RESULT.OK)\n            {\n                return result;\n            }\n            if (sound == null)\n            {\n                sound = new Sound();\n                sound.setRaw(soundraw);\n            }\n            else\n            {\n                sound.setRaw(soundraw);\n            }\n            return result;\n        }\n        public RESULT create", "answers": ["            if (result != RESULT.OK)"], "all_classes": null, "length": 14097}
{"pred": "                            desc = escape(desc)\n                        output.write(\"      <field name='%s' type='%s' info='%s'/>\\n\" % (field[1], field[0], desc))\n                except:\n                    pass\n                output.write(\"</struct>\\n\");\n            else:\n                output.write(\"/>\\n\");\n", "answers": ["                            desc = escape(desc)"], "all_classes": null, "length": 8020}
{"pred": "columnNum, inputSlice, coincSlice)\n      # Update permanences\n      masterValidPermanence = masterValidPermanence + rfPermChanges\n      # Update connected permanences\n      masterValidConnected = masterValidConnected + rfConnectedChanges\n      # Update permanences\n      masterValidPermanence", "answers": ["                    columnNum // self.coincidencesShape[1],"], "all_classes": null, "length": 8992}
{"pred": "        check_nodes = [self.new_node_uuid, self.target_node_uuid, self.other_node_uuid]\n      else:\n        raise errors.OpPrereqError(\"Invalid mode '%s'\" % self.mode)\n    if self.ignore_ipolicy:\n      self.lu.CheckInstanceIpolicy(self.instance.uuid)\n    else:\n      self", "answers": ["        check_nodes = [self.new_node_uuid, self.other_node_uuid]"], "all_classes": null, "length": 8172}
{"pred": "def _parseVMOptions(optionType):\n    \"\"\"Returns a list of dictionaries describing the VM options for the given option type.\n    Each dictionary contains the following keys:\n        - optName: the name of the option\n        - optType: the type of the option (e.g. \"Boolean\", \"String\",", "answers": ["        complt += '\\t\\t\\t\\t\\t-\"'"], "all_classes": null, "length": 8122}
{"pred": "        }\n        public virtual void OnControlOrderChanged()\n        {\n        }\n        public virtual void OnControlTargetChanged()\n        {\n        }\n        public virtual void OnControlTargetLost()\n        {\n        }\n        public virtual void OnControlTargetGained()\n        {\n        }\n        public virtual void OnControlTargetChanged(M", "answers": ["                if (m_ControlMaster != null)"], "all_classes": null, "length": 9893}
{"pred": "        if (isClipped()) {\n            contains = false;\n        }\n        return contains;\n    }\n    /**\n     * Returns true if the given absolute coordinate is contained inside the Component's \n     * visible bounds and is also contained inside the Component's bounds.\n     * \n     * @param x the given absolute", "answers": ["        if (contains) {"], "all_classes": null, "length": 10298}
{"pred": "                            if (n1 < bmp_mono.Length)\n                            {\n                                if (bmp_mono[n1] == 0)\n                                    hits1++;\n                                else\n                                    side1++;\n                            }\n                        }\n                        if (y + r < image_height)\n                        {\n                            int n2 = ((y + r) * image_width", "answers": ["                            side1 += bmp_mono[n1];"], "all_classes": null, "length": 8006}
{"pred": "\t\t\t z = new double[2];\n\t\t\t z[0] = Math.sqrt(3.0) - 2.0;\n\t\t\t z[1] = Math.sqrt(3.0) + 1.0;\n\t\t\t break;\n\t\t case 11:\n\t\t\t z = new double[3];\n\t\t\t z", "answers": ["\t\t\t z = new double[3];"], "all_classes": null, "length": 9193}
{"pred": "\t\tDatabaseMetaData dbmd = getDatabaseMetaData();\n\t\tResultSet rs = dbmd.getColumns(null, null, tableName, null);\n\t\tList<String> existingFields = new ArrayList<String>();\n\t\twhile (rs.next()) {\n\t\t\texistingFields.add(rs.getString(4));\n\t\t}\n\t\trs.close();\n\t\t", "answers": ["        RowMetaInterface tabFields = getTableFields(tableName);"], "all_classes": null, "length": 9895}
{"pred": "\t\t\tspecial.get(3).add(\"Favored Enemy: \" + allFE.get(feIndex));\n\t\t\tallFE.remove(feIndex);\n\t\t\tbonusFeats[3] = new String[] {\"TRACK\"};\n\t\t\tspecial.get(5).add(\"Improved Evasion\");\n\t\t\tspecial.get(7).add", "answers": ["\t\t\tfeIndex = rand.nextInt(allFE.size());"], "all_classes": null, "length": 8696}
{"pred": "        \"\"\"\n        \n        self.SetToolTipString(\"\")\n        self._tip_timer.Stop()\n        self._tip_timer.Start(1000)\n        self._tip_timer.Bind(wx.EVT_TIMER, self.OnTimer)\n        self._tip_timer.Bind(wx.EVT_TIMER, self.OnTimer)\n        self._tip_timer.Bind(wx.EVT_TIMER, self", "answers": ["        Handles the ``wx.EVT_LEAVE_WINDOW`` event for L{AuiToolBar}."], "all_classes": null, "length": 11431}
{"pred": "            mute = (m!= 0);\n            return result;\n        }\n        public RESULT setUserData        (IntPtr userdata)\n        {\n            return FMOD_EventCategory_SetUserData(eventcategoryraw, userdata);\n        }\n        public RESULT getUserData        (ref IntPtr userdata)\n        {\n            return FMOD_EventCategory_GetUserData", "answers": ["            mute = (m != 0);"], "all_classes": null, "length": 9240}
{"pred": "protected override int[] Reward { get { return new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,", "answers": ["\tprotected override int QuestId { get { return 519436; } }"], "all_classes": null, "length": 9147}
{"pred": "            try{ ois.close(); } catch( Exception e ){EncogLogging.log(e);}\n        }   // end finally\n        \n        return obj;\n    }   // end decodeToObject\n    \n    /**\n     * \n     * @param source\n     * @return\n     * @throws java.io.IOException\n     *", "answers": ["            try{ ois.close();  } catch( Exception e ){EncogLogging.log(e);}"], "all_classes": null, "length": 8136}
{"pred": "                if e.nodeType == e.ELEMENT_NODE and e.localName == \"layout\":\n                    self.layoutNode = e\n                    break\n            # Check if the layout has a region\n            if self.layoutNode is None:\n                log.log(0,\"Layout \" + self.layoutID + \" has no region\")\n               ", "answers": ["                if e.nodeType == e.ELEMENT_NODE and e.localName == \"layout\":"], "all_classes": null, "length": 8661}
{"pred": "                numBits--;\n            uint numBytes = numBits >> 3;\n            if((numBits & 0x7)!= 0)\n                numBytes++;\n            uint[] data = new uint[numBytes];\n            uint[] data2 = new uint[numBytes];\n            uint[] data3 = new uint[numBytes", "answers": ["                numBits = (numBits >> 1) + 1;"], "all_classes": null, "length": 8360}
{"pred": "        if cdata is None:\n            return\n        if cdata == (slice(None),):\n            return node.inputs[0]\n    elif isinstance(node.op, AdvancedSubtensor1):\n        cdata = node.op.get_constant_idx(node.inputs, allow_partial=True,\n                                         only_process_constants=True)\n        if cdata", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": "                   is_const=True, is_virtual=True)\n    ## ns3::AttributeAccessor::GetAttributeAccessor(ns3::ObjectBase const * object) [member function]\n    cls.add_method('GetAttributeAccessor', \n                   'ns3::AttributeAccessor*', \n                   [param('ns3::ObjectBase const *',", "answers": ["                   is_const=True, is_virtual=True, is_pure_virtual=True)"], "all_classes": null, "length": 10722}
{"pred": "                    Node.TemplateText tt = (Node.TemplateText) body.elementAt(0);\n                    if (tt.getText().trim().length() == 0) {\n                        templateTextOptimization = true;\n                    }\n                }\n                if (!templateTextOptimization) {\n                    out.printil(\"pushBody();\");\n                    out.print", "answers": ["                    Node bodyElement = body.getNode(0);"], "all_classes": null, "length": 9144}
{"pred": "\t\t\t\t\tbreak;\n\t\t\t\tcase Msg.WM_KEYUP:\n\t\t\t\tcase Msg.WM_SYSKEYUP:\n\t\t\t\t\tPreviewKeyDownEventArgs e = new PreviewKeyDownEventArgs ((Keys)msg.WParam.ToInt32 () | XplatUI.State.ModifierKeys);\n\t\t\t\t\tOnPreviewKeyDown (e);\n\t\t\t\t\tbreak;\n\t\t\t\tcase Msg.WM", "answers": ["\t\t\t\t\tif (PreProcessMessage (ref msg))"], "all_classes": null, "length": 9784}
{"pred": "        if os.path.exists(md_file_path) is False:\n            raise RuntimeError('Pre-processed file does not exist: %s' % md_file_path)\n        # load\n        mantid.simpleapi.LoadNexus(md_file_path, outputWorkspace=output_ws_name)\n        # record\n        self._myRawWS", "answers": ["        if os.path.exists(md_file_path) is False:"], "all_classes": null, "length": 9108}
{"pred": "            package = None\n    return package\ndef _calc___spec__(globals):\n    \"\"\"Calculate __spec__ for the module.\n    __spec__ is not guaranteed to be defined or could be set to None\n    to represent that its proper value is unknown.\n    \"\"\"\n    spec = globals.get('__spec__", "answers": ["            package = package.rpartition('.')[0]"], "all_classes": null, "length": 8094}
{"pred": "                var methodGroup = (MethodGroup)expression;\n                if (methodGroup.Method.IsStatic)\n                {\n                    Error(diagnostics, ErrorCode.ERR_ExtensionMethod, methodGroup.Method);\n                }\n                else\n                {\n                    Error(diagnostics, ErrorCode.ERR_InstanceMethod, methodGroup.Method);\n                }\n                return;\n           ", "answers": ["                var methodGroup = (BoundMethodGroup)expression;"], "all_classes": null, "length": 8696}
{"pred": "            search_reg_str = search_terms.replace(' ', r'\\b\\w+\\b')\n        search_regx = re.compile(search_reg_str, flags)\n        return search_regx\n    def search_terms_to_regex(self, search_terms, case_sensitive=False,\n                             sloppy=False):\n        \"\"\" Convert search terms to a regular", "answers": ["            search_reg_str = '\\\\b%s\\\\b' % search_terms.replace(' ',"], "all_classes": null, "length": 11879}
{"pred": "                FvObj = Fv.FV()\n                self.__GetDefineStatements(FvObj)\n                self.__GetBlockStatement(FvObj)\n                self.__GetSetStatements(FvObj)\n                self.__GetFvAlignment(FvObj)\n                self.__GetFvAttributes(FvObj)\n                self", "answers": ["                if not self.__IsKeyword(\"FV\"):"], "all_classes": null, "length": 10845}
{"pred": "      headers_phase = PBXHeadersBuildPhase()\n      self.AppendBuildPhase(headers_phase)\n    return headers_phase\n  def SourcesPhase(self):\n    sources_phase = self.GetBuildPhaseByType(PBXSourcesBuildPhase)\n    if sources_phase is None:\nNext line of code:\n      sources_phase = PBXSources", "answers": ["      headers_phase = PBXHeadersBuildPhase()"], "all_classes": null, "length": 11459}
{"pred": "url = remote_instance._get_node_location_url() + '?' + urllib.parse.urlencode({'node_ids': x}) \n```\nNote: The code you provided is a part of a larger module, and it seems like you're trying to complete a function. I'll assume that the function is `get_node_location`", "answers": ["    post = {'node_ids[{}]'.format(i): n for i, n in enumerate(x)}"], "all_classes": null, "length": 14106}
{"pred": "                        useExponent = true;\n                        useExponent = true;\n                        useExponent = true;\n                        useExponent = true;\n                        useExponent = true;\n                        useExponent = true;\n                        useExponent = true;\n                        useExponent = true;\n                        useExponent = true;\n                       ", "answers": ["                        if (useExponentialNotation) {"], "all_classes": null, "length": 11534}
{"pred": "        BeginBatchUndo(self) -> bool\n        Starts a batch of undo operations.  All operations performed between\n        BeginBatchUndo and EndBatchUndo will be undone together.\n        \"\"\"\n        return _richtext.RichTextCtrl_BeginBatchUndo(*args, **kwargs)\n    def EndBatchUndo(*args,", "answers": ["        BeginBatchUndo(self, String cmdName) -> bool"], "all_classes": null, "length": 9452}
{"pred": "  exec /usr/bin/lighttpd -f /opt/dirac/etc/lighttpd.conf\n  \"\"\" % {'bashrc': os.path.join( self.instancePath, 'bashrc' ) } )\n        fd.close()\n        os.chmod( runFile, stat.S_IRWXU | stat.S_IRWX", "answers": ["  exec lighttpdSvc.sh < /dev/null"], "all_classes": null, "length": 8611}
{"pred": "    if (tractor.getX() - target.getX() == 1) {\n      mx = 1;\n    }\n    if (tractor.getX() - target.getX() == -1) {\n      mx = -1;\n    }\n    if (tractor.getY() - target.getY() == -2) {\n      my =", "answers": ["    if (tractor.getY() - target.getY() == -2) {"], "all_classes": null, "length": 8405}
{"pred": "            if module.params.get('state') == 'absent':\n                ret = vms_module.action(\n                    action='delete',\n                    entity=vm,\n                    action_condition=lambda vm: vm.status == otypes.VmStatus.DOWN,\n                    wait_condition=vms_module.wait_for_down,\n                )\n                vms_module.post", "answers": ["        elif state == 'suspended':"], "all_classes": null, "length": 8276}
{"pred": "        m = ModeFactory.getMode(\"Channel_queries\", \"get_systems_for_subscription\");\n        DataResult dr = m.execute(params);\n        for (Iterator i = dr.iterator(); i.hasNext();) {\n            Map map = (Map) i.next();\n            Long systemId = (Long) map.get(\"id\");\n           ", "answers": ["        List<Map> subDr = Collections.EMPTY_LIST;"], "all_classes": null, "length": 10246}
{"pred": "            for (int i = 0; i < libs.size(); i++) {\n                NativeLibrary lib = libs.elementAt(i);\n                if (lib.name.equals(name)) {\n                    return true;\n                }\n            }\n            NativeLibrary lib = new NativeLibrary(fromClass, name);\n            lib.name = name;\n            lib", "answers": ["            int size = libs.size();"], "all_classes": null, "length": 8562}
{"pred": "            state.s1 = s0;\n            state.s2 = s1;\n            state.magicv = hqrndmagic;\n        }\n        /*************************************************************************\n        HQRNDState  initialization  with  given  seed  values.  The  seed  values\n        should  be  chosen  to  be", "answers": ["            hqrndseed(s0, s1, state, _params);"], "all_classes": null, "length": 18518}
{"pred": "                hr = (float) radii.getTopRightHorizontalRadius();\n                vr = (float) radii.getTopRightVerticalRadius();\n                // 1 - Top Right:     X - HR, Y + 0,      X, Y,      X + 0, Y + VR\n                dx0", "answers": ["                hr = (float) radii.getTopRightHorizontalRadius();"], "all_classes": null, "length": 9945}
{"pred": "group.add_option(\"-q\", \"--quiet\", dest=\"quiet\", action=\"store_true\",\n                help=_(\"be quiet, don't print summary information\"))\ngroup.add_option(\"-y\", \"--assumeyes\", dest=\"assumeyes\", action=\"store_true\",\n                help=_(\"answer yes to all prompts\"))\ngroup.add_option", "answers": ["        group.add_option(\"\", \"--rpmverbosity\", default=None,"], "all_classes": null, "length": 8933}
{"pred": "            for (int retry = 0; retry < retryCount; retry++) {\n                try {\n                    // mount the data in the repository.\n                    mountData(dataFile, dataPrefix, values, defaultData,\n                              registerDataNames, fileEditable, datafilePath);\n                    successful = true;\n                    break;\n                }", "answers": ["            while (!successful && retryCount-- > 0) try {"], "all_classes": null, "length": 10896}
{"pred": "                    }\n                }\n                moduleBeingBuilt.AddDebugDocument(MakeDebugSourceDocumentForChecksumDirective(normalizedPath, checkSumText, guid));\n            }\n        }\n        private static bool CheckSumMatches(string checkSumText, string sourceHash)\n        {\n            return checkSumText == sourceHash;\n        }\n        private", "answers": ["                        if (guid == existingDoc.SourceHashKind)"], "all_classes": null, "length": 8489}
{"pred": "                    while self.tok[0]!= ')':\n                        if self.tok[0] == 'IDENT':\n                            params.append(self.tok[1])\n                            self.NextToken()\n                        elif self.tok[0] == 'TYPE':\n                            typ = self.tok[1]\n                            self.NextToken()\n                           ", "answers": ["                    if self.tok[0] != ')':"], "all_classes": null, "length": 10276}
{"pred": "        return {'comment': comment_value, 'option': json_d.get('option', None)}\n#-----------------------------------------------------------------------------\n@registry.register\nclass ChoiceResponse(Problem):\n    \"\"\"\n    A problem that asks the student to select one or more options from a list.\n    \"\"\"\n    def __init__(self, problem_xml):\n        super", "answers": ["        options_value = json_d.get('options', [])"], "all_classes": null, "length": 13691}
{"pred": "          pMem.n = sqlite3Strlen30( pMem.z );\n        }\n        pMem.type = SQLITE_TEXT;\n        pMem.enc = SQLITE_UTF8;\n        if ( p.pResultSet!= null )\n        {\n          p.pResultSet[i_p] = pMem;\n        }\n        if ( p.pResultSet", "answers": ["          Debug.Assert( pMem.z != null );"], "all_classes": null, "length": 8052}
{"pred": "        json_data = json.loads(str(form['jsondata']))\n        json_data = json_unicode_to_utf8(json_data)\n        try:\n            orcid = json_data['orcid']\n        except:\n            return self._fail(req, apache.HTTP_NOT_FOUND)\n        web_author = web_author_from_orcid(orcid)\n", "answers": ["        json_data = json.loads(str(form['jsondata']))"], "all_classes": null, "length": 9234}
{"pred": "                disk_type = expected_disk_spec['type'].lower()\n                if disk_type == 'thin':\n                    diskspec.device.backing.thinProvisioned = True\n                    disk_modified = True\n                elif disk_type == 'eagerzeroedthick':\n                    diskspec.device.backing.eagerlyScrub", "answers": ["                disk_type = expected_disk_spec.get('type', '').lower()"], "all_classes": null, "length": 9014}
{"pred": "\t\t\treturn names [(int) ot] [1];\n\t\t}\n\t\tpublic static string GetMetadataName (string name)\n\t\t{\n\t\t\tfor (int i = 0; i < names.Length; ++i) {\n\t\t\t\tif (names [i] [0] == name)\n\t\t\t\t\treturn names [i", "answers": ["\t\t\treturn names [(int) ot] [1];"], "all_classes": null, "length": 8622}
{"pred": "            }\n        }\n        private void ClearCachedInfo() {\n            this.map = null;\n            this.map = null;\n            this.map = null;\n            this.map = null;\n            this.map = null;\n            this.map = null;\n            this.map = null;\n            this.map = null;\n            this.map =", "answers": ["                this.Children = new ArrayList();"], "all_classes": null, "length": 8049}
{"pred": "        return {'account_src': acc_src, 'account_dest': acc_dest, 'account_valuation': acc_valuation, 'journal_id': journal_id}\n    def _get_accounting_data_for_valuation(self, cr, uid, move, context=None):\n        \"\"\" Return the accounts and journal to use to post", "answers": ["        if acc_src == acc_valuation:"], "all_classes": null, "length": 9425}
{"pred": "    out : array of datetime64[D]\n        An array with the same shape as ``dates``, containing the\n        adjusted dates.\n    See Also\n    --------\n    is_busday : Returns a boolean array indicating valid days.\n    busday_offset : Applies an offset to valid days.\n    busday_count : Counts", "answers": ["    out : array of datetime64[D]"], "all_classes": null, "length": 23278}
{"pred": "                subsets = dim_coord_subset()\n            else:\n                subsets = [slice(None)]\n        else:\n            subsets = [slice(None)]\n        return subsets\n    def _intersect_modulus(self, coord, points, bounds, inside_indices):\n        \"\"\"\n        Perform the intersection of the coordinate with the modulus.\n        \"\"\"\n       ", "answers": ["                subsets = dim_coord_subset()"], "all_classes": null, "length": 8031}
{"pred": "this.region = region;\n}\n/**\n * Sets the background color of the receiver to the color specified by the argument.\n * <p>\n * Note: This operation is a no-op if the receiver is not visible.\n *\n * @param color the new background color (or null to reset to default)\n *\n * @exception", "answers": ["\tlong /*int*/ hRegion = 0;"], "all_classes": null, "length": 16705}
{"pred": "                    if not webapi.is_paper_in_person_papers(paper, person_id):\n                        papers_to_autoclaim.remove(paper)\n                if papers_to_autoclaim:\n                    autoclaim_data = webapi.autoclaim_papers(papers_to_autoclaim, person_id, params)\n                    autoclaim", "answers": ["                    operation_parts = {'pid': person_id,"], "all_classes": null, "length": 8290}
{"pred": "            u\"User %s opted in to receive emails from course %s\",\n            user.username,\n            course_id\n        )\n    else:\n        optout_object = Optout.objects.filter(user=user, course_id=course_key)\n        if optout_object:\n            optout_object.delete()\n        log.info(\n           ", "answers": ["            u\"User %s (%s) opted in to receive emails from course %s\","], "all_classes": null, "length": 8301}
{"pred": "if len(arrayObjectMemberTypes) > 0: \n```\nThe final answer is: \n```\n            def get_match(memberType):\n                if memberType.isSequence():\n                    return (\n                        \"match %s::tryFromJSVal(cx, val) {\\n\"\n                        \"    Ok(inner) => return", "answers": ["        if len(arrayObjectMemberTypes) > 0:"], "all_classes": null, "length": 12254}
{"pred": "class _TokenList(object):\n    def __init__(self,tokenlist):\n        self.tokenlist = tokenlist\n    def __getitem__(self,i):\n        return self.tokenlist[i]\n    def __setitem__(self,i,val):\n        self.tokenlist[i] = val\n    def __delitem__(", "answers": ["                    tokenlist[ikey] = _ParseResultsWithOffset(dictvalue,i)"], "all_classes": null, "length": 11936}
{"pred": "```python\ndef CheckForExplicit(self, filename, contents):\n  \"\"\"Checks for explicit keyword in constructors and assignment operators.\n  Args:\n    filename: The name of the file being checked.\n    contents: The contents of the file.\n  \"\"\"\n  #... (rest of the function remains the same)\n```\n", "answers": ["    if matched_zero and matched_zero.group(1) != '0':"], "all_classes": null, "length": 20316}
{"pred": "```python\ndef GetBaseFiles(self, data):\n    \"\"\"Returns a list of base files for the given diff data.\"\"\"\n    # We need to find the base files for the diff data.  We can do this by\n    # looking at the \"Index:\" lines in the diff data.  We'll also", "answers": ["          if after == NULL_HASH:"], "all_classes": null, "length": 10689}
{"pred": "            url = _get_subfield_value(fft, 'a', '')\n            if not url:\n                url = _get_subfield_value(fft, 'u', '')\n            if not url:\n                url = _get_subfield_value(fft,'s', '')\n            if not url:\n                url = _", "answers": ["            url = field_get_subfield_values(fft, 'a')"], "all_classes": null, "length": 8249}
{"pred": "        int[] allowedIfds = new int[ifds.length];\n        int count = 0;\n        for (int i = 0; i < ifds.length; i++) {\n            if ((ifdFlags & ifds[i])!= 0) {\n                allowedIfds[count++] = ifds", "answers": ["        ArrayList<Integer> l = new ArrayList<>();"], "all_classes": null, "length": 9563}
{"pred": "            c = new double[m];\n            i1 = 0;\n            while( i1<m )\n            {\n                c[i1] = b[i1];\n                i1 = i1+1;\n            }\n            return;\n        }\n    }\n}\n```\nThe code is a C# implementation of the FFT", "answers": ["            c = new double[m];"], "all_classes": null, "length": 10316}
{"pred": "            new char[] { '\\x1FED', '\\x1FEE', '\\x1FF0', '\\x1FF1', '\\x1FF2', '\\x1FF3', '\\x1FF4', '\\x1FF5', '\\x1FF6', '\\x1FF7", "answers": ["            \"\\x1FF2\\x1F7C\\x03B9\", /* 1FF2; 1F7C 03B9; Case map */"], "all_classes": null, "length": 14273}
{"pred": "        if (bImg == null) {\n            throw new NullPointerException(\"BufferedImage is null\");\n        }\n        if (op == null) {\n            throw new NullPointerException(\"BufferedImageOp is null\");\n        }\n        if (x < 0 || y < 0) {\n            throw new IllegalArgumentException(\"x and y", "answers": ["        if (bImg == null) {"], "all_classes": null, "length": 14028}
{"pred": "      return root.getPackageFragment(CharOperation.subarray(fileName, 0, pkgEnd));\n    }\n  }\n  public static char[] getFileName(char[] fileName, int pkgEnd, int jarSeparator) {\n    if (jarSeparator!= -1) {\n      String jarMemento = new String(fileName, 0", "answers": ["      Path path = new Path(new String(fileName, 0, pkgEnd));"], "all_classes": null, "length": 9133}
{"pred": "                if adding:\n                    if lhs in raw:\n                        raw[lhs] = raw[lhs] + rhs\n                    else:\n                        raw[lhs] = rhs\n                else:\n                    if lhs in raw:\n                        raw[lhs] = rhs\n                    else:\n                        raw[lhs] = rhs\n            else", "answers": ["                if adding and rhs != \"\":"], "all_classes": null, "length": 8273}
{"pred": "                if end_line == t[3][0]:\n                    # same line\n                    if token_type == tokenize.OP and text in ('+', '-'):\n                        # operator on same line\n                        if previous[1] in ('=', '==', '!=', '<', '>', '<=', '>='):\n                            # operator", "answers": ["                start_line, start = t[2]"], "all_classes": null, "length": 8040}
{"pred": "        with open(filename, \"r\") as f:\n            for line in f:\n                if re_warning.match(line):\n                    self.logger.warn(\"File %s contains: %s\", filename, line.strip())\n                yield line\n    def parse_polyselect(self, text):\n        \"\"\" Parse a polyselect file and return", "answers": ["        with open(filename, \"r\") as inputfile:"], "all_classes": null, "length": 9404}
{"pred": "\t\t\t\tif (mediaEncoderItems.Length!= 3)\n\t\t\t\t{\n\t\t\t\t\tthrow new ArgumentException(String.Format(CultureInfo.InvariantCulture, \"Invalid media encoder string. Expected format: {0}. Found: {1}\", \".avi||.mp4||-i {SourceFilePath} {DestinationFilePath}\", mediaEncStr));\n\t\t\t\t}\n", "answers": ["\t\t\t\tif (mediaEncoderItems.Length != 3)"], "all_classes": null, "length": 11381}
{"pred": "            for k in self.splitKeys:\n                theSum += self.splitKeys[k].len\n            for k in tree2.splitKeys:\n                theSum += tree2.splitKeys[k].len\n            return theSum\n        else:\n            gm = ['Tree.topologyDistance()']\n            gm.append(\"metric should", "answers": ["            for k in self.splitKeySet.intersection(tree2.splitKeySet):"], "all_classes": null, "length": 10347}
{"pred": "            weights = aggregator.weights(**kwargs)\n        else:\n            weights = None\n        # perform the data transformation\n        result_data = aggregator.transform(**kwargs)\n        # if weights were generated, then we need to multiply the result by\n        # the weights\n        if weights is not None:\n            result_data *=", "answers": ["                kwargs = dict(kwargs)"], "all_classes": null, "length": 11922}
{"pred": "                return fn(*arg, **kw)\n            event_key = event_key.with_wrapper(wrap)\n        event_key.base_listen(**kw)\nclass _EventTarget(object):\n    \"\"\"Base class for event targets.\n    \"\"\"\n    def __init__(self, target):\n        self.target = target\n    def _get_target", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": "                setMargins(a.getDimensionPixelOffset(MARGIN, DEFAULT_MARGIN),\n                        a.getDimensionPixelOffset(LEFT, DEFAULT_MARGIN),\n                        a.getDimensionPixelOffset(RIGHT, DEFAULT_MARGIN),\n                        a.getDimensionPixelOffset(TOP, DEFAULT_MARGIN));\n            } finally {\n                a.recycle();\n            }\n        }\n        private", "answers": ["                int margin = a.getDimensionPixelSize(MARGIN, DEFAULT_MARGIN);"], "all_classes": null, "length": 9007}
{"pred": "        if (TraceNLS.isTraceEnabled(TraceNLS.CATEGORY_CONNECTION, TraceNLS.LEVEL_FINE)) {\n            TraceNLS.trace(TraceNLS.CATEGORY_CONNECTION, TraceNLS.LEVEL_FINE, \"getUuid() - \" + _uuid);\n        }\n        return _uuid;\n    }\n", "answers": ["        if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())"], "all_classes": null, "length": 9441}
{"pred": "                return new SynthesizedIntrinsicOperatorSymbol(op, leftType, rightType, returnType, isChecked);\n            }\n            return new SynthesizedIntrinsicOperatorSymbol(op, leftType, rightType, returnType, isChecked);\n        }\n        private static void AdjustSymbolsForIntrinsicOperator(BinaryOperatorKind op, bool isChecked,", "answers": ["                if ((object)leftType == null)"], "all_classes": null, "length": 15198}
{"pred": "        self.invoke('atEvaluate', expression=expression, locals=locals)\n        try:\n            result = self.interpreter.evaluate(expression, locals)\n        except Exception, e:\n            # If an exception occurs, then we have to catch it and\n            # re-raise it as a TransientError.\n            self", "answers": ["        if expression in ('1', 'True'): return True"], "all_classes": null, "length": 8731}
{"pred": "      for (int j = 0; j < dsize; j++) {\n        labels[dataIndex][j] = document.get(j).getLabel();\n        data[dataIndex][j] = document.get(j).getFeatures();\n        if (featureVals!= null) {\n          featureVals[dataIndex][j]", "answers": ["      if (featureVals != null)"], "all_classes": null, "length": 8316}
{"pred": "internal struct LeafMethodList\n    {\n        // internal ushort leaf; // LF_METHODLIST [TYPTYPE]\n        /// <summary>\n        /// </summary>\n        internal uint count; // number of methods in list\n        /// <summary>\n        /// </summary>\n        internal uint[] mlist; // (", "answers": ["        internal string name; // length prefixed name of method"], "all_classes": null, "length": 9110}
{"pred": "            string[] extensionList = extensions.Split(new char[] {'' }, StringSplitOptions.RemoveEmptyEntries);\n            foreach (string extension in extensionList)\n            {\n                if (extension.StartsWith(\"GL_ARB_\"))\n                {\n                    if (extension == \"GL_ARB_multisample\")\n                    {\n                        supportsMultisample = true;\n                   ", "answers": ["            if (GL.GetString(StringName.Version).StartsWith(\"GL ES\"))"], "all_classes": null, "length": 8378}
{"pred": "```python\nelif auth_type == 'email':\n```\nShould be:\n```python\nelif auth_type == 'email':\n```\nShould be:\n```python\nelif auth_type == 'email':\n```\nShould be:\n```python\nelif auth_type == 'email':\n```\nShould be:\n```python\nelif", "answers": ["    return (0, CFG_WEBACCESS_WARNING_MSGS[0])"], "all_classes": null, "length": 11744}
{"pred": "        self.impl_use = data[32:]\n        self._initialized = True\n    def record(self):\n        # type: () -> bytes\n        \"\"\"\n        Return the bytes that represent this object.\n        \"\"\"\n        return struct.pack(self.FMT, self.impl_use, self.num_files, self.num_dirs,\n                           self", "answers": ["        self.impl_id = UDFEntityID()"], "all_classes": null, "length": 10644}
{"pred": "```\n            result = concat(values, axis=1)\n```\nThis line of code is used to concatenate the values list into a DataFrame. The `concat` function is used to concatenate the values list into a DataFrame. The `axis=1` parameter is used to specify that the concatenation should be done along", "answers": ["                            result = concat(values, keys=key_index,"], "all_classes": null, "length": 9883}
{"pred": "            default:\n                unread();\n                return;\n            }\n            ch = read();\n        }\n    }\n    private void accept(char c, String message) {\n        if (peek()!= c) {\n            throw error(message);\n        }\n        next();\n    }\n    private void unread() {\n        if (cursor > ", "answers": ["            case '-': // subFlag then fall through"], "all_classes": null, "length": 10915}
{"pred": "        final VirtualMachine vm = _vmDao.findById(vmUuid);\n        final VirtualMachineProfile profile = _vmDao.findById(vmUuid);\n        final VirtualMachineProfile profile = _vmDao.findById(vmUuid);\n        final VirtualMachineProfile profile = _vmDao.findById(vmUuid);\n        final VirtualMachineProfile profile = _vm", "answers": ["        final VMInstanceVO vm = _vmDao.findByUuid(vmUuid);"], "all_classes": null, "length": 8853}
{"pred": "        g = np.zeros([K], dtype=np.float64)\n        for k in range(1, K):\n            g[k] = N_k[k] - N_k[k] * np.exp(f_k[k] - self.u_k[k])\n        return -g\n    #=========================================================================\n    def _computeUn", "answers": ["        W_nk = self._computeWeights(recalc_denom=True)"], "all_classes": null, "length": 12510}
{"pred": "        d = self.shell.stat(('ned',), ('size', 'permissions'))\n        def cb(res):\n            self.assertEqual(res[0], 0)\n            self.assertEqual(res[1], 0o755)\n        d.addCallback(cb)\n        return d\n    def test_statNotExisting(self):\n        \"\"\"\n       ", "answers": ["        d = self.shell.stat(('ned',), ('size', 'directory'))"], "all_classes": null, "length": 8415}
{"pred": "                if( b == -1 ) {\n                    break;\n                }   // end if\n                \n                dest[ off + i ] = (byte)b;\n            }   // end for\n            \n            return i;\n        }   // end read\n        \n        /**\n         * Skips over and discards <var>n</var", "answers": ["                if( b >= 0 ) {"], "all_classes": null, "length": 9989}
{"pred": "            if (b == null)  return a;\n            return new ToolkitEventMulticaster(a, b);\n        }\n        static AWTEventListener remove(AWTEventListener a,\n                                       AWTEventListener b) {\n            if (a == null)  return b;\n            if (b == null)  return a", "answers": ["            if (b == null)  return a;"], "all_classes": null, "length": 10923}
{"pred": "\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfrom.Send( new AdminNotice( \"Searching for accounts...\" ) );\n\t\t\t\t\t\t\tfrom.Send( new AdminNotice( \"Searching for accounts...\" ) );\n\t\t\t\t\t\t\tfrom.Send( new AdminNotice( \"Searching for accounts...\" ) );\n\t\t\t\t\t\t\tfrom.Send( new AdminNotice( \"Searching for accounts...\" ) );\n\t\t\t\t\t\t", "answers": ["\t\t\t\t\t\t\t\tresults.Sort( AccountComparer.Instance );"], "all_classes": null, "length": 9034}
{"pred": "            if (result!= RESULT.OK)\n            {\n                return result;\n            }\n            soundnew = new Sound();\n            soundnew.setRaw(soundraw);\n            sound = soundnew;\n            return result;\n        }\n        public RESULT createDSPByType       (string type, ref IntPtr dsp)\n        {\n            return FM", "answers": ["            if (result != RESULT.OK)"], "all_classes": null, "length": 14660}
{"pred": "                tbl_ix = data[base] & 255;\n            base++;\n            int huffbits = 0;\n            int huffbits_len = 0;\n            int huffbits_pos = 0;\n            int huffbits_count = 0;\n            int huffbits_max = 0;\n", "answers": ["                tbl_ix = data[base] & 255;"], "all_classes": null, "length": 16751}
{"pred": "                this.AddButton(x3, 220, 0xFAB, 0xFAD, 405, GumpButtonType.Reply, 0);\n                // add the team challenge button\n                this.AddButton(x3, 245, 0xFAB, 0xFAD, 406, G", "answers": ["                    this.AddLabel(x2 + 30, 215, 55, a.Text(200233));  // \"DeathBall\""], "all_classes": null, "length": 8017}
{"pred": "            TemplateDT = new PPersonTable();\n            TemplateDT = new PPersonTable();\n            TemplateDT = new PPersonTable();\n            TemplateDT = new PPersonTable();\n            TemplateDT = new PPersonTable();\n            TemplateDT = new PPersonTable();\n            TemplateDT = new PPersonTable();\n           ", "answers": ["            TemplateRow = TemplateDT.NewRowTyped(false);"], "all_classes": null, "length": 8754}
{"pred": "\t\t/* free internal buffers */\n\t\tbs.free_bitstream(gfp);\n\t\t/* free frontend */\n\t\tgfp.frontend.free(gfp);\n\t\t/* free frontend */\n\t\tgfp.frontend.free(gfp);\n\t\t/* free frontend */\n\t\tgfp.frontend.free(gfp);\n\t\t/* free", "answers": ["\t\tif (gfp != null && gfp.class_id == LAME_ID) {"], "all_classes": null, "length": 8018}
{"pred": "                if (AllSubmissionsOK == false)\n                {\n                    TVerificationResultCollection DowngradedVerificationResultCollection = new TVerificationResultCollection();\n                    DowngradedVerificationResultCollection.AddCollection(AVerificationResult);\n                    DowngradedVerificationResultCollection.DowngradeToScreenVerificationResults();\n                    return false;\n                }\n                else\n               ", "answers": ["                if (AllSubmissionsOK == false)"], "all_classes": null, "length": 8128}
{"pred": "```\n            elif name == \"requires\":\n                value = test.testname.requires.show()\n            elif name == \"architectures\":\n                value = test.testname.architectures.show()\n            elif name == \"releases\":\n                value = test.testname.releases.show()\n            elif name == \"version\":\n               ", "answers": ["                    elif name == \"requires\":"], "all_classes": null, "length": 9136}
