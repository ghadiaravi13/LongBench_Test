{"pred": "\t\t\tprimerak.setInventarnaKnjiga(invKnjPanel.getCode());\n\t\t\tprimerak.setPodlokacija(podlokacijaPanel.getCode());\n\t\t\tprimerak.setBrojPrimeraka((Integer)raspodelaSpinner.getValue());\n\t\t\tprimerak.setPreostalo(Integer.parseInt(preost", "answers": ["\t\t\tString invKnj = invKnjPanel.getCode();"], "all_classes": null, "length": 451}
{"pred": "              SubCriteria[\"GroupID\"] = new SearchCondition<String>(\"GroupID\");\n              }\n              return (ISearchCondition<String>)SubCriteria[\"GroupID\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"WorkQueueID\")]\n        public ISearchCondition<Int32", "answers": ["                 SubCriteria[\"GroupID\"] = new SearchCondition<String>(\"GroupID\");"], "all_classes": null, "length": 475}
{"pred": "\t\taliases.Add (\"GB2312\", \"gb2312\");\n\t\taliases.Add (\"GB2312-80\", \"gb2312\");\n\t\taliases.Add (\"GB2312-80-1990\", \"gb2312\");\n\t\taliases.Add (\"GB2312-80-1990:199", "answers": ["\t\taliases.Add (\"GBK\", \"gb2312\");"], "all_classes": null, "length": 545}
{"pred": "        if source.get() == '[' + class_name:\n            return class_contents\n    return None\n```\nThe final answer is: \n```\ndef _parse_char_class(source):\n    for class_name, class_contents in _BRACKET_CHARACTER_CLASSES.iteritems():\n        if source.get() == '[' + class_name:\n           ", "answers": ["        if _parse_verbatim(source, '[:%s:]' % class_name):"], "all_classes": null, "length": 850}
{"pred": "#izracunavanje rezultata za svaki slika u test setu\n#izracunavanje rezultata za svaki slika u test setu\n#izracunavanje rezultata za svaki slika u test setu\n#izracun", "answers": ["check = numbers[5][123]"], "all_classes": null, "length": 502}
{"pred": "        sendBean(\"A\", 0, 0L);\n        assertEquals(0L, listener.assertOneGetNewAndReset().get(\"longBoxed\"));\n        sendBean(\"A\", null, null);\n        assertEquals(null, listener.assertOneGetNewAndReset().get(\"longBoxed\"));\n        sendBean", "answers": ["        sendBean(\"A\", null, null);"], "all_classes": null, "length": 756}
{"pred": "                item.setExpanded(true);\n                item.setSelection(true);\n                break;\n            }\n            if (item.getItemCount() > 0) {\n                restoreSelection(selectionText, item.getItems());\n            }\n        }\n    }\n    private void saveSettings() {\n        SettingsSaver.saveSettings(fetcherGui);\n    }\n    private", "answers": ["                tree.setSelection(new TreeItem[] { item });"], "all_classes": null, "length": 1800}
{"pred": "        nilCard.setText(Language.INSTANCE.localizeWithReplace(\"instance.nodisplay\", \"\\n\\n\"));\n    }\n} \nPlease complete the code given above. \nThe code is written in Java and it seems to be a part of a larger application. The code is for a tab in a GUI application that displays a list", "answers": ["        if (nilCard != null) {"], "all_classes": null, "length": 511}
{"pred": "\t\t\tsqrtAspect = (float) Math.sqrt(w * w + h * h);\n\t\t}\n\t}\n\tprivate void loadBitmap() throws IOException {\n\t\tif (file == null)\n\t\t\treturn;\n\t\tInputStream is = new FileInputStream(file);\n\t\tbitmap = BitmapFactory.decodeStream(is);\n\t\tis.close();\n\t\tif", "answers": ["\t\t\tfloat r = (w+h)/2f;"], "all_classes": null, "length": 1042}
{"pred": "            self.__repeat = (delay, interval)\n            self.__tick_id = gobject.timeout_add(10, self._tick_cb)\n        elif delay is None and self.__repeat[0] is not None:\n            self.__repeat = (None, None)\n            gobject.source_remove(self.__tick_id)\n", "answers": ["            self.__tick_id = gobject.timeout_add(10, self._tick_cb)"], "all_classes": null, "length": 703}
{"pred": "    logger.addHandler(logged_critical)\n    return logged_critical\ndef get_test_paths(test_paths, product, **kwargs):\n    if kwargs[\"test_paths\"] is None:\n        test_paths = testloader.TestPaths(test_paths)\n    else:\n        test_paths = testloader.TestPaths(kwargs[\"test_paths\"])\n    return test", "answers": ["    handler = handlers.LogLevelFilter(logged_critical, \"CRITICAL\")"], "all_classes": null, "length": 1196}
{"pred": "        if self.getState() == 'running':\n            self.log.error('Wavemeter busy')\n            return -1\n        # stop the measuring thread\n        self.sig_handle_timer.emit(False)\n        # stop the wavemeter\n        self._wavemeterdll.Operation(self._cCtrlStop) #stops", "answers": ["        if self.getState() == 'idle':"], "all_classes": null, "length": 885}
{"pred": "        List<String> mustStatusNames = new LinkedList<String>();\n        mustStatusNames.add(\"available\");\n        mustStatusNames.add(\"dnd\");\n        mustStatusNames.add(\"xa\");\n        mustStatusNames.add(\"offline\");\n        mustStatusNames.add(\"unknown\");\n        mustStatusNames.add(\"proposed\");\n        must", "answers": ["        List<String> requiredStatusNames ="], "all_classes": null, "length": 678}
{"pred": "```csharp\nawait cmd.Execute();\n```\nThis line of code is missing. It should be added to complete the code snippet. \n\nHere is the complete code snippet:\n\n```csharp\nawait cmd.Execute();\n```csharp\n```csharp\n            }\n            poll.Options = options;\n            ActivePoll = poll", "answers": ["                            await cmd.ExecuteArmed(this, null);"], "all_classes": null, "length": 3344}
{"pred": "\t\t\tthis.label1.Location = new System.Drawing.Point(6, 52);\n\t\t\tthis.label1.Name = \"label1\";\n\t\t\tthis.label1.Size = new System.Drawing.Size(148, 18);\n\t\t\tthis.label1.TabIndex = 0;\n\t\t\tthis.label1.Text = \"Description\";\n\t\t\tthis.label1", "answers": ["\t\t\tthis.label1.Location = new System.Drawing.Point(6, 51);"], "all_classes": null, "length": 1316}
{"pred": "\t\t\t\tif (throwOnMissing)\n\t\t\t\t\tthrow new Exception (\"Assembly not found: \" + name);\n\t\t\t\telse\n\t\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\tclass CompoundFoundry : Foundry\n\t\t{\n\t\t\tArrayList foundries;\n\t\t\tstring name;\n\t\t\tpublic CompoundFoundry (string name)\n\t\t", "answers": ["\t\t\t\tif (assembly == null) {"], "all_classes": null, "length": 1336}
{"pred": "        if self.interface == 'all':\n            self.param_type = INTERFACE_ALL\n        elif get_interface_type(self.interface):\n            self.param_type = INTERFACE_TYPE\n        else:\n            self.param_type = INTERFACE_FULL_NAME\n    def main(self):\n        \"\"\"Main function\"\"\"\n        self.check_params()\n        self.get_intf_param", "answers": ["        if self.interface == 'all':"], "all_classes": null, "length": 1718}
{"pred": "    for (int i = 0; i < s.length(); i++) {\n      if (!Character.isDigit(s.charAt(i)) && s.charAt(i)!= ',') return false;\n    }\n    return true;\n  }\n  // Helper method to test for all numerics and commas.\n  private boolean hasOnly", "answers": ["    for (int i = 0; i < s.length(); i++)"], "all_classes": null, "length": 939}
{"pred": "\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t\t/// <summary>\n\t\t/// Records a staff member deleting an item\n\t\t/// </summary>\n\t\t/// <param name=\"auction\">The auction</param>\n\t\t/// <param", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "                            sead_partnn_l = getNeighbours(nodemap, c_sead);\n                        }\n                        if (sead_partnn_l!= null) {\n                            for (int k = 0; (k < sead_partnn_l.size() &&!force_kill_path); k++) {\n                                Integer c_se", "answers": ["                            if (c_sead == start || c_sead == stop) {"], "all_classes": null, "length": 1426}
{"pred": "\t\t\tthis.ResumeLayout(false);\n\t\t\tthis.PerformLayout();\n\t\t\tthis.PerformLayout();\n\t\t\tthis.PerformLayout();\n\t\t\tthis.PerformLayout();\n\t\t\tthis.PerformLayout();\n\t\t\tthis.PerformLayout();\n\t\t\tthis.PerformLayout();\n\t\t\tthis.PerformLayout();\n\t\t\tthis.PerformLayout();\n\t\t\tthis.PerformLayout();\n\t\t\tthis.PerformLayout();\n\t\t\tthis.PerformLayout();\n\t\t\tthis.PerformLayout();\n\t\t\tthis.PerformLayout();\n\t\t\tthis.PerformLayout", "answers": ["\t\t\tthis.Size = new System.Drawing.Size(371, 300);"], "all_classes": null, "length": 825}
{"pred": "    behavior = {\n        'observations': observations,\n        'translations': translations_dict,\n        'tour': tourlist,\n        }\n    with open(OutFileNames.behavior, 'w') as f:\n        json.dump(behavior, f, indent=4)\n        \n    return behavior\ndef writeBehaviorCSV(", "answers": ["    behavior_list = [ checkOnTour(tourlist, o,"], "all_classes": null, "length": 609}
{"pred": "```python\nwith Html(\"div\", class_=\"content\", id='subsection narrative') as sec8:\n```\nThis line of code is the next step in the narrative web page generator. It is used to create a new section in the HTML content of the page. The section will be used to display additional information", "answers": ["        footer = self.write_footer(None)"], "all_classes": null, "length": 960}
{"pred": "            while abs(m.relative_alt) < max_relalt_mm:\n                self.mav.wait_heartbeat()\n                m = self.mav.recv_match(type='GLOBAL_POSITION_INT', blocking=True)\n            self.progress(\"Rotor runup complete\")\n            self.progress(\"TAKEOFF\")\n            self.change_mode('GUIDED')\n           ", "answers": ["            if abs(m.relative_alt) > max_relalt_mm:"], "all_classes": null, "length": 577}
{"pred": "\t\t\t\t\t\t\tif (strings[0] == \"GlobalSettings\")\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar globalSettings = Session.GlobalSettings.Deserialize(node.Value);\n\t\t\t\t\t\t\t\torderManager.LobbyInfo.GlobalSettings = globalSettings;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tGame.SyncLobbyInfo();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\tcase \"SyncLobby", "answers": ["\t\t\t\t\t\t\tif (strings[0] == \"GlobalSettings\")"], "all_classes": null, "length": 591}
{"pred": "\t\t\t\tSystem.arraycopy(src, srcOffset, buf, 0, byteCount);\n\t\t\t\tbufferedPacket.setPayload(buf);\n\t\t\t\tstate = SocketReadState.READ_NOTHING;\n\t\t\t\treturn bufferedPacket;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\treturn null;\n\t}\n\t/**\n\t * This function will try to read", "answers": ["\t\t\t\tfor (int i = 0; i < byteCount; i++) {"], "all_classes": null, "length": 783}
{"pred": "        opiRuntimeToolBarDelegate = new OPIRuntimeToolBarDelegate(this);\n        opiRuntimeToolBarDelegate.init(site, input);\n        if (persist)\n        {\n            final IMemento memento = createMemento();\n            if (memento!= null)\n            {\n                saveMemento(memento);\n            }\n        }\n   ", "answers": ["        if (opiRuntimeToolBarDelegate != null)"], "all_classes": null, "length": 813}
{"pred": "            if (launcher!= null && launcher.isMenuVisible()) {\n                launcher.showMenu(e);\n            }\n        }\n    }\n} \nPlease complete the code given above. \n```java\npackage org.openstreetmap.josm.gui.widgets;\n\nimport java.awt.Component;\nimport java.awt.Dimension;\nimport java.awt.Toolkit;\n", "answers": ["            if (launcher != null && !e.isPopupTrigger()) {"], "all_classes": null, "length": 933}
{"pred": "def test_clean_name_two_word_surnames(self): \n    names = [\n        (\"EDE COOPER \\nPalmer\", \"Palmer Ede Cooper\"),\n        (\"VAN DULKEN \\nRichard Michael\", \"Richard Michael Van Dulken\"),\n        (\"ARMSTRONG LILLEY \\nL", "answers": ["            (\"O`NEAL \\nCarol Joy\", \"Carol Joy O'Neal\"),"], "all_classes": null, "length": 919}
{"pred": "            sort_by, sort_order = sort\n            if sort_by == 'uploadDate':\n                key_func = itemgetter('upload_date')\n            elif sort_by == 'displayname':\n                key_func = itemgetter('displayname')\n            else:\n                raise ValueError(\"Invalid sort_by value: %s\" % sort", "answers": ["            if sort[0] == 'uploadDate':"], "all_classes": null, "length": 1853}
{"pred": "            }\n        }\n    }\n}\n```\nThe final answer is: \n```\n            public struct Enumerator : IEnumerator<T>\n            {\n                readonly SyncList<T> list;\n                int index;\n                public T Current { get; private set; }\n                public Enumerator(SyncList<T> list)\n                {\n                    this", "answers": ["                index = -1;"], "all_classes": null, "length": 1053}
{"pred": "                parentpath = parentpath[len(cwd):]\n                if parentpath.endswith(os.sep):\n                    parentpath = parentpath[:-1]\n    return unionrepository(ui, path, parentpath)```python\n# unionrepo.py - repository class for viewing union of repository changesets\n#\n# Derived from bundlerepo", "answers": ["                parentpath = parentpath[len(cwd):]"], "all_classes": null, "length": 795}
{"pred": "        if sys.version_info[0] == 2:\n            kwargs.pop('sinfo', None)\n        record = logging.LogRecord(name, level, fn, lno, msg, args, exc_info,\n                                   **kwargs)\n        record.__dict__.update(structured)\n        return record\nclass StructuredFormatter", "answers": ["        if sys.version_info[0] == 2:"], "all_classes": null, "length": 897}
{"pred": "                                m.Skills.Spellweaving.BaseFixedPoint += 1;\n                                m.Mana -= 20;\n                            }\n                            else\n                            {\n                                m.SendMessage(\"You have reached the skill cap for that skill\");\n                            }\n                        }\n                        else\n                        m.SendMessage(\"You need 100gp in your pack to", "answers": ["                                m.Mana -= 20;"], "all_classes": null, "length": 569}
{"pred": "            for key, value in hash_.items():\n                if key in model._meta.fields:\n                    fields[key] = value\n                else:\n                    extra_attrs[key] = value\n            model_obj = model.objects.get(**fields)\n            for key, value in extra_attrs.items():\n                setattr(model_obj, key,", "answers": ["            for k, v in hash_.iteritems():"], "all_classes": null, "length": 546}
{"pred": "            return page_not_authorized(req=req, referer=\"/edit\",\n                                       text=auth_message, navtrail=navtrail)\n        recid = argd['recid']\n        body, errors, warnings = perform_request_newticket(ln, recid)\n        return page(title = _(\"New Ticket\"),\n                    body =", "answers": ["            return page_not_authorized(req=req, referer=\"/edit\","], "all_classes": null, "length": 756}
{"pred": "```\n      use_tty:\n        version_added: '2.5'\n        default: 'yes'\n        description: add -tt to ssh commands to force tty allocation\n        env: [{name: ANSIBLE_SSH_USETTY}]\n        ini:\n          - section: ssh_connection\n            key:", "answers": ["        - {key: usetty, section: ssh_connection}"], "all_classes": null, "length": 968}
{"pred": "\t\tfor(int x = 0; x < DataCollection.count(); x++)\n\t\t{\n\t\t\tint index = DataCollection.add();\n\t\t\tdataString += \"RSNO\" + ims.dto.NASMessageCodes.ATTRIBUTEVALUESEPARATOR + DataCollection.get(x).Rsno;\n\t\t\tdataString += ims.dto.NAS", "answers": ["\t\tWardlistRecord data = (WardlistRecord)DataCollection.get(0);"], "all_classes": null, "length": 1476}
{"pred": "            record_add_field(rec, '300', subfields=[('a', page_count)])\n        abstract = self.get_abstract(xml)\n        if abstract:\n            record_add_field(rec, '520', subfields=[('a', abstract)])\n        keywords = self.get_keywords(xml)\n        if keywords:\n            record_add_field(rec", "answers": ["            record_add_field(rec, '300', subfields=[('a', page_count)])"], "all_classes": null, "length": 1283}
{"pred": "                assertEquals(A.getQuick(r, c), B.getQuick(c, r));\n            }\n        }\n    }\n    public void testViewRow() {\n        IntMatrix1D row = A.viewRow(NROWS / 2);\n        assertEquals(NCOLUMNS, row.size());\n        for (int c = 0;", "answers": ["                assertEquals(A.getQuick(r, NCOLUMNS - 1 - c), B.getQuick(r, c));"], "all_classes": null, "length": 1319}
{"pred": "# Send Unit Data\n```\nThe final answer is: \n```\n# Send Unit Data\n(PacketField(\"commandSpecificData\", ENIPSendUnitData, ENIPSendUnitData),\n                 lambda pkt: pkt.commandId == 0x70),\n                # Indicate Status\n                (PacketField(\"", "answers": ["                 lambda pkt: pkt.commandId == 0x6f),"], "all_classes": null, "length": 625}
{"pred": "\t\t//... rest of the code...\n}\n```\nThe code is written in Java and is part of a geospatial batch processing system. The `harvest` method is responsible for processing a GeoTIFF file and creating a Metoc XML file based on a template. The method takes several parameters, including", "answers": ["\t\tfinal CoordinateReferenceSystem crs = reader.getCrs();"], "all_classes": null, "length": 805}
{"pred": "            ((Creature) e).setTamed(false);\n        }\n        \n        return e;\n    }\n}\n```\nThe code is almost complete, but there are a few issues that need to be addressed. The code is an enum for MobArena, a Minecraft plugin, and it's used to spawn creatures in the game", "answers": ["            Creature c = (Creature) e;"], "all_classes": null, "length": 386}
{"pred": "\t\t\tMemoryStream ms = new MemoryStream(stream);\n\t\t\tBinaryReader bin = new BinaryReader(ms);\n\t\t\tushort* line = (ushort*)bd.Scan0;\n\t\t\tint delta = bd.Stride >> 1;\n\t\t\tfor( int y = 0; y < height; ++y, line += delta", "answers": ["\t\t\tushort* line = (ushort*)bd.Scan0;"], "all_classes": null, "length": 1243}
{"pred": "                    if (house == null)\n                        house = BaseHouse.FindHouseAt(new Point3D(m.X, m.Y + 1, 127), m.Map, 16);\n                    if (house!= null)\n                        bonus = 50.0;\n                }\n                //int range = 18 - (int", "answers": ["                    if (house == null)"], "all_classes": null, "length": 585}
{"pred": "\t\t\t\t\t{\n\t\t\t\t\t\tConsole.WriteLine(displaySet.Name);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthrow;\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tDispose(displaySets);\n\t\t\t\tDispose(seriesCT, seriesPET, seriesPETCor);\n\t\t\t}\n\t\t}\n\t\t[Test]\n\t\tpublic void TestPETFusion", "answers": ["\t\t\t\t\t\tConsole.WriteLine(\" > {0}\", displaySet.Descriptor.Description);"], "all_classes": null, "length": 803}
{"pred": "    \"\"\" Find the appropriate reader for a file \"\"\"\n    ext = os.path.splitext(fname)[1][1:]\n    if ext in supported_extensions():\n        return supported_extensions()[ext]\n    else:\n        raise ValueError(\"File %s has unknown extension %s\" % (fname, ext))\ndef read_timestamps(fname):\n", "answers": ["    exts = supported_extensions()"], "all_classes": null, "length": 653}
{"pred": "\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\t\tif (cgn.depth == -1)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcgn.depth = 0;\n\t\t\t\t\t\t\tmore = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (cgn.depth > maxDepth)\n\t\t\t\t\t\t\tmaxDepth = cgn.depth;\n\t\t\t\t\t\t// place", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "\t\t\t    case 188: // -/_ key\n                    if (down)\n                    {\n                        if (CAPS)\n                            Program.keyH_ENT = (Program.keyH_ENT & (~8));\n                        else\n                        {\n                            Program.keyH_ENT = (Program.keyH_ENT & (~4));\n                            Program.keyB_SPC", "answers": ["\t\t\t    case 189: // -/_ key"], "all_classes": null, "length": 1748}
{"pred": "out_list += [weights_dmat_all[index]]\nout_comment += ['Weights of distortion matrix']\nout_units += ['']\nresults.write(\n    out_list,\n    names=out_names,\n    header=header,\n    comment=out_comment,\n    units=out_units,\n    extname='DATA')\nresults.close()\nt3 = time", "answers": ["        out_list += [weights_dmat_all[index]]"], "all_classes": null, "length": 1374}
{"pred": "    obj = obj.lstrip(\"\\ufeff\") if obj.startswith(\"\\ufeff\") else obj\n\nThis is the next line of code in the given snippet. It checks if the input string `obj` starts with a BOM (Byte Order Mark) character (`\\ufeff`) and removes it if present. This", "answers": ["    obj = obj.lstrip(\"\\ufeff\")"], "all_classes": null, "length": 676}
{"pred": "\t\tif (orig == null ||!orig.exists() || orig.length() == 0)\n\t\t\treturn;\n\t\tString newUuid = mDbHelper.getBookUuid(newId);\n\t\tcopyFileToCoverImageIfMissing(orig, newUuid);\n\t}\n\t/**\n\t * Copy the UUID-based cover from its current location", "answers": ["\t\tif (orig == null || !orig.exists() || orig.length() == 0)"], "all_classes": null, "length": 866}
{"pred": "            strength += calculateBestTableStrength(opponent.getValue());\n        }\n        tableStrengthScore.setScore(Collections.singletonList(strength));\n        tableStrengthScore.setPlayer(player);\n        this.addAScore(tableStrengthScore);\n    }\n}\npackage usspg31.tourney.model;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport", "answers": ["            for (PlayerScore scoreTable : this.scoreTable) {"], "all_classes": null, "length": 1212}
{"pred": "            res = c.get(\"/\")\n            res.get_data()\n            assert res.status_code == 401\n    def _make_auth_headers(self, password):\n        auth = base64.b64encode(f\"{password}:OnionShare\".encode()).decode()\n        return {\"Authorization\": f\"Basic {auth}\"}\n    def", "answers": ["            res = c.get(\"/\")"], "all_classes": null, "length": 919}
{"pred": "```java\nnsClientService = mLocalBinder.getService();\n```\nThis line of code is used to get the NSClientService instance from the LocalBinder. The LocalBinder is a binder that is used to communicate with the NSClientService. The getService() method of the LocalBinder returns the NSClientService instance.", "answers": ["                nsClientService = mLocalBinder.getServiceInstance();"], "all_classes": null, "length": 516}
{"pred": "```python\n            # Now we have the makefile, we can build the OpenSSL library\n            # and the Python extensions.\n            if arch == \"x86\":\n                # 32bit build\n                os.system(\"nmake -f \"+makefile+\" \"+make_flags)\n            else:\n                # 64", "answers": ["            if arch == \"amd64\":"], "all_classes": null, "length": 982}
{"pred": "\t\tfor(int i=0; i<length; i++){\n\t\t\tif(i>=tempCostList.Length){\n\t\t\t\ttowerList[index].baseStat.costs[i]=0;\n\t\t\t}\n\t\t\telse{\n\t\t\t\ttowerList[index].baseStat.costs[i]=tempCostList[i];\n\t\t\t}\n\t\t", "answers": ["\t\tfor(int i=0; i<length; i++){"], "all_classes": null, "length": 3890}
{"pred": "\t\t\t\tAddRes( index, typeof( BrilliantAmber ), 1032697, 1, 1044240 );\n\t\t\t\tAddRecipe( index, 34 );\n\t\t\t\tSetNeededExpansion( index, Expansion.ML );\n\t\t\t\tindex = AddCraft( typeof( RuneAxe ), 1011082, 107", "answers": ["\t\t\t\tAddRes( index, typeof( BrilliantAmber ), 1032697, 1, 1044240 );"], "all_classes": null, "length": 3677}
{"pred": "def test_gwt_plurals(self):  # pylint: disable=unused-argument\n    \"\"\"Test conversion of gwt plural units.\"\"\"\n    propsource = \"\"\"\nmessage-multiedit-header={0,number} selected\nmessage-multiedit-header[none]=Edit\nmessage-multiedit-header[one]={0", "answers": ["        options = self.help_check(options, \"-P, --pot\")"], "all_classes": null, "length": 1336}
{"pred": "\t\t\tforeach (object member in members) {\n\t\t\t\tif (member is Signal) {\n\t\t\t\t\tSignal sig = member as Signal;\n\t\t\t\t\tsw.WriteLine (\"\\t\\tpublic event \" + sig.CName + \"EventHandler \" + sig.CName + \";\");\n\t\t\t\t} else if (member is VirtualMethod) {\n\t\t\t\t\tV", "answers": ["\t\t\tforeach (Signal sig in sigs.Values) {"], "all_classes": null, "length": 1298}
{"pred": "    module = AnsibleModule(argument_spec=fields)\n    try:\n        from fortiosapi import FortiOSHandler\n        fos = FortiOSHandler(module)\n        is_error, has_changed, result = fortios_wireless_controller(module.params, fos)\n    except Exception as sh:\n        if has_changed:\n            module", "answers": ["    module = AnsibleModule(argument_spec=fields,"], "all_classes": null, "length": 1009}
{"pred": "    node.setLeaf(leaf);\n  }\n  public void setLoaded(boolean loaded) {\n    this.loaded = loaded;\n  }\n  public void setLoading(boolean loading) {\n    this.loading = loading;\n  }\n  public void setPresentableTextContainer(Element presentableTextContainer) {\n    this.presentableTextContainer =", "answers": ["    if (node instanceof MutableNode) {"], "all_classes": null, "length": 568}
{"pred": "            return GroupByWithMinSize(prevChildren, c => c.Published.HasValue? c.Published.Value.Date.ToString(\"yyyy-MM-dd\") : \"-\")\n               .Select(g => childFactory(query.Parent, g.Key, \"virtual-grouping/\" + g.Key, () => g));\n        }\n        private IEnumerable<Content", "answers": ["            var page = prevChildren.Take(StartPagingTreshold).ToList();"], "all_classes": null, "length": 781}
{"pred": "        soaResponse = dns.message.make_response(query)\n        soaResponse.use_edns(edns=False)\n        soaResponse.answer.append(soa)\n        responses.append(soaResponse)\n        response = dns.message.make_response(query)\n        response.use_edns(edns=False)\n        content = \"\"\n        for i in", "answers": ["        soaResponse = dns.message.make_response(query)"], "all_classes": null, "length": 648}
{"pred": "        if (kind == null) {\n            throw new IllegalArgumentException(\"Unknown javaccKind: \" + javaccKind);\n        }\n        return kind;\n    }\n    public int javaccKind() {\n        return javaccKind;\n    }\n    public TokenCategory category() {\n        return category;\n    }\n    public String", "answers": ["        if (kind == null) {"], "all_classes": null, "length": 524}
{"pred": "        }\n        public Control GetLabelForPercentageControl()\n        {\n            return this.FindControlRecursive(PercentageControlID) as Label;\n        }\n        public Control GetLabelForTitleControl()\n        {\n            return this.FindControlRecursive(\"LabelForTitle\") as Label;\n        }\n        #endregion\n    }\n}\n```\nThe", "answers": ["            return this.FindControlRecursive(DescriptionControlID) as Label;"], "all_classes": null, "length": 450}
{"pred": "```python\n            query_string = urllib.urlencode(query_args)\n            path = path + '?' + query_string\n```\n```python\n        if self.is_secure:\n            protocol = self.protocol\n        else:\n            protocol = 'http'\n        url = '%s://%s%s' % (protocol, host,", "answers": ["            path += '?' + query_args"], "all_classes": null, "length": 1198}
{"pred": "\t\t\t\tcanvas.drawBitmap(tiles[i].getBitmap(), left, top, null);\n\t\t\t}\n\t\t}\n\t}\n\tprivate void drawPath(Canvas canvas, double localScale){\n\t\tfor(int i = 0; i < edges.size(); i++){\n\t\t\tGraphEdge edge = edges.get(i);\n\t\t\tLat", "answers": ["\t\t\t\tRectF destRect = new RectF(left, top, right, bottom);"], "all_classes": null, "length": 1184}
{"pred": "            HueInfo = new Dictionary<DyeType, Tuple<int, int>>();\n            HueInfo.Add(DyeType.None, new Tuple<int, int>(0, 0));\n            HueInfo.Add(DyeType.WindAzul, new Tuple<int, int>(0x1A, 0x1A));\n", "answers": ["            HueInfo = new Dictionary<DyeType, Tuple<int, int>>();"], "all_classes": null, "length": 535}
{"pred": "                this.alertDialog.show(MSGS.deleteCertificate(), MSGS.deleteCertificateConfirm(), new ConfirmListener() {\n                    @Override\n                    public void onConfirm() {\n                        RequestQueue.submit(c -> CertificateListTabUi.this.gwtCertificatesService.uninstallCertificate(selected.getAlias(), c.callback(result -> {\n                            CertificateListTabUi.this", "answers": ["                final Modal modal = new Modal();"], "all_classes": null, "length": 698}
{"pred": "\t\t\t\t\"        {0}\" +\n\t\t\t\t\"        Private Sub SomeMethod(Of T As  {{System.IComparable, System.ICloneable, New}}, S As System.IDisposable)(){0}\" +\n\t\t\t\t\"        End Sub{0}\" +\n\t\t\t\t\"    End Class{0}\" +\n\t\t\t", "answers": ["\t\t\t\t\"    {0}\" +"], "all_classes": null, "length": 1270}
{"pred": "            list.append(self.file + os.extsep + ext)\n        return list\n    def do_open(self, flags):\n        self.dbm = self.dbmmodule.open(self.file, flags)\n    def do_close(self):\n        self.dbm.close()\n    def open(self, flags, checkcount=False):\n        Open", "answers": ["            if os.access(self.file + os.extsep + ext, os.F_OK):"], "all_classes": null, "length": 1142}
{"pred": "        return \"ImageIcon: \" + description;\n    }\n    /**\n     * Returns the accessible description of the icon.\n     *\n     * @return the accessible description of the icon\n     */\n    public String getAccessibleDescription() {\n        return description;\n    }\n    /**\n     * Returns the accessible role of the icon", "answers": ["        if (description != null) {"], "all_classes": null, "length": 1934}
{"pred": "            all_plugins = self._bot.plugin_manager.getAllPlugins()\n        return '\\n'.join(['%s (%s)' % (plugin.name, plugin.documentation) for plugin in all_plugins])\n    @botcmd(admin_only=True)\n    def plugins(self, _, args):\n        \"\"\" list the current active plugin repositories\n       ", "answers": ["            all_plugins = self._bot.plugin_manager.get_all_plugin_names()"], "all_classes": null, "length": 833}
{"pred": "                \"vdom\": {\"required\": False, \"type\": \"str\"}\n            }\n        }\n    }\n    module = AnsibleModule(argument_spec=fields)\n    warnings = []\n    check_supported_fortios_version(module, warnings)\n    connection = Connection(module._socket_path, module)\n    if not connection:\n", "answers": ["                \"vdom\": {\"required\": False, \"type\": \"str\"}"], "all_classes": null, "length": 1164}
{"pred": "            throw new IOException();\n        }\n        fileDecoder = savedDecoder;\n    }\n    private native int readByte(Object fileDecoder);\n    private native int bytesRemain(Object fileDecoder);\n    private native int readBytes(Object fileDecoder, byte b[], int off, int len);\n    private native Object clone(Object fileDecoder", "answers": ["            throw new IOException();"], "all_classes": null, "length": 880}
{"pred": "\t\t\t\treturn originalObject!= null;\n\t\t\tcase ActivitydiagramPackage.TRACED_ACTIVITY__TRACE_SEQUENCE:\n\t\t\t\treturn traceSequence!= null &&!traceSequence.isEmpty();\n\t\t}\n\t\treturn super.eIsSet(featureID);\n\t}\n} \nPlease complete the code given above. \n\n```java\n/**\n */\npackage activity", "answers": ["\t\t\t\treturn originalObject != null;"], "all_classes": null, "length": 533}
{"pred": "\t\t// TODO: implement this method\n\t\treturn Collections.emptyList();\n\t}\n} \npackage org.opennms.netmgt.importer.operations;\n\nimport java.util.List;\n\nimport org.opennms.netmgt.model.OnmsNode;\nimport org.opennms.netmgt.model.OnmsNodeDao;\nimport org", "answers": ["\t\tList<Event> events = new LinkedList<Event>();"], "all_classes": null, "length": 888}
{"pred": "    if module.check_mode:\n        module.exit_json(changed=changed, queries=publication.executed_queries)\n    # If publication exists and we need to drop it:\n    if state == 'absent' and publication.exists:\n        changed = publication.drop(cascade=cascade)\n    # If publication exists and we need", "answers": ["    if state == 'present':"], "all_classes": null, "length": 2176}
{"pred": "\t\t\tint version = reader.ReadInt();\n\t\t\tif ( version == 0 )\n\t\t\t{\n\t\t\t\t// Add code here to handle version 0\n\t\t\t}\n\t\t}\n\t}\n}\n} \n/////////////////////////////////////////////////////\n//\n//Created by:  Morrigan and Ashlar, together forever.\n//\n/////////////////////////////////////////////////////\n```\nThe", "answers": ["\t\t\tint version = reader.ReadInt();"], "all_classes": null, "length": 737}
{"pred": "        return T.mean(T.sum(pre_sigmoid_nv * T.log(pre_sigmoid_nv) +\n                            (1 - pre_sigmoid_nv) * T.log(1. - pre_sigmoid_nv), axis=1))\n        # end-snippet-5\n    def train_RBM(self, train_set_x, learning", "answers": ["        of log(sigmoid(..)) and will not apply the wanted"], "all_classes": null, "length": 1545}
{"pred": "            return new TripChain(Person);\n        }\n        #endregion ITripChain Members\n    }\n}\n```\nThe final answer is: \n```csharp\npublic ITripChain Clone()\n{\n    return new TripChain(Person);\n}\n``` \nThis is the correct implementation of the Clone method in the TripChain class.", "answers": ["            ITripChain chain = (ITripChain)MemberwiseClone();"], "all_classes": null, "length": 798}
{"pred": "        super(edge);\n        role = new FigRole();\n        addPathItem(role, new PathItemPlacement(edge, role, 0, 5, -135, 5));\n        ordering = new FigOrdering();\n        addPathItem(ordering, new PathItemPlacement(edge, ordering, 0, ", "answers": ["        role = new FigRole();"], "all_classes": null, "length": 2539}
{"pred": "                    throw ex;\n                }\n            }\n        }\n    }\n}\n#endif\n```\nThe code is almost complete, but there are a few issues that need to be addressed. The code is missing the implementation of the `Dispose` method, which is required for the `IDisposable` interface. Additionally, the `Initialize", "answers": ["                    if (LogManager.ThrowExceptions) throw ex;"], "all_classes": null, "length": 849}
{"pred": "            name,checksum = checksums.get(block=False)\n            assert os.path.isfile( pjoin( cfg.webdav_backend_directory, name) )\n            with open(pjoin( cfg.webdav_backend_directory, name), \"rb\") as f:\n                m = hashlib.md5()\n                m.update( f.read", "answers": ["            name, checksum = checksums.get(block=False)"], "all_classes": null, "length": 599}
{"pred": "        stac = self.labels.setdefault(args[0], stac)\n        self.stack_count = stac\n        jump_size = self.jump_count\n        label_size = self.labels.get(args[0], 0)\n        if label_size!= jump_size:\n            raise StackMismatch(args[0], label_size, jump", "answers": ["        dest = args[0]"], "all_classes": null, "length": 655}
{"pred": "\t\t\t\tresult.append((ofs, \"\\x00\" * mem_len))\n\t\t\t\tlen -= mem_len\n\t\t\t\tofs += mem_len\n\t\t\t\tcontinue\n\t\t\tresult.append((ofs, self.data.read(cur.offset + prog_ofs, file_len)))\n\t\t\tlen -= file_len\n\t\t\tofs += file_len\n\t\treturn", "answers": ["\t\t\t\tresult += [DATA_ORIGINAL] * mem_len"], "all_classes": null, "length": 1032}
{"pred": "\t\t\twhile (startIndex!= -1) {\n\t\t\t\tint endIndex = value.indexOf(\"}\", startIndex);\n\t\t\t\tif (endIndex == -1) {\n\t\t\t\t\tthrow new IllegalArgumentException(\"Macro not closed!\");\n\t\t\t\t}\n\t\t\t\tString macroName = value.substring(startIndex + 2, endIndex);\n\t\t\t\tString macroValue = macroHandler.get", "answers": ["\t\t\tStringBuffer result = new StringBuffer();"], "all_classes": null, "length": 3860}
{"pred": "      elements.add(ASN1Boolean.encodeAsBoolean(false));\n    }\n    if (! includeAuthZEntry)\n    {\n      elements.add(ASN1Boolean.encodeAsBoolean(false));\n    }\n    if (attributes!= null)\n    {\n      final ArrayList<ASN1Element> attributeElements = new ArrayList<>(attributes.size());\n", "answers": ["      elements.add(new ASN1Boolean(TYPE_INCLUDE_AUTHN_ENTRY, false));"], "all_classes": null, "length": 1468}
{"pred": "\t\tfor(int x = 0; x < beans.length; x++)\n\t\t{\n\t\t\tcoll.add(beans[x].buildVo());\n\t\t}\n\t\treturn coll;\n\t}\n} \n//#############################################################################\n//#                                                                           #\n//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #\n", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 773}
{"pred": "\t\t\treturn new EmptyIterator<String>();\n\t\t}\n\t}\n}\npackage com.idevicesinc.sweetblue;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.Map;\nimport android.content.Context;\nimport com.idevicesinc.sweetblue.utils.EmptyIterator;\nimport com.idevicesinc.sweet", "answers": ["\t\t\treturn new EmptyIterator<String>();"], "all_classes": null, "length": 526}
{"pred": "            var serializer = GetResponseSerializer(contentType);\n            if (serializer == null)\n                throw new NotSupportedException(\"ContentType not supported: \" + contentType);\n            var httpRes = new HttpResponseStreamWrapper(httpResponse.OutputStream);\n            serializer(requestContext, response, httpRes);\n        }\n        public void DeserializeFromStream(IRequestContext", "answers": ["            var serializer = GetResponseSerializer(contentType);"], "all_classes": null, "length": 488}
{"pred": "        }\n    }\n    public void ShowPhoneCallRecord(string CallNumber)\n    {\n        if (serviceProxy == null)\n            throw new ApplicationException(LocalizedResourceManager.GetString(\"DotNetScript\", \"DynamicsSession.Error.NotLoggedIn\"));\n        Guid CallNumberGuid = Guid.Parse(CallNumber);\n        ShowPhoneCallRecord(CallNumber", "answers": ["            string CallNumberGuid = CallNumber.ToString();"], "all_classes": null, "length": 648}
{"pred": "        }\n    }\n} \npackage org.intermine.sql.query;\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\n/**\n * Subclass of ExplainResult specific to PostgreSQL.\n *\n * @author Matthew Wakeling\n * @author Andrew Varley\n", "answers": ["        text = text.substring(nextToken + 7);"], "all_classes": null, "length": 772}
{"pred": "        n = m + i16 - 2;\n        i27 = i26 + i16 - 1;\n        i29 = i28 + i16 - 1;\n        i25 = 1;\n        if ((paramInt1!= 0? 0 : 1)!= 0)\n", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "                if (constraintEntry.startsWith(\"keyUsage\")) {\n                    // keyUsage is not a constraint, it is a certificate extension\n                    // and is not handled by this class.\n                    continue;\n                }\n                Matcher keySizeMatcher = keySizePattern.matcher(constraintEntry);\n                Matcher denyAfterMatcher = denyAfterPattern", "answers": ["                if (debug != null) {"], "all_classes": null, "length": 983}
{"pred": "      ProxyInfo proxy_info = (ProxyInfo) proxyCell.getUserObject();\n      ConfigElement proxyElt = proxy_info.getProxyElement();\n      ConfigElement devElt = proxy_info.getDeviceElement();\n      int unit_number = proxy_info.getUnitNumber();\n      DefaultPort proxy_port = proxyCell.getPort();\n      Default", "answers": ["      ProxyInfo proxy_info = (ProxyInfo) proxyCell.getUserObject();"], "all_classes": null, "length": 2936}
{"pred": "                object obj = this.ViewState[\"SubmitText\"];\n                return (obj == null)? true : (bool)obj;\n            }\n            set\n            {\n                this.ViewState[\"SubmitText\"] = value;\n            }\n        }\n        /// <summary>\n        /// True to submit value of selected items\n        ///", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "```python\ndef create_new_filesystem(self, new_path):\n    \"\"\"Creates a collection starting from a root directory.\n    Args:\n        new_path: The path to recursively search for the collection within.\n    Returns:\n        None\n    \"\"\"\n    os.mkdir(new_path)\n    for artist in self.collection:\n        artist", "answers": ["                for song in self.collection[artist][album]:"], "all_classes": null, "length": 826}
{"pred": "        SecurityManager sm = System.getSecurityManager();\n        if (sm!= null)\n            sm.checkPermission(SecurityConstants.GET_CLASSLOADER_PERMISSION);\n    }\n    private static void checkForDuplicatePkgs(Configuration cf,\n                                              Function<String, ClassLoader> clf)\n    {\n        Map<String, ClassLoader> map =", "answers": ["        SecurityManager sm = System.getSecurityManager();"], "all_classes": null, "length": 3987}
{"pred": "            order.ShippingStatusId = (int)ShippingStatus.Shipped;\n\t\t\t}\n\t\t\torder.OrderStatusId = (int)OrderStatus.Complete;\n\t\t\t_orderService.UpdateOrder(order);\n\t\t\t//add a note\n\t\t\torder.OrderNotes.Add(new OrderNote()\n\t\t\t{\n\t\t\t\tNote = TNote", "answers": ["\t\t\t\torder.ShippingStatusId = (int)ShippingStatus.Delivered;"], "all_classes": null, "length": 5265}
{"pred": "        AutoNumberingScheme autoNumberingScheme = new AutoNumberingScheme();\n        autoNumberingScheme.initialize();\n        autoNumberingScheme.setSchemeName(schemeName);\n        autoNumberingScheme.setSchemeClassName(schemeClassName);\n        autoNumberingScheme.setFormatName(formatName);\n        autoNumberingScheme.set", "answers": ["        AutoNumberingScheme ans = new AutoNumberingScheme();"], "all_classes": null, "length": 5629}
{"pred": "\t\t\tAssert.That (source.SingleOrDefault (), Is.EqualTo (0));\n\t\t}\n\t\t[Test]\n\t\tpublic void SingleOrDefault_SourceWithOneElement_ReturnsSingleElement ()\n\t\t{\n\t\t\tvar source = Read (1);\n\t\t\tAssert.That (source.SingleOrDefault (), Is.EqualTo (1));\n\t\t}\n\t\t[Test]\n\t", "answers": ["\t\t\tvar source = Read<int> ();"], "all_classes": null, "length": 5586}
{"pred": "\t\t\t\t\tArrayList<String> valuesList = new ArrayList<String>();\n\t\t\t\t\tArrayList<String> domainsList = new ArrayList<String>();\n\t\t\t\t\tArrayList<String> functionsList = new ArrayList<String>();\n\t\t\t\t\tfor (int i = 0; i < tempValues.length; i++) {\n\t\t\t\t\t\tString v = tempValues[i];\n\t\t\t\t\t\tString d = temp", "answers": ["\t\t\t\t\tArrayList<String> valuesList = new ArrayList<String>();"], "all_classes": null, "length": 4724}
{"pred": "        return self._conf_helper('sp', options)\n    def _create_devs(self):\n        self.crdg = scpiDevice(getstr='CRDG? 1', str_type=float)\n        self.enabled_list = MemoryDevice(['1', '2'])\n        self.thermocouple = scpi", "answers": ["        if dev_obj == self.fetch:"], "all_classes": null, "length": 4119}
{"pred": "    if (success) {\n      // if the upload was successful, then the sketch is now\n      // in the board's memory, so we can now delete the\n      // temporary build folder\n      Base.deleteFolder(tempBuildFolder);\n      // and the sketch is now in the board's memory, so we", "answers": ["    return success ? suggestedClassName : null;"], "all_classes": null, "length": 6878}
{"pred": "            Workplane().box(1,1,1).edges(\"+Z\").fillet(0.2)\n        Fillets are one of the cases where you may need to use the add method to select several\n        edges. For example, this example creates a 3-walled corner, by filleting three", "answers": ["            s = Workplane().box(1,1,1).faces(\"+Z\").edges().fillet(0.1)"], "all_classes": null, "length": 4053}
{"pred": "            sleep(0.01)\n        # Reading FIFO count\n        fifoCount = self.getFIFOCount()\n        #print('Current FIFO count = %s' % fifoCount)\n        # Resetting FIFO\n        self.resetFIFO()\n        # Writing final memory update 6/7 (function unknown)\n", "answers": ["            fifoCount = self.getFIFOCount()"], "all_classes": null, "length": 6204}
{"pred": "```python\ndef bulk_print_memberships(names):\n    if names and 'names' in names:\n        for name in names['names']:\n            item = frappe.get_doc(\"Item\", name)\n            if item:\n                print_item(item)\n            else:\n                print(\"Item not found: \" + name)\n   ", "answers": ["\t\tnames = names['names']"], "all_classes": null, "length": 4346}
{"pred": "\t\t\t\twhile (itHistory.hasNext()) {\n\t\t\t\t\tFLRHistory history = (FLRHistory) itHistory.next();\n\t\t\t\t\tdata[i][ProjektReportFac.REPORT_PROJEKT_JOURNAL_OFFENE_HISTORIE] = history\n\t\t\t\t\t\t\t.getX_freetext();\n\t\t\t\t\tdata[i][ProjektReportFac", "answers": ["\t\t\t\twhile (itHistory.hasNext()) {"], "all_classes": null, "length": 4200}
{"pred": "                list.Add(1072375); // Set Item\n            }\n            if (this is SurgeShield && ((SurgeShield)this).Surge > SurgeType.None)\n                list.Add(1116175); // Surge Shield\n            if (this is SurgeShield && ((SurgeShield)this).Surge ==", "answers": ["                list.Add(1072378); // <br>Only when full set is present:\t\t\t\t"], "all_classes": null, "length": 6963}
{"pred": "         sb.append((char) ('a' + d - 10));\n      }\n      d = (c >> 6) & 0x3f;\n      if (d < 10) {\n         sb.append((char) ('0' + d));\n      } else {\n         sb.append((char)", "answers": ["         sb.append((char) ('a' + d - 10));"], "all_classes": null, "length": 4005}
{"pred": "\t\t\tswitch (type)\n\t\t\t{\n\t\t\t\tcase PacketTypes.PlayerInfo:\n\t\t\t\t\t// Handle player info packets\n\t\t\t\t\tbreak;\n\t\t\t\tcase PacketTypes.PlayerInfo2:\n\t\t\t\t\t// Handle player info 2 packets\n\t\t\t\t\tbreak;\n\t\t\t\tcase PacketTypes.PlayerInfo3:\n\t\t\t\t\t// Handle player info 3 packets", "answers": ["\t\t\tvar player = Players[e.Msg.whoAmI];"], "all_classes": null, "length": 4973}
{"pred": "    /* Build call for listOrganizationPublicTransportTrips */\n    private com.squareup.okhttp.Call listOrganizationPublicTransportTripsCall(String organizationId, String tripId, Integer departureTime, String sortBy, String sortDir, Long firstResult, Long maxResults, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody", "answers": ["        if (organizationId == null) {"], "all_classes": null, "length": 5074}
{"pred": "            X           -   array[0..N-1] - array of quadrature nodes,\n                            in ascending order.\n            W           -   array[0..N-1] - array of quadrature weights.\n          -- ALGLIB --\n             Copyright 12.05.2009 by Bochkan", "answers": ["            X           -   array[0..N-1] - array of quadrature nodes,"], "all_classes": null, "length": 4527}
{"pred": "        self.assertEqual(updated_block.children[0].version_agnostic(), block.children[0].version_agnostic())\n```\nThe code is a test case for the `SplitMongoModuleStore` class in the `xmodule.modulestore.split_mongo.split` module. The test case is checking the behavior of the `update", "answers": ["            'deleting_user', parent.version_agnostic(), category_queue[0]"], "all_classes": null, "length": 4289}
{"pred": "                                    + \"10^\" + i);\n                                }\n                                else {    //not \"log10\"-type label\n                                    if (this.expTickLabelsFlag) {\n                                        //if flag then\n                                        tickLabel = (((i < 0)? \"-\" : \"\")\n                                            + \"1e\" + i);  //", "answers": ["                                            + \"10^\" + Math.abs(i));"], "all_classes": null, "length": 4434}
{"pred": "              .map(PushedAsset::getIdentifier)\n              .collect(Collectors.toList());\n        assertTrue(newBundlePushedAssets.contains(template.getIdentifier()));\n    }\n    private static Collection<TestData> createContentTypeWithThirdPartyTestCase()\n            throws DotDataException, DotSecurityException {\n        final Host host = createHostWithDependencies();\n", "answers": ["                .map(pushedAsset -> pushedAsset.getEnvironmentId())"], "all_classes": null, "length": 6390}
{"pred": "        String fileName = \"quick\" + RUNID + \".pdf\";\n        File file = getResourceFile(\"quick.pdf\");\n        byte[] fileBytes = Files.readAllBytes(Paths.get(file.getAbsolutePath()));\n        String fileMimeType = MimetypeMap.MIMETYPE_PDF;\n        MultiPartBuilder multiPartBuilder = MultiPart", "answers": ["        String fileName1 = \"fileOne_\" + RUNID + \".txt\";"], "all_classes": null, "length": 4714}
{"pred": "            if (obj instanceof Number) {\n                Number num = (Number) obj;\n                if (num instanceof Integer) {\n                    assertEquals(\"createNumber(String) failed\", Integer.parseInt(val), num.intValue());\n                } else if (num instanceof Long) {\n                    assertEquals(\"createNumber(String) failed\", Long.parseLong(val),", "answers": ["            if (obj == null) {"], "all_classes": null, "length": 4128}
{"pred": "                            }\n                            else\n                            {\n                                Syntax.Warning(part, \"Part not attached to parent part: \" + part.ParentPart);\n                            }\n                        }\n                    }\n                }\n                if (part.AttachedToSurfaceIndex >= 0 && part.AttachedToSurfaceIndex < parts.Count)\n                {\n                    KmlPart other", "answers": ["                                if (grapple.DockUid != part.Uid)"], "all_classes": null, "length": 4169}
{"pred": "            if not xml_id:\n                return False\n            if not meta:\n                meta = {}\n            if not isobject:\n                self._update_dummy(cr, uid, model, meta['module'], xml_id)\n            self._update(cr, uid, model, meta['module'], value, xml_id, store=True", "answers": ["            ir_values_obj = pooler.get_pool(cr.dbname).get('ir.values')"], "all_classes": null, "length": 4578}
{"pred": "            return actionTL.getVolatile() == SYNCHRONIZE_CODE;\n        }\n        @Uninterruptible(reason = \"Called from uninterruptible code.\", mayBeInlined = true)\n        public static void setActionSynchronizeCode() {\n            actionTL.setVolatile(SYNCHRONIZE_CODE);\n       ", "answers": ["            return actionTL.getVolatile() == SYNCHRONIZE_CODE;"], "all_classes": null, "length": 4390}
{"pred": "\t\t\tlong size = lgetxattr (path, name, value, 0);\n\t\t\tif (size <= 0)\n\t\t\t\treturn size;\n\t\t\tvalue = new byte [size];\n\t\t\treturn lgetxattr (path, name, value, (ulong) size);\n\t\t}\n\t\t// fget", "answers": ["\t\t\tlong size = lgetxattr (path, name, value, 0);"], "all_classes": null, "length": 6868}
{"pred": "\t\t\t\tsuper(id, path, width, height);\n\t\t\t}\n\t\t}\n\t\tprivate Images()\n\t\t{\n\t\t\tCore = new CoreImages();\n\t\t}\n\t\tpublic final class CoreImages implements java.io.Serializable\n\t\t{\n\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\tprivate CoreImages()\n", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "        return encodeBytesToBytes( source, off, len, options, PREFERRED_ENCODING );\n    }   // end encodeBytesToBytes\n    \n    /**\n     * Similar to {@link #encodeBytes(byte[], int, int, int)} but returns\n     * a byte array instead of instantiating a String. This", "answers": ["        if( source == null ){"], "all_classes": null, "length": 5175}
{"pred": "\t\t\t\tnew ColumnInfo (\"IsCaseSensitive\", typeof(bool)),\n\t\t\t\tnew ColumnInfo (\"IsFixedLength\", typeof(bool)),\n\t\t\t\tnew ColumnInfo (\"IsFixedPrecisionScale\", typeof(bool)),\n\t\t\t\tnew ColumnInfo (\"IsLong\", typeof(bool)),\n\t\t\t\tnew ColumnInfo (\"IsNullable\", typeof(bool)),\n\t\t\t\tnew ColumnInfo (\"", "answers": ["\t\t\t\tnew ColumnInfo (\"IsCaseSensitive\", typeof(bool)),"], "all_classes": null, "length": 4122}
{"pred": "\t\t\t\tBigInteger v2 = u1;\n\t\t\t\tBigInteger u2 = q[0];\n\t\t\t\tBigInteger v1 = q[1];\n\t\t\t\tBigInteger u1 = v2;\n\t\t\t\tBigInteger v3 = u3;\n\t\t\t\tBigInteger u3 = v1;\n\t\t\t}\n\t\t\tif (u1", "answers": ["\t\t\t\tBigInteger tn = u1.Subtract(v1.Multiply(q[0]));"], "all_classes": null, "length": 5148}
{"pred": "\t\t\t\tif (_abi_info == null) {\n\t\t\t\t\t_abi_info = new GLib.AbiStruct (typeof (Message));\n\t\t\t\t}\n\t\t\t\treturn _abi_info;\n\t\t\t}\n\t\t}\n\t}\n#endregion\n}\n#endregion\n}\n#endregion\n}\n#endregion\n}\n#endregion\n}\n#endregion\n}\n#endregion\n}\n", "answers": ["\t\t\t\tif (_abi_info == null)"], "all_classes": null, "length": 4205}
{"pred": "                if (name.endsWith(\".zargo\")) {\n                    Configuration.setString(\n                            PersistenceManager.KEY_PROJECT_NAME_PATH,\n                            PersistenceManager.getInstance().getBaseName(\n                                    theFile.getPath()));\n                    return theFile;\n                }\n                if (name.endsWith(\".xmi\")) {\n                    Configuration.setString(\n                            PersistenceManager.KEY_PROJECT_NAME_PATH", "answers": ["                if (!name.endsWith(\".\" + filter.getExtension())) {"], "all_classes": null, "length": 5940}
{"pred": "                5: SortableHeader('Outline', False, '', 'col-center'),\n                6: SortableHeader('Script', False, '', 'col-center'),\n                7: SortableHeader('Slide', False, '', 'col-center'),\n                8: SortableHeader('Video', False, '',", "answers": ["                5: SortableHeader('Outline', False, '', 'col-center'),"], "all_classes": null, "length": 4072}
{"pred": "            string[][] ss11 = new string[][] { s111, s112 };\n            string[] s121 = new string[] { \"hello\"};\n            string[][] ss12 = new string[][] { s121 };\n            string[][][] sssi1 = new string[][][] { ss11, ss12 };\n            string[]", "answers": ["            string[][] ss11 = new string[][] { s111, s112 };"], "all_classes": null, "length": 4165}
{"pred": "            field = opts.get_field(unique_check[0])\n            return ValidationError(\n                message=field.error_messages['unique'],\n                code='unique',\n                params=params\n            )\n        # A unique together field\n        else:\n            fields = [opts.get_field(field_name) for field_name in unique_check]\n            return", "answers": ["            field = opts.get_field(unique_check[0])"], "all_classes": null, "length": 4513}
{"pred": "            paramout.write(\"%-3s \\t %.5f\\n\" % (key,value))\n            paramout.close()\n        print \"PASO %i: %f\"%(cyclemin,totalerror)        \n        \n        if cyclemin >= maxcycleminimization:\n            cyclemin = 0\n            return\n       ", "answers": ["            for key, value in sorted(paramtestdic.iteritems()):"], "all_classes": null, "length": 4363}
{"pred": "    for i in range(0, len(h), 20):\n        heads.append(h[i:i+20])\n    return heads\n```python\ndef handlecheckheads(op, inpart):\n    \"\"\"check that head of the repo did not change\n    This is used to detect a push race when using unbundle", "answers": ["    while len(h) == 20:"], "all_classes": null, "length": 4561}
{"pred": "        if(contentPaneStyle.getBorder()!= null) {\n            prefWidth = Math.max(contentPaneStyle.getBorder().getMinimumWidth(), prefWidth);\n            prefHeight = Math.max(contentPaneStyle.getBorder().getMinimumHeight(), prefHeight);\n        }\n        return new Dimension(prefWidth, prefHeight);\n    }\n   ", "answers": ["        prefWidth = Math.min(prefWidth, width);"], "all_classes": null, "length": 6347}
{"pred": "        new_cell_attributes = literal_eval(cas_data_str)\n        # Cell attributes\n        cell_attributes = model.code_array.cell_attributes\n        selection = grid.selection\n        # Format content is shifted so that the top left corner is 0,0\n        (top, left), (bottom, right) = \\\n", "answers": ["        cas = literal_eval(cas_data_str)"], "all_classes": null, "length": 5088}
{"pred": "\t\t\t\t\tpixel = cursor_bitmap.GetPixel(x, y);\n\t\t\t\t\tif (pixel == cursor_pixel) {\n\t\t\t\t\t\tcursor_bits[(y * (width / 8)) + (x / 8)] |= (Byte)(1 << (7 - (x % 8)));\n\t\t\t\t\t}\n\t\t\t\t\tpixel = cursor_mask", "answers": ["\t\t\t\t\tpixel = cursor_bitmap.GetPixel(x, y);"], "all_classes": null, "length": 6831}
{"pred": "\t\t\t//Loop through each day in the date range passed in.\n\t\t\tfor(DateTime dateCur=dateStart;dateCur<=dateEnd;dateCur=dateCur.AddDays(1)) {\n\t\t\t\t//Loop through each time slot in the day.\n\t\t\t\tfor(int timeSlotStart=0;timeSlotStart<24;", "answers": ["\t\t\tList<DateTime> listUniqueDays=new List<DateTime>();"], "all_classes": null, "length": 4064}
{"pred": "        rc = sqlite3VdbeMemCompareText( pMem1, pMem2, pColl );\n        return rc;\n      }\n      /* If one value is a blob and the other is a string, the blob is less.\n      ** If both are blobs, compare using memcmp().\n      */\n      if (", "answers": ["        pMem1.enc == SQLITE_UTF16LE || pMem1.enc == SQLITE_UTF16BE );"], "all_classes": null, "length": 5688}
{"pred": "                }\n                if (changesMask[130])\n                {\n                    data.RangedPower = packet.ReadInt32(\"RangedPower\", indexes);\n                }\n                if (changesMask[131])\n                {\n                    data.RangedPowerModPos = packet.ReadInt32(\"RangedPowerModPos\", indexes);\n                }\n                if", "answers": ["                        data.MaxPower[i] = packet.ReadInt32(\"MaxPower\", indexes, i);"], "all_classes": null, "length": 4140}
{"pred": "        # enter each SNP \n        for snp in self.locsnps[:, 1]:\n            # in case multiple consens were merged in step 6 of this sample\n            for tup in tups:\n                cidx, coffset = tup\n                pos = snp + (self.gtrim - coff", "answers": ["        seq = self.seqs[nidx]"], "all_classes": null, "length": 7755}
{"pred": "            Index ix = indexByTagAndClass[tag];\n            if (ix == null) {\n                ix = new Index(tagName(tag)+\" for \"+classRef.stringValue(), new Entry[0]);\n                indexByTagAndClass[tag] = ix;\n            }\n            return ix;\n        }\n        public Index getMemberIndex", "answers": ["            Index[] perClassIndexes = indexByTagAndClass[tag];"], "all_classes": null, "length": 5112}
{"pred": "            this.quoteLabel.Size = new System.Drawing.Size(0, 13);\n            this.quoteLabel.TabIndex = 0;\n            this.quoteLabel.Text = \"Quote\";\n            this.quoteLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;\n            this.quoteLabel.Visible = false;\n            // \n            // processor\n            // \n           ", "answers": ["            this.quoteLabel.Size = new System.Drawing.Size(46, 16);"], "all_classes": null, "length": 4569}
{"pred": "            data['rrule_type'] = rrule_type[rule._freq]\n            data['interval'] = rule._interval\n            data['count'] = rule._count\n            data['end_type'] = rule._until\n            if rule._freq == 0:\n                data['final_date'] = rule", "answers": ["            data['rrule_type'] = rrule_type[rule._freq]"], "all_classes": null, "length": 4433}
{"pred": "                // Copy the decoded row to the output stream\n                fout.Write(curr, 0, bytesPerRow);\n                // Copy the decoded row to the prior row\n                System.Array.Copy(curr, prior, bytesPerRow);\n                // Read the next row\n                tot = 0;\n                while (tot <", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "      get { return defaultInstance; }\n    }\n    \n    protected override ReportRefundRequest ThisMessage {\n      get { return this; }\n    }\n    \n    public static pbd::MessageDescriptor Descriptor {\n      get { return descriptor; }\n    }\n    \n    private static pbd::MessageDescriptor descriptor;\n    static Report", "answers": ["      get { return DefaultInstance; }"], "all_classes": null, "length": 5791}
{"pred": "                        AApAnalAttribAccess.LoadViaAApDocumentDetail(MainDs, (Int32)rv.Row[\"ApDocumentDetailId\"]);\n                    }\n                }\n                if (PartnerKey > 0)\n                {\n                    AApSupplierAccess.LoadByPrimaryKey(MainDs, PartnerKey, ReadTransaction);\n                    // I also need a", "answers": ["                        AApDocumentDetailRow DetailRow = (AApDocumentDetailRow)rv.Row;"], "all_classes": null, "length": 5677}
{"pred": "\t\t\t\tOwner.SendMessage(String.Format(\"Quest completed - '{0}' rewarded\", Name));\n\t\t\t\tOwner.SendGump(new XmlRewardGump((PlayerMobile)Owner, this));\n\t\t\t\t//Owner.SendGump(new XmlRewardGump((PlayerMobile)Owner, this, RewardItem));\n\t\t\t\t//Owner.Send", "answers": ["\t\t\t\tif (RewardItem != null)"], "all_classes": null, "length": 4101}
{"pred": "\t            return lastItemIndex - firstItemIndex + 1;\n\t        }\n\t    }\n\t    public bool ContainsKey(TKey key)\n\t    {\n\t        int index = global::System.Array.BinarySearch(items, firstItemIndex, lastItemIndex + 1, key, this);\n\t        return index >= 0;\n\t    }\n", "answers": ["\t            return lastItemIndex - firstItemIndex + 1;"], "all_classes": null, "length": 5727}
{"pred": "                if (AControlLabel!= null)\n                {\n                    AControlLabel.Location = new Point(0, NextControlVPos);\n                    AControlLabel.Size = new Size(ArgumentPanel.Width, AControlLabel.Height);\n                    ArgumentPanel.Controls.Add(AControlLabel);\n                    NextControlVPos += AControlLabel.Height", "answers": ["                if (AControlLabel != null)"], "all_classes": null, "length": 7766}
{"pred": "\t\t\treturn Unique(target, null);\n\t\t}\n\t\t/// <summary>\n\t\t/// Returns a new list containing only the unique elements of the target collection, preserving the order.\n\t\t/// The specified <see cref=\"IEqualityComparer{T}\"/> is used to determine uniqueness.\n\t\t/// </summary>\n\t", "answers": ["\t\t\treturn Unique(target, null);"], "all_classes": null, "length": 4367}
{"pred": "```\n# Define the class for the dynamic section\n```\nYour task is to complete the code given above. \n\nHere is the completed code:\n\n```python\n# Define the class for the dynamic section\nclass Dyn(CStruct):\n    _fields = [ (\"tag\",\"u32\"),\n                (\"val\",\"u32", "answers": ["DT_PPC64_OPD    = (DT_LOPROC + 1)"], "all_classes": null, "length": 6803}
{"pred": "html.WriteLine(\"      table { width: 100%; }\");\nhtml.WriteLine(\"      </style>\");\nhtml.WriteLine(\"      <link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"styles.css\\\" />\");\nhtml.WriteLine(\"   </head>\");\nhtml.WriteLine(\"   <body>\");\nhtml.WriteLine(\"      <h4><", "answers": ["                html.WriteLine(\"      table { width: 100%; }\");"], "all_classes": null, "length": 5413}
{"pred": "\t\t\t//... (rest of the code remains the same)\n``` \nPlease complete the code given above. Here is the rest of the code:\n```csharp\n\t\t\t//... (rest of the code remains the same)\n\t\t\t// signal the read operation finished\n\t\t\tif(!mReadDone.WaitOne", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "                elif p == 1:\n                    min_distance += abs(node.split - x[node.split_dim])\n                else:\n                    min_distance += abs(node.split - x[node.split_dim]) ** p\n                sd[node.split_dim] = min_distance\n                heappush(q, (min_distance, tuple(sd), far))\n", "answers": ["                    sd[node.split_dim] = np.abs(node.split - x[node.split_dim])"], "all_classes": null, "length": 5233}
{"pred": "\t\t// assert that the game is in the correct position\n\t\tassertEquals(acn, rules.formatGame(game, Locale.ENGLISH));\n\t}\n} \npackage de.schildbach.game.chess;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport", "answers": ["\t\tassertEquals(acn, rules.formatGame(game, Locale.ENGLISH));"], "all_classes": null, "length": 4129}
{"pred": "    catch (ReadOnlyException e)\n    {\n      // TODO Auto-generated catch block\n      e.printStackTrace();\n    }\n    return null;\n  }\n  /**\n   *  Draw the features on the forward strand.\n   *  @param g The object to draw into.\n   *  @param strand The strand to draw", "answers": ["    catch (InvalidRelationException e){}"], "all_classes": null, "length": 7770}
{"pred": "\t\t\t\t}\n\t\t\t}\n\t\t\tif (version >= 2)\n\t\t\t{\n\t\t\t\tm_FightMode = (FightMode)reader.ReadInt();\n\t\t\t\tm_bControlled = reader.ReadBoolean();\n\t\t\t\tm_ControlMaster = reader.ReadMobile();\n\t\t\t\tm_ControlTarget = reader.ReadMobile();\n\t\t\t\tm_ControlDest = reader.Read", "answers": ["\t\t\t\t\tstring str = reader.ReadString();"], "all_classes": null, "length": 5717}
{"pred": "\t\t\t\t\t\t\t\t// Update the sidedefs of the new lines\n\t\t\t\t\t\t\t\tforeach(Linedef l in newlines)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t// Update the sidedefs of the new lines\n\t\t\t\t\t\t\t\t\tl.UpdateSidedefs();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Update the sidedefs of the old lines\n\t\t\t\t\t\t\t\tforeach", "answers": ["\t\t\t\t\t\t\t\tif(newsector == null) return false;"], "all_classes": null, "length": 5677}
{"pred": "        translation = parent_doc.translate(user, document_locale,\n                                           based_on_rev, disclose_description)\n    except Document.DoesNotExist:\n        raise Http404\n    if translation is None:\n        message = _lazy(u'You cannot translate this document.')\n        context = {'message': message}\n        return render(request, 'handlers/", "answers": ["        doc = parent_doc.translations.get(locale=document_locale)"], "all_classes": null, "length": 4854}
{"pred": "                lDummyHeights[i] = lNewMaxRows;\n            }\n            \n            // now we'll merge the tables\n            if (isTable) {\n                newRows = new ArrayList();\n                for (i=0; i < rows.Count; i++) {\n                    if (((Row) rows[i]).GetCell", "answers": ["                lDummyHeights [i] = lNewMaxRows;"], "all_classes": null, "length": 5053}
{"pred": "\t\t\t\t\t\treferenceNode.AddLinkTo( GetReferenceNode( script ) );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn referenceNode;\n\t\t}\n\t\tprivate ReferenceNode SearchAnimatorStateTransition( Object unityObject )\n\t\t{\n\t\t\tAnimatorStateTransition animatorStateTransition = (AnimatorStateTransition) unityObject;\n\t\t\t", "answers": ["\t\t\t\t\t\treferenceNode.AddLinkTo( GetReferenceNode( script ) );"], "all_classes": null, "length": 4267}
{"pred": "\t\t\t\t}\n\t\t\t\t// Replace -InvulnerabilityUpgrade\n\t\t\t\tvar trait = node.Value.Nodes.FirstOrDefault(n => n.Key == \"-InvulnerabilityUpgrade\");\n\t\t\t\tif (trait!= null)\n\t\t\t\t{\n\t\t\t\t\tnode.Value.Nodes.Add(new MiniYamlNode(\"-Invulnerability@EXPERIENCE\", new MiniY", "answers": ["\t\t\t\t\t\tif (trait != null)"], "all_classes": null, "length": 5181}
{"pred": "values.sort(key=self._key)\nself._clear()\nself._update(values)\nreturn self.__class__(values, key=self._key)\n    def __iadd__(self, other):\n        \"\"\"Add all values from `other` to sorted-key list.\n        ``skl.__iadd__(other)`` <", "answers": ["        return self.__class__(values, key=self._key)"], "all_classes": null, "length": 7674}
{"pred": "        self._finalize_loaded(states)\n```\nThe code you provided is a part of the SQLAlchemy library, which is a popular ORM (Object-Relational Mapping) tool for Python. The code defines the Session class and related utilities.\n\nTo complete the code, we need to add the implementation of the `_finalize_loaded`", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "                    else if (this.RequiredRace == Race.Dwarf)\n                        from.SendLocalizedMessage(1072204); // Only Dwarves may use this.\n                    else if (this.RequiredRace == Race.HalfElf)\n                        from.SendLocalizedMessage(1072205); // Only Half-Elves may use this.\n                    else", "answers": ["                    else if (this.RequiredRace == Race.Gargoyle)"], "all_classes": null, "length": 4125}
{"pred": "\t\t\t\tnew syspalvalue { @class = \"ITTY\", value = 220, name = \"FULLTEXT_THESAURUS_PHRASE_TABLE\" },\n\t\t\t\tnew syspalvalue { @class = \"ITTY\", value = 221, name = \"FULLTEXT_THESAURUS_PHRASE_TABLE", "answers": ["\t\t\t\tnew syspalvalue { @class = \"LEOP\", value = 0, name = \"TABLE\" },"], "all_classes": null, "length": 7135}
{"pred": "        if (emails == null) {\n            return;\n        }\n        for (int i = 0; i < emails.length(); i++) {\n            JSONObject email = emails.getJSONObject(i);\n            JSONArray emailTypes = email.optJSONArray(\"type\");\n            ContentValues contentValues;\n            if (emailTypes!= null && emailTypes.length", "answers": ["        if (emails == null) {"], "all_classes": null, "length": 4282}
{"pred": "            return ToJson(result);\n        }\n        private string ToJson(Dictionary<string, object> data)\n        {\n            return JsonConvert.SerializeObject(data, Formatting.Indented);\n        }\n        private string ToJson(object data)\n        {\n            return JsonConvert.SerializeObject(data, Formatting.Indented);\n        }\n        private string ToJson(object[] data", "answers": ["            if (Diff.Count > 0 && DiffMode)"], "all_classes": null, "length": 4201}
{"pred": "\t\t\tblock = new byte[BZip2Constants.MAX_BLOCK_SIZE];\n\t\t\tquadrant = new int[BZip2Constants.MAX_BLOCK_SIZE];\n\t\t\tzptr = new int[BZip2Constants.MAX_BLOCK_SIZE];\n\t\t\tszptr = new short[BZip2Constants.MAX_BLOCK_SIZE];\n\t\t\tftab = new int", "answers": ["\t\t\tint n = BZip2Constants.baseBlockSize * blockSize100k;"], "all_classes": null, "length": 5391}
{"pred": "                case 0xDA:      // getActor\n                    Push(GetActor(args[1]));\n                    break;\n                case 0xDB:      // getActorName\n                    Push(GetActorName(args[1]));\n                    break;\n                case 0xDC:      // getActorName2\n                    Push(GetActorName", "answers": ["                        var a = Actors[args[1]];"], "all_classes": null, "length": 4518}
{"pred": "                    if (iFile!= null)\n                        iFile.close();\n                }\n            }\n            catch (final ObjectStoreException ex)\n            {\n                ex.printStackTrace();\n                throw ex;\n            }\n            catch (final Exception ex)\n            {\n                ex.printStackTrace();\n                throw new ObjectStoreException(ex.toString(), ex);\n            }\n", "answers": ["                    if (iFile != null)"], "all_classes": null, "length": 4288}
{"pred": "\t\t\ttrackError = Math.max( trackError, trackSegmentError ) ;\n\t\t}\n\t\n\t\treturn trackError ;\n\t}\n\tpublic static <P extends GenericPoint>\n\tdouble\n\tdistance( final P p1\n\t\t\t, final P p2\n\t\t\t )\n\t{\n\t\treturn Geo.distance( p1.getLatitude", "answers": ["\t\t\tif (trackSegmentError > trackError)"], "all_classes": null, "length": 5623}
{"pred": "\t\t\t\t\"    {0}\" +\n\t\t\t\t\"    Sub Something() Implements IPolicy.Something{0}\" +\n\t\t\t\t\"End Interface{0}\", NewLine), code);\n\t\t}\n\t\t[Test]\n\t\tpublic override void MethodMembersTypeTest4 ()\n\t\t{\n\t\t\tstring code = GenerateMethodMembers", "answers": ["\t\t\t\t\"    {0}\" +"], "all_classes": null, "length": 5620}
{"pred": "            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Jhin\",\n                    SpellName = \"JhinRShot\",\n                    Slot = SpellSlot.R,\n                    Type = SkillShotType.SkillshotMissileLine,\n                    Delay = 250,\n                    Range = 3500,\n                    Radius", "answers": ["                    ExtraMissileNames = new[] { \"JhinRShotMis4\" },"], "all_classes": null, "length": 4463}
{"pred": "                            m_House.Delete();\n                            m_From.SendLocalizedMessage(1060636); // Your house has been replaced.\n                            m_From.SendGump(new HousePlacementCategoryGump(m_Tool, m_From));\n                        }\n                    }\n                }\n            }\n        }\n    }\n    public class PlacementWarning_Callback : Callback\n    {\n", "answers": ["                            if (m_House.MovingCrate != null)"], "all_classes": null, "length": 5532}
{"pred": "\t\tplot = new Plot(\"Plot\", 0, 0, 400, 400);\n\t\tplot.setLimits(0, 10, 0, 10);\n\t\tplot.add(\"line\");\n\t\tplot.add(\"circle\");\n\t\tplot.show();\n\t}\n\tvoid showPlot() {\n", "answers": ["\t\tString title = getFirstString();"], "all_classes": null, "length": 5653}
{"pred": "                        widgetName = xbmc.getInfoLabel( widgetName )\n                    if widgetName == \"\":\n                        widgetName = LANGUAGE(32013)\n                    if is_hebrew(widgetName):\n                        widgetName = widgetName[::-1]\n                    keyboard = xbmc.Keyboard( widgetName, xbmc.getLocalizedString(528), False )\n                    keyboard.doModal", "answers": ["                        widgetTempName = xbmc.getInfoLabel(widgetName)"], "all_classes": null, "length": 6955}
{"pred": "        return encodeBytesToBytes( source, 0, source.length, NO_OPTIONS );\n    }   // end encodeBytesToBytes\n    \n    /**\n     * Similar to {@link #encodeBytes(byte[],int,int)} but returns\n     * a byte array instead of instantiating a String. This is more efficient\n", "answers": ["        byte[] encoded = null;"], "all_classes": null, "length": 5023}
{"pred": "            mnem[ishr] = \"ishr\";\n            mnem[lshr] = \"lshr\";\n            mnem[iushr] = \"iushr\";\n            mnem[lushr] = \"lushr\";\n            mnem[iand] = \"iand\";\n            mnem[land", "answers": ["            mnem[ishr] = \"ishr\";"], "all_classes": null, "length": 6113}
{"pred": "def _get_selinux_context(self, path, follow=False): \n```\nThe final answer is: \n```\ndef _get_selinux_context(self, path, follow=False):\n    if not HAVE_SELINUX:\n        return None\n    if follow:\n        path = os.path.realpath(path)\n    try:\n       ", "answers": ["            umask = os.umask(0)"], "all_classes": null, "length": 7132}
{"pred": "\t\t\t\t\tdo {\n\t\t\t\t\t\tMenus [selected].Current = (Menus [selected].Current+1) % Menus [selected].Children.Length;\n\t\t\t\t\t} while (Menus [selected].Children [Menus [selected].Current] == null);\n\t\t\t\t\tif (Menus [selected].Children [Menus [selected].Current].", "answers": ["\t\t\t\t\tforeach (var mi in Menus [selected].Children){"], "all_classes": null, "length": 7643}
{"pred": "        if (lastScanOffset + pixelStride > data.length) {\n            throw new RasterFormatException(\"Data buffer has not enough capacity\");\n        }\n    }\n    /**\n     * Returns the number of bands in the Raster.\n     */\n    public int getNumDataElements() {\n        return sampleModel.getNumDataElements", "answers": ["        int lastPixelOffset = (width - 1) * pixelStride;"], "all_classes": null, "length": 4323}
{"pred": "        return utils_misc.get_shared_meminfo(filename)\n    def get_disk_devices(self):\n        \"\"\"\n        Return a dict of disk devices for the VM.\n        :return: dict with disk devices\n        \"\"\"\n        result = virsh.domblklist(self.name, uri=self.connect_uri)\n        disks = {}\n        for line", "answers": ["        shm = int(open(filename).read().split()[2])"], "all_classes": null, "length": 7764}
{"pred": "g.parser.add_argument('limit', type=limit, location='args')\n```\nThe final answer is: \n```\ng.parser.add_argument('limit', type=limit, location='args')\n``` \nThis line of code is already present in the given code snippet. It is used to add an argument named '", "answers": ["    exclude_types = args.get('exclude_types')"], "all_classes": null, "length": 4956}
{"pred": "    objects = CourseEnrollmentManager()\n    def __init__(self, *args, **kwargs):\n        super(CourseEnrollment, self).__init__(*args, **kwargs)\n        self._course_id = None\n    def __str__(self):\n        return u\"{} enrolled in {}\".format(self.user,", "answers": ["    objects = CourseEnrollmentManager()"], "all_classes": null, "length": 4276}
{"pred": "        system_id = self.get_system_id(system)\n        if not system_id:\n            continue\n        self.client.system.removeCustomValues(self.session,\n                                              system_id,\n                                              keys)\n####################\ndef help_system_listcustominfo(self):\n    print('system_listcustominfo: List the custom information for a system')\n    print", "answers": ["        system_id = self.get_system_id(system)"], "all_classes": null, "length": 5050}
{"pred": "'        'types': ('general-music','sequential-music',),\n    },\n    'xNotesOn': {\n        'name': 'SequentialMusic',\n        'type': 'ly:prob?',\n        'types': ('general-music','sequential-music',),\n    },\n    'xNotesUp': {\n", "answers": ["        'types': ('general-music', 'sequential-music',),"], "all_classes": null, "length": 4888}
{"pred": "\t\t\t\t.Append (string.Join (\" \", Text))\n\t\t\t\t.ToString ();\n\t\t}\n\t\t\n#endregion\n\t}\n} \n``` \nThe code is written in C# and is part of a library for working with ID3v2 tags in audio files. The code defines a class called `TextInformationFrame` that provides", "answers": ["\t\t\t\t.Append (base.ToString ()).ToString ();"], "all_classes": null, "length": 5367}
{"pred": "                chr.CollidingObj = false;\n            }\n            foreach (OdePrim prim in _prims)\n            {\n                // Reset the collision values to false\n                // since we don't know if we're colliding yet\n                prim.CollidingObj = false;\n            }\n            //m_log.Debug", "answers": ["                if (chr.Shell == IntPtr.Zero || chr.Body == IntPtr.Zero)"], "all_classes": null, "length": 6278}
{"pred": "for t in ts:\n    t.start()\n```\n\nThe final answer is: \n```\nfor t in ts:\n    t.start()\n``` \nThis line of code is used to start all the threads in the list `ts`. The `start()` method is a built-in method of the `Thread` class in", "answers": ["        update_t = StatusUpdater(total_recs, finished_queue)"], "all_classes": null, "length": 6540}
{"pred": "        digits=dp.get_precision('Product Price'))\n    price_subtotal = fields.Float(string='Subtotal', readonly=True,\n        compute='_compute_price', store=True)\n    quantity = fields.Float(string='Quantity', digits=dp.get_precision('Product UoS'),\n        required=True, default=1.0)\n   ", "answers": ["        digits= dp.get_precision('Product Price'),"], "all_classes": null, "length": 4978}
{"pred": "        for p in self.populations:```\nAnswer:\n```\n        for p in self.populations:\n            p.write_data(io, variables, gather, clear, annotations)\n```", "answers": ["        data = self.get_data(variables, gather, clear, annotations)"], "all_classes": null, "length": 5678}
{"pred": "                return -value.byteValue();\n            }\n        };\n    }\n    /**\n     * Creates a boolean negation expression.\n     *\n     * @param operand\n     */\n    public static UnaryExpression not(Expression operand) {\n        return new UnaryExpression(operand) {\n            @Override\n            public String getOperator() {\n", "answers": ["                Class<? extends Number> type = value.getClass();"], "all_classes": null, "length": 5044}
{"pred": "            #endregion Lucian\n            #region Maokai\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Maokai\",\n                    SpellName = \"MaokaiTwister\",\n                    Slot = SpellSlot.Q,\n                    Type = SkillShotType.SkillshotMissileLine,\n", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "                    \"   NEW: \" + nodeUpdate);\n        }\n        return true;\n    }\n    \n    @Override\n    public void updateNodeProperties(Long nodeId, Map<QName, Serializable> properties)\n    {\n        // Get the existing node; we need to check for a change in store or UUID\n        Node old", "answers": ["                    \"   NEW: \" + nodeUpdate);"], "all_classes": null, "length": 6068}
{"pred": "      if (isMainAxisRow) {\n        // If we are laying out a row, the main axis is the row axis.\n        mainDim += betweenPaddingAndBorderMain + betweenMainDim;\n        crossDim = availableInnerCrossDim;\n      } else {\n        // If we are laying out a column,", "answers": ["      for (i = startOfLineIndex; i < endOfLineIndex; ++i) {"], "all_classes": null, "length": 4941}
{"pred": "\t\t\t\tyAxis.DrawGrid( g, this, scaleFactor, shiftPos );\n\t\t\t\tshiftPos += yAxis._tmpSpace;\n\t\t\t}\n\t\t\tshiftPos = 0.0f;\n\t\t\tforeach ( Y2Axis yAxis in _y2AxisList )\n\t\t\t{\n\t\t\t\tyAxis.DrawGrid( g,", "answers": ["\t\t\t\tyAxis.DrawGrid( g, this, scaleFactor, shiftPos );"], "all_classes": null, "length": 4173}
{"pred": "            if (info < 0)\n                throw new ILArgumentException(\"qr: an error occoured during decomposition\"); \n            return ret; \n        }\n        /// <summary>\n        /// QR decomposition, returning Q and R\n        /// </summary>\n        /// <param name=\"A\">general input matrix A of", "answers": ["            if (info < 0)"], "all_classes": null, "length": 4728}
{"pred": "                if (c!= null) {\n                    c.setFont(getFont());\n                }\n            }\n        }\n    }\n    static class RTFEditorKit extends EditorKit {\n        /**\n         * Creates a new <code>RTFEditorKit</code>.\n         */\n        public RTFEditorKit() {\n        }\n        /**\n", "answers": ["                if ((c != null)"], "all_classes": null, "length": 9124}
{"pred": "\t\t\t\tif (c == '\\n') {\n\t\t\t\t\t++line;\n\t\t\t\t\tcol = 0;\n\t\t\t\t\tprevious_col = 0;\n\t\t\t\t\tany_token_seen = false;\n\t\t\t\t\ttokens_seen = false;\n\t\t\t\t\tescaped_identifiers = null;\n\t\t\t\t\thidden_block_start = null;\n\t\t\t\t\t//\n\t\t\t\t\t", "answers": ["\t\t\t\tswitch (c) {"], "all_classes": null, "length": 8996}
{"pred": "def mergeFilter(self, filter, other):\n    \"\"\"Merge two filter lists.\n    The default implementation merges the two lists and removes duplicates.\n    If the other filter list is empty the original filter list is returned\n    unchanged.\n    :param filter: The original filter list\n    :param other: The other filter", "answers": ["        depStates = { n : s.copy() for (n,s) in states.items() }"], "all_classes": null, "length": 8648}
{"pred": "            xmlWriter.WriteAttributeString(\"ID\", pane.ID.ToString());\n            xmlWriter.WriteAttributeString(\"Anchor\", pane.Anchor.ToString());\n            if (pane.Items.Count > 1)\n                xmlWriter.WriteAttributeString(\"SelectedIndex\", XmlConvert.ToString(pane.SelectedIndex));\n            xmlWriter.WriteAttributeString(\"IsAutoHidden\",", "answers": ["            if (pane.Items.Count > 1)"], "all_classes": null, "length": 8608}
{"pred": "                        &nbsp;(<span class=\"warning\">extra: %(diff)s</span>)<br />\n                        &nbsp;&nbsp;&nbsp;- configuration file \\\"websearch_external_collections_config.py\\\" has %(number_file)s collections\n                        <br /><br /><a href=\"%(site_url)s/admin/websearch/websearch", "answers": ["                        &nbsp;(<span class=\"warning\">extra: %(diff)s</span>)<br />"], "all_classes": null, "length": 11089}
{"pred": "def _number(text):\n    \"\"\"For Python2 routines that can only process str type.\"\"\"\n    if sys.version_info[0] == 3:\n        if type(text)!= str:\n            return text\n        else:\n            return text\n    elif sys.version_info[0] == 2:\n        if type(text", "answers": ["        if type(text) == int:"], "all_classes": null, "length": 9909}
{"pred": "            if (result!= RESULT.OK)\n            {\n                return result;\n            }\n            if (sound == null)\n            {\n                soundnew = new Sound();\n                soundnew.setRaw(soundraw);\n                sound = soundnew;\n            }\n            else\n            {\n                sound.setRaw(soundraw);\n            }\n            return", "answers": ["            if (result != RESULT.OK)"], "all_classes": null, "length": 14097}
{"pred": "                            desc = escape(desc)\n                        output.write(\"      <field name='%s' type='%s' info='%s'/>\\n\" % (field[1], field[0], desc))\n                except:\n                    pass\n                output.write(\"    </struct>\\n\")\n            else:\n                output.write(\" info", "answers": ["                            desc = escape(desc)"], "all_classes": null, "length": 8020}
{"pred": "columnNum, inputSlice[0], inputSlice[1], masterNum)\n      # Update the permanence values\n      masterValidPermanence += rfPermChanges\n      # Update the connected synapses\n      masterConnected[coincSlice] = masterValidPermanence >= self.synPermConnected\n     ", "answers": ["                    columnNum // self.coincidencesShape[1],"], "all_classes": null, "length": 8992}
{"pred": "        check_nodes = [self.new_node_uuid, self.target_node_uuid]\n      else:\n        raise errors.ProgrammerError(\"Unknown mode '%s'\" % self.mode)\n    if self.disks:\n      for disk in self.disks:\n        if disk not in self.cfg.GetInstanceDisks(self.instance.uuid):\n          raise", "answers": ["        check_nodes = [self.new_node_uuid, self.other_node_uuid]"], "all_classes": null, "length": 8172}
{"pred": "def _parseVMOptions(optionType):\n    \"\"\"Returns a list of dictionaries describing the VM options for the given option type.\n    Each dictionary contains the following keys:\n        - optName: the name of the option\n        - optType: the type of the option (e.g., 'Boolean', 'Integer',", "answers": ["        complt += '\\t\\t\\t\\t\\t-\"'"], "all_classes": null, "length": 8122}
{"pred": "        }\n        public virtual void OnControlOrderChanged()\n        { }\n        public virtual void OnControlTargetChanged()\n        { }\n        public virtual void OnControlTargetLost()\n        { }\n        public virtual void OnControlTargetGained()\n        { }\n        public virtual void OnControlTargetChanged(IDamageable newTarget", "answers": ["                if (m_ControlMaster != null)"], "all_classes": null, "length": 9893}
{"pred": "        if (getComponentForm()!= null && getComponentForm().isClipped()) {\n            contains = false;\n        }\n        return contains;\n    }\n    /**\n     * Returns true if the given absolute coordinate is contained inside the visible bounds\n     * of the component.  This differs from {@link #contains", "answers": ["        if (contains) {"], "all_classes": null, "length": 10298}
{"pred": "                            if (n1 < bmp_mono.Length)\n                            {\n                                if (bmp_mono[n1] == 0)\n                                {\n                                    hits1++;\n                                    side1 += (float)r;\n                                }\n                            }\n                        }\n                        if (y + r < image_height)\n                        {\n                            int n2 = ((y +", "answers": ["                            side1 += bmp_mono[n1];"], "all_classes": null, "length": 8006}
{"pred": "\t\t\t z = new double[2];\n\t\t\t z[0] = Math.sqrt(3.0) - 2.0;\n\t\t\t z[1] = Math.sqrt(3.0) + 1.0;\n\t\t\t break;\n\t\t case 11:\n\t\t\t z = new double[3];\n\t\t\t z", "answers": ["\t\t\t z = new double[3];"], "all_classes": null, "length": 9193}
{"pred": "\t\tDatabaseMetaData dbmd = getDatabaseMetaData();\n\t\tResultSet rs = dbmd.getColumns(null, null, tableName, null);\n\t\tList<String> existingFields = new ArrayList<String>();\n\t\twhile (rs.next()) {\n\t\t\texistingFields.add(rs.getString(4));\n\t\t}\n\t\trs.close();\n\t\t\n\t", "answers": ["        RowMetaInterface tabFields = getTableFields(tableName);"], "all_classes": null, "length": 9895}
{"pred": "\t\t\tspecial.get(3).add(\"Favored Enemy: \" + allFE.get(feIndex) + \" +3\");\n\t\t\tspecial.get(3).add(\"Favored Terrain: \" + getRandom(new String[] {\"Aquatic\", \"Desert\", \"Forest\", \"Mountain\", \"Plains\", \"", "answers": ["\t\t\tfeIndex = rand.nextInt(allFE.size());"], "all_classes": null, "length": 8696}
{"pred": "        \"\"\"\n        self.SetToolTipString(\"\")\n        self._tip_item = None\n        self.StopPreviewTimer()\n    def OnSize(self, event):\n        \"\"\"\n        Handles the ``wx.EVT_SIZE`` event for L{AuiToolBar}.\n        :param `event`: a `wx.SizeEvent` event to be processed.", "answers": ["        Handles the ``wx.EVT_LEAVE_WINDOW`` event for L{AuiToolBar}."], "all_classes": null, "length": 11431}
{"pred": "            mute = (m!= 0);\n            return result;\n        }\n        public RESULT setUserData        (IntPtr userdata)\n        {\n            return FMOD_EventCategory_SetUserData(eventcategoryraw, userdata);\n        }\n        public RESULT getUserData        (ref IntPtr userdata)\n        {\n            return FMOD_EventCategory_GetUserData", "answers": ["            mute = (m != 0);"], "all_classes": null, "length": 9240}
{"pred": "protected override NpcBookPair[] NpcBookPairs\n\t{\n\t\tget\n\t\t{\n\t\t\treturn new NpcBookPair[] {\n\t\t\t\tnew NpcBookPair { NpcIdent = \"_walter\", ItemId = 70059 },\n\t\t\t\tnew NpcBookPair { NpcIdent = \"_a", "answers": ["\tprotected override int QuestId { get { return 519436; } }"], "all_classes": null, "length": 9147}
{"pred": "            try{ ois.close(); } catch( Exception e ){EncogLogging.log(e);}\n        }   // end finally\n        \n        return obj;\n    }   // end decodeToObject\n    \n    /**\n     * Decodes data from Base64 notation, automatically\n     * detecting gzip-compressed data and decompressing it", "answers": ["            try{ ois.close();  } catch( Exception e ){EncogLogging.log(e);}"], "all_classes": null, "length": 8136}
{"pred": "                if e.nodeType == e.ELEMENT_NODE and e.localName == \"layout\":\n                    self.layoutNode = e\n                    break\n            # Check the schema version\n            if self.layoutNode.hasAttribute('schemaVersion'):\n                if int(self.layoutNode.attributes['schemaVersion'].value) > schemaVersion:\n                    log", "answers": ["                if e.nodeType == e.ELEMENT_NODE and e.localName == \"layout\":"], "all_classes": null, "length": 8661}
{"pred": "                numBits--;\n            uint numBytes = numBits >> 3;\n            if((numBits & 0x7)!= 0)\n                numBytes++;\n            uint[] data = new uint[numBytes];\n            uint tempVal, val = this.data[this.dataLength - 1];\n            if((tempVal", "answers": ["                numBits = (numBits >> 1) + 1;"], "all_classes": null, "length": 8360}
{"pred": "        if cdata is None:\n            return\n        if cdata == (slice(None),):\n            return [node.inputs[0]]\n    elif isinstance(node.op, AdvancedSubtensor1):\n        cdata = node.op.get_constant_idx(node.inputs, allow_partial=True,\n                                         only_process_constants=True)\n        if c", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": "                   is_const=True, is_virtual=True, is_pure_virtual=True)\n    ## attribute.h (module 'core'): bool ns3::AttributeAccessor::Get(ns3::ObjectBase const * object, std::string const & name, ns3::AttributeValue & attribute) const [member function]\n    cls.add_method", "answers": ["                   is_const=True, is_virtual=True, is_pure_virtual=True)"], "all_classes": null, "length": 10722}
{"pred": "                    Node.TemplateText tt = (Node.TemplateText)body.elementAt(0);\n                    if (tt.getText().trim().length() == 0) {\n                        templateTextOptimization = true;\n                    }\n                }\n                if (!templateTextOptimization) {\n                    out.printin(\"int \");\n                    out.print(varName", "answers": ["                    Node bodyElement = body.getNode(0);"], "all_classes": null, "length": 9144}
{"pred": "\t\t\t\t\tbreak;\n\t\t\t\tcase Msg.WM_KEYUP:\n\t\t\t\tcase Msg.WM_SYSKEYUP:\n\t\t\t\t\tPreviewKeyDownEventArgs e = new PreviewKeyDownEventArgs ((Keys)msg.WParam.ToInt32 () | XplatUI.State.ModifierKeys);\n\t\t\t\t\tOnPreviewKeyDown (e);\n\t\t\t\t\tbreak;\n\t\t\t\tcase Msg.WM", "answers": ["\t\t\t\t\tif (PreProcessMessage (ref msg))"], "all_classes": null, "length": 9784}
{"pred": "        if os.path.exists(md_file_path) is False:\n            raise RuntimeError('Pre-processed file {0} does not exist.'.format(md_file_path))\n        # load\n        mantidsimple.LoadNexus(InputFile=md_file_path,\n                               OutputWorkspace=output_ws_name)\n        # record\n        self._", "answers": ["        if os.path.exists(md_file_path) is False:"], "all_classes": null, "length": 9108}
{"pred": "            package = None\n    return package\ndef _calc___spec__(globals):\n    \"\"\"Calculate what __spec__ should be.\n    __spec__ is not guaranteed to be defined or could be set to None\n    to represent that its proper value is unknown.\n    \"\"\"\n    spec = globals.get('__spec__", "answers": ["            package = package.rpartition('.')[0]"], "all_classes": null, "length": 8094}
{"pred": "                var methodGroup = (MethodGroup)expression;\n                if (methodGroup.Method.IsStatic)\n                {\n                    Error(diagnostics, ErrorCode.ERR_InstanceMethod, syntax, methodGroup.Method);\n                    return;\n                }\n                if (methodGroup.Method.IsExtensionMethod)\n                {\n                    Error(diagnostics, ErrorCode.ERR_Extension", "answers": ["                var methodGroup = (BoundMethodGroup)expression;"], "all_classes": null, "length": 8696}
{"pred": "            search_reg_str = search_terms.replace(' ', r'\\b\\w+\\b')\n        try:\n            search_regx = re.compile(search_reg_str, flags)\n        except Exception as err:\n            print('There is a problem with the regular expression '\n                  '%s: %s' % (search_reg_str", "answers": ["            search_reg_str = '\\\\b%s\\\\b' % search_terms.replace(' ',"], "all_classes": null, "length": 11879}
{"pred": "                FvObj = Fv.FV()\n                self.__GetDefineStatements(FvObj)\n                self.__GetBlockStatement(FvObj)\n                self.__GetSetStatements(FvObj)\n                self.__GetFvAlignment(FvObj)\n                self.__GetFvAttributes(FvObj)\n                self", "answers": ["                if not self.__IsKeyword(\"FV\"):"], "all_classes": null, "length": 10845}
{"pred": "      headers_phase = PBXHeadersBuildPhase()\n      self.AppendProperty('buildPhases', headers_phase)\n    return headers_phase\n  def SourcesPhase(self):\n    sources_phase = self.GetBuildPhaseByType(PBXSourcesBuildPhase)\n    if sources_phase is None:\nNext line of code:\n      sources_phase", "answers": ["      headers_phase = PBXHeadersBuildPhase()"], "all_classes": null, "length": 11459}
{"pred": "url = remote_instance._get_node_location_url() + '?' + urllib.parse.urlencode({'node_ids': x}) \n```\nThe final answer is: \n```python\nurl = remote_instance._get_node_location_url() + '?' + urllib.parse.urlencode({'node_ids': x})\n``` \nThis line of code", "answers": ["    post = {'node_ids[{}]'.format(i): n for i, n in enumerate(x)}"], "all_classes": null, "length": 14106}
{"pred": "                        useExponentialNotation = true;\n                        minExponentDigits = 0;\n                        for (int i = pos + exponent.length(); i < pattern.length(); ++i) {\n                            char c = pattern.charAt(i);\n                            if (c == digit || c == zeroDigit) {\n                                ++minExponent", "answers": ["                        if (useExponentialNotation) {"], "all_classes": null, "length": 11534}
{"pred": "        BeginBatchUndo(self) -> bool\n        Begin a batch of undo operations\n        \"\"\"\n        return _richtext.RichTextCtrl_BeginBatchUndo(*args, **kwargs)\n    def EndBatchUndo(*args, **kwargs):\n        \"\"\"\n        EndBatchUndo(self) -> bool\n        End a batch of", "answers": ["        BeginBatchUndo(self, String cmdName) -> bool"], "all_classes": null, "length": 9452}
{"pred": "  exec /usr/bin/lighttpd -f /opt/dirac/etc/lighttpd.conf\n  \"\"\" % {'bashrc': os.path.join( self.instancePath, 'bashrc' ) } )\n        fd.close()\n        os.chmod( runFile, self.gDefaultPerms )\n        cTypeLower", "answers": ["  exec lighttpdSvc.sh < /dev/null"], "all_classes": null, "length": 8611}
{"pred": "    if (tractor.getX() - target.getX() == 1) {\n      mx = 1;\n    }\n    if (tractor.getX() - target.getX() == -1) {\n      mx = -1;\n    }\n    if (tractor.getY() - target.getY() == -2) {\n      my =", "answers": ["    if (tractor.getY() - target.getY() == -2) {"], "all_classes": null, "length": 8405}
{"pred": "            if module.params['export_domain']:\n                ret = vms_module.action(\n                    action='export',\n                    entity=vm,\n                    action_condition=lambda vm: vm.status == otypes.VmStatus.DOWN,\n                    wait_condition=lambda vm: vm.status == otypes.VmStatus.DOWN,\n                    export_domain=module.params", "answers": ["        elif state == 'suspended':"], "all_classes": null, "length": 8276}
{"pred": "        m = ModeFactory.getMode(\"Channel_queries\", \"filter_child_subscriptions\");\n        DataResult dr = m.execute(params, subCids, unsubCids);\n        for (Object o : dr) {\n            Map map = (Map) o;\n            Long systemId = (Long) map.get(\"system", "answers": ["        List<Map> subDr = Collections.EMPTY_LIST;"], "all_classes": null, "length": 10246}
{"pred": "            for (int i = 0; i < libs.size(); i++) {\n                NativeLibrary lib = libs.elementAt(i);\n                if (lib.name.equals(name)) {\n                    if (lib.isBuiltin == isBuiltin) {\n                        return true;\n                    }\n                    throw new UnsatisfiedLinkError(\n                        \"", "answers": ["            int size = libs.size();"], "all_classes": null, "length": 8562}
{"pred": "            state.s1 = s0;\n            state.s2 = s1;\n            state.magicv = hqrndmagic;\n        }\n        /*************************************************************************\n        HQRNDState  initialization  with  random  values  which come from standard\n        RNG.\n          -- ALGLIB --\n             Copyright 02.", "answers": ["            hqrndseed(s0, s1, state, _params);"], "all_classes": null, "length": 18518}
{"pred": "                hr = (float) radii.getTopRightHorizontalRadius();\n                vr = (float) radii.getTopRightVerticalRadius();\n                // 1 - Top Right:     X - HR, Y + 0,      X, Y,      X + 0, Y + VR\n                dx0", "answers": ["                hr = (float) radii.getTopRightHorizontalRadius();"], "all_classes": null, "length": 9945}
{"pred": "group.add_option(\"-q\", \"--quiet\", dest=\"quiet\", action=\"store_true\",\n                help=_(\"be quiet, don't print anything\"), metavar='[quiet]')\ngroup.add_option(\"-v\", \"--verbose\", dest=\"verbose\", action=\"store_true\",\n                help=_(\"be verbose, print lots of information\"), metavar", "answers": ["        group.add_option(\"\", \"--rpmverbosity\", default=None,"], "all_classes": null, "length": 8933}
{"pred": "            for (int retry = 0; retry < retryCount; retry++) {\n                try {\n                    // mount the data in the repository.\n                    mountData(dataFile, dataPrefix, values, defaultData,\n                              registerDataNames, datafilePath, fileEditable);\n                    successful = true;\n                    break;\n                }", "answers": ["            while (!successful && retryCount-- > 0) try {"], "all_classes": null, "length": 10896}
{"pred": "                    }\n                }\n                moduleBeingBuilt.AddDebugDocument(MakeDebugSourceDocumentForChecksumDirective(normalizedPath, checkSumText, guid));\n            }\n        }\n        private static bool CheckSumMatches(string checkSumText, string sourceHash)\n        {\n            return checkSumText == sourceHash;\n        }\n        private", "answers": ["                        if (guid == existingDoc.SourceHashKind)"], "all_classes": null, "length": 8489}
{"pred": "                    while self.tok[0]!= ')':\n                        if self.tok[0] == 'IDENT':\n                            params.append(self.tok[1])\n                            self.NextToken()\n                        elif self.tok[0] == 'TYPE':\n                            typ = self.tok[1]\n                            self.NextToken()\n                           ", "answers": ["                    if self.tok[0] != ')':"], "all_classes": null, "length": 10276}
{"pred": "        return comment_value\n#-----------------------------------------------------------------------------\n@registry.register\nclass ChoiceResponse(LoncapaResponse):\n    \"\"\"\n    Choice response type.\n    \"\"\"\n    human_name = _('Choice Input')\n    tags = ['choiceresponse']\n    allowed_inputfields = ['choiceinput']\n    def __init__(self, *args", "answers": ["        options_value = json_d.get('options', [])"], "all_classes": null, "length": 13691}
{"pred": "          pMem.n = sqlite3Strlen30( pMem.z );\n        }\n        pMem.type = SQLITE_TEXT;\n        pMem.enc = SQLITE_UTF8;\n        if ( p.pResultSet[i_pMem] == null )\n        {\n          p.pResultSet[i_pMem] = sqlite3Malloc( p.p", "answers": ["          Debug.Assert( pMem.z != null );"], "all_classes": null, "length": 8052}
{"pred": "        json_data = json.loads(str(form['jsondata']))\n        json_data = json_unicode_to_utf8(json_data)\n        try:\n            pid = json_data['pid']\n            orcid = json_data['orcid']\n        except:\n            return self._fail(req, apache.HTTP_NOT_FOUND)\n        webapi.session", "answers": ["        json_data = json.loads(str(form['jsondata']))"], "all_classes": null, "length": 9234}
{"pred": "                disk_type = expected_disk_spec['type'].lower()\n                if disk_type not in ['thin', 'eagerzeroedthick']:\n                    self.module.fail_json(msg=\"disk_type specified is not valid.\"\n                                              \" Should be one of ['thin', 'eagerzeroedthick']\")\n                if (vm", "answers": ["                disk_type = expected_disk_spec.get('type', '').lower()"], "all_classes": null, "length": 9014}
{"pred": "\t\t\treturn names [(int) ot] [1];\n\t\t}\n\t\tpublic static string GetMetadataName (string name)\n\t\t{\n\t\t\tfor (int i = 0; i < names.Length; ++i) {\n\t\t\t\tif (names [i] [0] == name)\n\t\t\t\t\treturn names [i", "answers": ["\t\t\treturn names [(int) ot] [1];"], "all_classes": null, "length": 8622}
{"pred": "            }\n        }\n        /// <summary>\n        /// A Tree represents a tree of branches\n        /// </summary>\n        public class Tree\n        {\n            /// <summary>\n            /// Create a new tree\n            /// </summary>\n            public Tree() {\n                this.trunk = new Branch(null, this,", "answers": ["                this.Children = new ArrayList();"], "all_classes": null, "length": 8049}
{"pred": "        return {'acc_src': acc_src, 'acc_dest': acc_dest, 'acc_valuation': acc_valuation, 'journal_id': journal_id}\n    def _get_accounting_data_for_valuation_move(self, cr, uid, move, context=None):\n        \"\"\"\n        Return the accounts and journal to use", "answers": ["        if acc_src == acc_valuation:"], "all_classes": null, "length": 9425}
{"pred": "    out : array of datetime64[D]\n        An array with the same shape as ``dates``, containing the adjusted\n        dates.\n    See Also\n    --------\n    is_busday : Returns a boolean array indicating valid days.\n    busday_count : Counts how many valid days are in a half-open date range.\n", "answers": ["    out : array of datetime64[D]"], "all_classes": null, "length": 23278}
{"pred": "                subsets = dim_coord_subset()\n            else:\n                subsets = [slice(None, None)]\n        else:\n            subsets = [slice(None, None)]\n        return subsets\n    def _intersect_modulus(self, coord, minimum, maximum,\n                           min_inclusive=True, max_inclusive=True,\n                           ignore_bounds=False", "answers": ["                subsets = dim_coord_subset()"], "all_classes": null, "length": 8031}
{"pred": "this.region = region;\n}\n/**\n * Sets the receiver's background color to the color specified\n * by the argument, or to the default system color for the control\n * if the argument is null.\n * <p>\n * Note: This operation is a hint and may be overridden by the platform.\n * </p", "answers": ["\tlong /*int*/ hRegion = 0;"], "all_classes": null, "length": 16705}
{"pred": "                    if not webapi.is_valid_arxiv_id(paper):\n                        papers_to_autoclaim.remove(paper)\n                if papers_to_autoclaim:\n                    autoclaim_data = pinfo['autoclaim']['res']\n                    autoclaim_successful_recs = autoclaim_data['successful_recids']\n                   ", "answers": ["                    operation_parts = {'pid': person_id,"], "all_classes": null, "length": 8290}
{"pred": "            u\"User %s opted in to receive emails from course %s\",\n            user.username,\n            course_id\n        )\n    else:\n        optout_object = Optout(user=user, course_id=course_key)\n        optout_object.save()\n        log.info(\n            u\"User %s opted out of", "answers": ["            u\"User %s (%s) opted in to receive emails from course %s\","], "all_classes": null, "length": 8301}
{"pred": "if len(arrayObjectMemberTypes) > 0: \n```\nThe final answer is: \n```\n            def get_name(memberType):\n                if self.type.isGeckoInterface():\n                    return memberType.inner.identifier.name\n                return memberType.name\n            def get_match(name):\n                return (\n                    \"match", "answers": ["        if len(arrayObjectMemberTypes) > 0:"], "all_classes": null, "length": 12254}
{"pred": "class Token(object):\n    \"\"\"Base class for all tokens - provides a common interface for all tokens.\"\"\"\n    def __init__(self, name=None, resultsName=None, modal=True, saveAsList=False, \n                 savelist=False, whiteChars=None, ignoreExprs=None, \n                 skipWhitespace=False,", "answers": ["                    tokenlist[ikey] = _ParseResultsWithOffset(dictvalue,i)"], "all_classes": null, "length": 11936}
{"pred": "```python\ndef CheckForNonConstReference(filename, clean_lines, linenum,\n                              nesting_state, error):\n  \"\"\"Check for non-const references.\n  Separate from CheckLanguage since it scans backwards from current\n  line, instead of scanning forward.\n  Args:\n    filename: The name of the current file", "answers": ["    if matched_zero and matched_zero.group(1) != '0':"], "all_classes": null, "length": 20316}
{"pred": "```python\ndef GetBaseFile(self, filename):\n    status = self.GetStatus(filename)\n    base_content = None\n    new_content = None\n    # If a file is copied its status will be \"A  +\", which signifies\n    # \"addition-with-history\".  See \"svn st\"", "answers": ["          if after == NULL_HASH:"], "all_classes": null, "length": 10689}
{"pred": "            url = _get_subfield_value(fft, 'a', '')\n            if not url:\n                url = _get_subfield_value(fft, 'u', '')\n            if not url:\n                url = _get_subfield_value(fft, 'x', '')\n            if not url:\n                url = _", "answers": ["            url = field_get_subfield_values(fft, 'a')"], "all_classes": null, "length": 8249}
{"pred": "        int[] allowedIfds = new int[Arrays.binarySearch(ifds, ifdFlags) + 1];\n        System.arraycopy(ifds, Arrays.binarySearch(ifds, ifdFlags), allowedIfds, 0,\n                Arrays.binarySearch(ifds, ifdFlags) + 1);\n        return", "answers": ["        ArrayList<Integer> l = new ArrayList<>();"], "all_classes": null, "length": 9563}
{"pred": "            c = new double[m];\n            i1_ = (n-1) - (0);\n            for(i_=0; i_<=m-n;i_++)\n            {\n                c[i_] = b[i_+i1_];\n            }\n            if( m-n+1<=m-1 )\n", "answers": ["            c = new double[m];"], "all_classes": null, "length": 10316}
{"pred": "            new char[] {'\\x1FF0', '\\x1FFB'}, /* 1FF0-1FFB */\n            new char[] {'\\x1FFD', '\\x1FFF'}, /* 1FFD-1FFF */\n            new char[] {'\\x2000', '\\x", "answers": ["            \"\\x1FF2\\x1F7C\\x03B9\", /* 1FF2; 1F7C 03B9; Case map */"], "all_classes": null, "length": 14273}
{"pred": "        if (bImg == null) {\n            throw new NullPointerException();\n        }\n        if (op == null) {\n            throw new NullPointerException();\n        }\n        if (x < 0 || y < 0) {\n            throw new ArrayIndexOutOfBoundsException();\n        }\n        if (x + bImg.getWidth() >", "answers": ["        if (bImg == null) {"], "all_classes": null, "length": 14028}
{"pred": "      return JavaCore.create(fileName, pkgEnd);\n    }\n  }\n  public static IPackageFragment getPackageFragment(char[] fileName, int pkgEnd) {\n    return getPackageFragment(fileName, pkgEnd, -1);\n  }\n  public static IPackageFragment getPackageFragment(char[] fileName) {\n    return get", "answers": ["      Path path = new Path(new String(fileName, 0, pkgEnd));"], "all_classes": null, "length": 9133}
{"pred": "                if adding:\n                    if lhs in raw:\n                        raw[lhs] = raw[lhs] + rhs\n                    else:\n                        raw[lhs] = rhs\n                else:\n                    raw[lhs] = rhs\n            line = f.readline()\n    f.currentfile.close()\n    # Apply the overrides.\n   ", "answers": ["                if adding and rhs != \"\":"], "all_classes": null, "length": 8273}
{"pred": "                if end_line == t[3][0]:\n                    # same line\n                    if token_type == tokenize.NAME and \\\n                       text in (\"if\", \"elif\", \"else\", \"for\", \"while\",\n                                \"try\", \"except\", \"finally\", \"with\"):\n                        # special case: if/elif", "answers": ["                start_line, start = t[2]"], "all_classes": null, "length": 8040}
{"pred": "        with open(filename, \"r\") as inputfile: \n            for line in inputfile: \n                if re_warning.match(line): \n                    self.logger.warn(\"File %s contains: %s\", filename, line.strip()) \n                yield line \n        return \n    def parse_poly(self, filename): \n", "answers": ["        with open(filename, \"r\") as inputfile:"], "all_classes": null, "length": 9404}
{"pred": "\t\t\t\tif (mediaEncoderItems.Length!= 3)\n\t\t\t\t{\n\t\t\t\t\tthrow new ArgumentOutOfRangeException(String.Format(CultureInfo.CurrentCulture, \"GallerySetting.RetrieveGallerySettingsFromDataStore cannot parse the media encoder settings for property {0}. Encountered invalid string: '{1}'\", property.Name, mediaEncStr));\n\t\t\t\t}\n\t\t\t", "answers": ["\t\t\t\tif (mediaEncoderItems.Length != 3)"], "all_classes": null, "length": 11381}
{"pred": "            for k in self.splitKeySet.intersection(tree2.splitKeySet):\n                theSum += abs(self.splitKeyHash[k].br.len - tree2.splitKeyHash[k].br.len)\n            for k in selfHasButTree2DoesNot:\n                theSum += self.splitKeyHash[k].br.len\n", "answers": ["            for k in self.splitKeySet.intersection(tree2.splitKeySet):"], "all_classes": null, "length": 10347}
{"pred": "            weights = aggregator.weights(**kwargs)\n        else:\n            weights = None\n        result = aggregator.post_process(new_cube, rolling_window_data,\n                                         [coord], **kwargs)\n        if weights is not None:\n            result.data = result.data * weights\n        return result\n    def concatenate(self, dim=None,", "answers": ["                kwargs = dict(kwargs)"], "all_classes": null, "length": 11922}
{"pred": "                return fn(*arg, **kw)\n            event_key = event_key.with_wrapper(wrap)\n        event_key.base_listen(**kw)\nclass AttributeEvents(event.Events):\n    \"\"\"Define events specific to attribute lifecycle.\n    e.g.::\n        from sqlalchemy import event\n        def my_set_listener(target, value, initiator", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": "                setMargins(a.getDimensionPixelOffset(MARGIN, DEFAULT_MARGIN),\n                        a.getDimensionPixelOffset(LEFT_MARGIN, DEFAULT_MARGIN),\n                        a.getDimensionPixelOffset(RIGHT_MARGIN, DEFAULT_MARGIN),\n                        a.getDimensionPixelOffset(BOTTOM_MARGIN, DEFAULT_MARGIN));\n            } finally {\n                a.recycle();\n            }\n       ", "answers": ["                int margin = a.getDimensionPixelSize(MARGIN, DEFAULT_MARGIN);"], "all_classes": null, "length": 9007}
{"pred": "        if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())\n            SibTr.entry(tc, \"getUuid\");\n        return _uuid;\n    }\n    /**\n     * Returns the unique id of this connection.\n     *\n     * @return SIBUuid12 of the connection\n     */\n   ", "answers": ["        if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())"], "all_classes": null, "length": 9441}
{"pred": "                return new SynthesizedIntrinsicOperatorSymbol(leftType, OperatorFacts.BinaryOperatorNameFromOperatorKind(op), rightType, returnType, isChecked);\n            }\n            return new SynthesizedIntrinsicOperatorSymbol(leftType, OperatorFacts.BinaryOperatorNameFromOperatorKind(op), rightType, returnType, isChecked);\n        }\n", "answers": ["                if ((object)leftType == null)"], "all_classes": null, "length": 15198}
{"pred": "        self.invoke('beforeEvaluate', expression=expression, locals=locals)\n        try:\n            result = self.interpreter.evaluate(expression, locals)\n        except Exception, e:\n            self.fail(e)\n        self.invoke('afterEvaluate', result=result)\n        return result\n    def execute(self, statements, locals=None):\n", "answers": ["        if expression in ('1', 'True'): return True"], "all_classes": null, "length": 8731}
{"pred": "      for (int j = 0; j < dsize; j++) {\n        labels[dataIndex][j] = document.get(j).getLabel();\n        data[dataIndex][j] = document.get(j).getFeatures();\n        if (featureVals!= null) {\n          featureVals[dataIndex][j]", "answers": ["      if (featureVals != null)"], "all_classes": null, "length": 8316}
{"pred": "internal struct LeafMethodList\n    {\n        // internal ushort leaf;      // LF_METHODLIST [TYPTYPE]\n        /// <summary>\n        /// </summary>\n        internal ushort count; // number of occurrences of function\n        /// <summary>\n        /// </summary>\n        internal uint[] mList; // (", "answers": ["        internal string name; // length prefixed name of method"], "all_classes": null, "length": 9110}
{"pred": "            string[] exts = extensions.Split(new char[] {'' }, StringSplitOptions.RemoveEmptyEntries);\n            foreach (string ext in exts)\n            {\n                if (ext.StartsWith(\"GL_ARB_\"))\n                {\n                    if (ext == \"GL_ARB_multisample\")\n                        majorVersion = 1;\n                    else if (", "answers": ["            if (GL.GetString(StringName.Version).StartsWith(\"GL ES\"))"], "all_classes": null, "length": 8378}
{"pred": "```python\ndef get_subformat_from_format(format):\n    \"\"\"\n    Given a format, returns the subformat.\n    @param format: the format to be parsed.\n    @type format: string\n    @return: the subformat or empty string if not found.\n    @rtype: string\n    \"\"\"\n   ", "answers": ["    return (0, CFG_WEBACCESS_WARNING_MSGS[0])"], "all_classes": null, "length": 11744}
{"pred": "        self.impl_use = self._parse_impl_use(data[32:])\n        self._initialized = True\n    def _parse_impl_use(self, data):\n        # type: (bytes) -> int\n        \"\"\"\n        Parse the passed in data into a UDF Logical Volume Implementation Use.\n        Parameters:\n         data -", "answers": ["        self.impl_id = UDFEntityID()"], "all_classes": null, "length": 10644}
{"pred": "```\ndef _concat_objects(keys, values, not_indexed_same=False):\n```\nThis function is used to concatenate the values into a DataFrame. It takes three parameters: keys, values, and not_indexed_same. The keys parameter is a list of keys, the values parameter is a list of values, and", "answers": ["                            result = concat(values, keys=key_index,"], "all_classes": null, "length": 9883}
{"pred": "            default:\n                unread();\n                return;\n            }\n            ch = next();\n        }\n    }\n    /**\n     * Parses a quantifier and returns the head of the quantifier node.\n     */\n    private Node closure(Node head) {\n        int ch = peek();\n        if (ch == '?') {\n            ch", "answers": ["            case '-': // subFlag then fall through"], "all_classes": null, "length": 10915}
{"pred": "        final VirtualMachine vm = _vmDao.findByUuid(vmUuid);\n        final VirtualMachineGuru vmGuru = getVmGuru(vm);\n        final Host srcHost = _hostDao.findById(srcHostId);\n        final Host destHost = _hostDao.findById(destHostId);\n        final Host fromHost =", "answers": ["        final VMInstanceVO vm = _vmDao.findByUuid(vmUuid);"], "all_classes": null, "length": 8853}
{"pred": "        g = np.zeros([K], dtype=np.float64)\n        for k in range(0, K):\n            g[k] = self.N_k[self.states_with_samples[k]] - self.N_k[self.states_with_samples[k]] * self._computeUnnormalizedLogWeights(np.zeros([self.states_with_samples, self", "answers": ["        W_nk = self._computeWeights(recalc_denom=True)"], "all_classes": null, "length": 12510}
{"pred": "        d = self.shell.stat(('ned',), ('size', 'directory'))\n        def cb(res):\n            self.assertEqual(res[0], 0)\n            self.assertTrue(res[1])\n        d.addCallback(cb)\n        return d\n\n```\n\nThis code is a continuation of the previous code snippet, which is a", "answers": ["        d = self.shell.stat(('ned',), ('size', 'directory'))"], "all_classes": null, "length": 8415}
{"pred": "                if( b < 0 ) {\n                    break;\n                }   // end if: end of stream\n                dest[ off + i ] = (byte)b;\n            }   // end for: each byte\n            \n            return i;\n        }   // end read\n        \n        /**\n         * Skips over and", "answers": ["                if( b >= 0 ) {"], "all_classes": null, "length": 9989}
{"pred": "            if (b == null)  return a;\n            return new ToolkitEventMulticaster(a, b);\n        }\n        static AWTEventListener remove(AWTEventListener a,\n                                       AWTEventListener b) {\n            if (a == null)  return b;\n            if (b == null)  return a", "answers": ["            if (b == null)  return a;"], "all_classes": null, "length": 10923}
{"pred": "\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfrom.SendGump( new AdminGump( from, AdminGumpPage.Accounts, 0, results, notice, null ) );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcase 8:\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tArrayList results;\n\t\t\t\t\t\t\tTextRelay matchEntry = info.GetTextEntry( 0", "answers": ["\t\t\t\t\t\t\t\tresults.Sort( AccountComparer.Instance );"], "all_classes": null, "length": 9034}
{"pred": "            if (result!= RESULT.OK)\n            {\n                return result;\n            }\n            soundnew = new Sound();\n            soundnew.setRaw(soundraw);\n            sound = soundnew;\n            return result;\n        }\n        public RESULT createDSP             (uint type, ref IntPtr dsp)\n        {\n            return FMOD_System", "answers": ["            if (result != RESULT.OK)"], "all_classes": null, "length": 14660}
{"pred": "                tbl_ix = data[base] & 255;\n            base++;\n            int huffbits[] = new int[16];\n            int huffval[] = new int[16];\n            int huffbitsLen = 0;\n            int huffvalLen = 0;\n            int huffbits", "answers": ["                tbl_ix = data[base] & 255;"], "all_classes": null, "length": 16751}
{"pred": "                this.AddButton(x2, 215, 0xFAB, 0xFAD, 405, GumpButtonType.Reply, 0);\n                // add the team challenge button\n                this.AddLabel(x3 + 30, 215, 55, a.Text(200234));  //", "answers": ["                    this.AddLabel(x2 + 30, 215, 55, a.Text(200233));  // \"DeathBall\""], "all_classes": null, "length": 8017}
{"pred": "            TemplateRow = TemplateDT.NewRowTyped(false);\n            TemplateRow.PersonKey = AFamilyPartnerKey;\n            TemplateRow.PersonType = PPersonTable.PersonTypeFamily;\n            TemplateRow.AcceptChanges();\n            RequiredColumns = new StringCollection();\n            RequiredColumns.Add(PPersonTable.GetPersonKeyDBName());\n           ", "answers": ["            TemplateRow = TemplateDT.NewRowTyped(false);"], "all_classes": null, "length": 8754}
{"pred": "\t\t/* free internal buffers */\n\t\tbs.free_bitstream(gfp);\n\t\t/* free frontend buffers */\n\t\tga.free_gain_analysis(gfp);\n\t\t/* free encoder buffers */\n\t\tenc.free_encoder(gfp);\n\t\t/* free id3 tag */\n\t\tid3.free_id3tag(gfp);\n", "answers": ["\t\tif (gfp != null && gfp.class_id == LAME_ID) {"], "all_classes": null, "length": 8018}
{"pred": "                if (AllSubmissionsOK == false)\n                {\n                    TLogging.LogAtLevel(9,\n                        Messages.BuildMessageFromVerificationResult(\"TPartnerEditUIConnector.SubmitChangesPersonnelData AVerificationResult: \",\n                            AVerificationResult));\n                }\n            }\n            else\n            {\n                TLogging.LogAtLevel", "answers": ["                if (AllSubmissionsOK == false)"], "all_classes": null, "length": 8128}
{"pred": "```\n            elif name == \"requires\":\n                value = test.testname.requires.show()\n            elif name == \"architectures\":\n                value = test.testname.architectures.show()\n            elif name == \"releases\":\n                value = test.testname.releases.show()\n            elif name == \"version\":\n               ", "answers": ["                    elif name == \"requires\":"], "all_classes": null, "length": 9136}
