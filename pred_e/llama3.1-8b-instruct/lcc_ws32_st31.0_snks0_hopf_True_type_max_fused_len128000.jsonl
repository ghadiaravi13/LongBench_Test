{"pred": "\t\t\tprimerak.setInventarnaKnjiga(invKnjPanel.getCode());\n\t\t\tprimerak.setPodlokacija(podlokacijaPanel.getCode());\n\t\t\tprimerak.setBrojPrimeraka(raspodelaSpinner.getValue());\n\t\t\tprimerak.setPreostalo(Integer.parseInt(preostaloTxtFld", "answers": ["\t\t\tString invKnj = invKnjPanel.getCode();"], "all_classes": null, "length": 451}
{"pred": "              SubCriteria[\"GroupID\"] = new SearchCondition<String>(\"GroupID\");\n              }\n              return (ISearchCondition<String>)SubCriteria[\"GroupID\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"GroupID\")]\n        public String GroupIDValue\n       ", "answers": ["                 SubCriteria[\"GroupID\"] = new SearchCondition<String>(\"GroupID\");"], "all_classes": null, "length": 475}
{"pred": "\t\taliases.Add (\"GB2312\", \"gb2312\");\n\t\taliases.Add (\"GB2312-80\", \"gb2312\");\n\t\taliases.Add (\"GB2312-80-1990\", \"gb2312\");\n\t\taliases.Add (\"GB2312-80-1990:199", "answers": ["\t\taliases.Add (\"GBK\", \"gb2312\");"], "all_classes": null, "length": 545}
{"pred": "        if source.get() == '[' + class_name:\n            return class_contents\n    return None\n```\nThe final answer is: \n```\ndef _parse_char_class(source):\n    for class_name, class_contents in _BRACKET_CHARACTER_CLASSES.iteritems():\n        if source.get() == '[' + class_name:\n           ", "answers": ["        if _parse_verbatim(source, '[:%s:]' % class_name):"], "all_classes": null, "length": 850}
{"pred": "#izracunavanje mera poklapanja izmedju slike i predstavnikovanih brojeva\n#izracunavanje mera poklapanja izmedju slike i predstavnikovanih brojeva\n#izracunavanje mera", "answers": ["check = numbers[5][123]"], "all_classes": null, "length": 502}
{"pred": "        assertEquals(1L, listener.assertOneGetNewAndReset().get(\"longBoxed\"));\n        sendBean(\"B\", 99, null);\n        sendBean(\"A\", 1, 99L);\n        assertEquals(99L, listener.assertOneGetNewAndReset().get(\"longBoxed\"));\n", "answers": ["        sendBean(\"A\", null, null);"], "all_classes": null, "length": 756}
{"pred": "                item.setExpanded(true);\n                item.setSelection(true);\n                break;\n            }\n            if (item.getItemCount() > 0) {\n                restoreSelection(selectionText, item.getItems());\n            }\n        }\n    }\n    private void saveSettings() {\n        if (activePropertyPage!= null) {\n            activePropertyPage", "answers": ["                tree.setSelection(new TreeItem[] { item });"], "all_classes": null, "length": 1800}
{"pred": "        nilCard.setText(Language.INSTANCE.localizeWithReplace(\"instance.nodisplay\", \"\\n\\n\"));\n    }\n} \nPlease complete the code given above. \nThe code is written in Java and it seems to be a part of a larger application. The code is for a tab in a GUI application that displays a list", "answers": ["        if (nilCard != null) {"], "all_classes": null, "length": 511}
{"pred": "\t\t\tsqrtAspect = FloatMath.sqrt(w / h);\n\t\t}\n\t}\n\tprivate void loadBitmap() throws IOException {\n\t\tbitmap = BitmapFactory.decodeStream(new FileInputStream(file));\n\t}\n\tprivate void loadBitmapJpeg() throws IOException {\n\t\tbitmap = BitmapFactory.decodeFile(file.getAbsolutePath());\n\t}\n\tprivate void loadBitmap", "answers": ["\t\t\tfloat r = (w+h)/2f;"], "all_classes": null, "length": 1042}
{"pred": "            self.__repeat = (delay, interval)\n            self.__tick_id = gobject.timeout_add(10, self._tick_cb)\n        elif delay is None and self.__repeat[0] is not None:\n            self.__repeat = (None, None)\n            if self.__tick_id is not None:\n", "answers": ["            self.__tick_id = gobject.timeout_add(10, self._tick_cb)"], "all_classes": null, "length": 703}
{"pred": "    logger.addHandler(logged_critical)\n    return logged_critical\ndef get_test_paths(**kwargs):\n    test_paths = {}\n    test_paths[\"/\"] = kwargs[\"test_paths\"]\n    return test_paths\ndef get_test_paths_from_config(config, **kwargs):\n    test_paths = {}\n    test_paths[\"/\"] =", "answers": ["    handler = handlers.LogLevelFilter(logged_critical, \"CRITICAL\")"], "all_classes": null, "length": 1196}
{"pred": "        if self.getState()!= 'idle' and self.getState()!= 'deactivated':\n            self.log.error('Wavemeter is not in idle state')\n            return -1\n        # stop the measuring thread\n        self.sig_handle_timer.emit(False)\n        # stop the wavemeter\n        self._", "answers": ["        if self.getState() == 'idle':"], "all_classes": null, "length": 885}
{"pred": "        List<String> mustStatusNames = new LinkedList<String>();\n        mustStatusNames.add(\"available\");\n        mustStatusNames.add(\"dnd\");\n        mustStatusNames.add(\"xa\");\n        mustStatusNames.add(\"offline\");\n        mustStatusNames.add(\"unknown\");\n        mustStatusNames.add(\"subscribe\");\n        mustStatus", "answers": ["        List<String> requiredStatusNames ="], "all_classes": null, "length": 678}
{"pred": "                            await cmd.Execute(this);\n                        }\n                    });\n                }\n            }\n            await StartVote(poll: poll => poll.Topic = \"Map Vote\", options: options: options => options.Options = options, timeout: timeout: 0);\n            return true;\n        }\n        private async Task StartVote(Func<Poll,", "answers": ["                            await cmd.ExecuteArmed(this, null);"], "all_classes": null, "length": 3344}
{"pred": "\t\t\tthis.label1.Location = new System.Drawing.Point(6, 53);\n\t\t\tthis.label1.Name = \"label1\";\n\t\t\tthis.label1.Size = new System.Drawing.Size(148, 18);\n\t\t\tthis.label1.TabIndex = 0;\n\t\t\tthis.label1.Text = \"Description\";\n\t\t\tthis.label1", "answers": ["\t\t\tthis.label1.Location = new System.Drawing.Point(6, 51);"], "all_classes": null, "length": 1316}
{"pred": "\t\t\t\tif (throwOnMissing && error!= null)\n\t\t\t\t\tthrow error;\n\t\t\t\tif (assembly == null) {\n\t\t\t\t\tassembly = BuildManager.GetAssembly (name);\n\t\t\t\t\tif (assembly!= null)\n\t\t\t\t\t\tassemblyCache.Add (name, assembly);\n\t\t\t\t}\n\t\t\t\treturn assembly;\n\t\t\t}\n\t\t}\n", "answers": ["\t\t\t\tif (assembly == null) {"], "all_classes": null, "length": 1336}
{"pred": "        if self.interface == 'all':\n            self.param_type = INTERFACE_ALL\n        elif self.interface.isdigit():\n            self.param_type = INTERFACE_TYPE\n        else:\n            self.param_type = INTERFACE_FULL_NAME\n        return self.param_type\n    def main(self):\n        \"\"\"Main function\"\"\"\n        self.check_params()\n       ", "answers": ["        if self.interface == 'all':"], "all_classes": null, "length": 1718}
{"pred": "    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      if (!Character.isDigit(c) && c!= ',') return false;\n    }\n    return true;\n  }\n  // Helper method to test for all numerics and commas.\n  private", "answers": ["    for (int i = 0; i < s.length(); i++)"], "all_classes": null, "length": 939}
{"pred": "\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t}\n} \n#endregion AuthorHeader\n#endregion AuthorHeader\n#endregion AuthorHeader\n#endregion AuthorHeader\n#endregion AuthorHeader\n#endregion AuthorHeader\n#endregion AuthorHeader\n#endregion AuthorHeader\n#endregion AuthorHeader\n#endregion Author", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "                            sead_partnn_l = getNeighbours(c_sead, nodemap, true);\n                        } else {\n                            sead_partnn_l = new ArrayList<Integer>();\n                        }\n                        if (sead_partnn_l!= null) {\n                            for (int k = 0; (k < sead_partnn", "answers": ["                            if (c_sead == start || c_sead == stop) {"], "all_classes": null, "length": 1426}
{"pred": "\t\t\tthis.ResumeLayout(false);\n\t\t\tthis.PerformLayout();\n\t\t\tthis.PerformLayout();\n\t\t\tthis.ResumeLayout(false);\n\t\t\tthis.PerformLayout();\n\t\t\tthis.ResumeLayout(false);\n\t\t\tthis.PerformLayout();\n\t\t\tthis.ResumeLayout(false);\n\t\t\tthis.PerformLayout();\n\t\t\tthis.ResumeLayout(false);\n\t\t\tthis.PerformLayout();\n\t\t\tthis.ResumeLayout(false);\n\t\t\tthis.PerformLayout();\n\t\t\tthis.ResumeLayout(false);\n\t\t", "answers": ["\t\t\tthis.Size = new System.Drawing.Size(371, 300);"], "all_classes": null, "length": 825}
{"pred": "    behavior = {\n        'observations': observations,\n        'translations': translations_dict,\n        'tour': tourlist,\n        }\n    with open(OutFileNames.behavior, 'w') as f:\n        json.dump(behavior, f, indent=4)\n        \n    return behavior\ndef writeBehaviorCSV(", "answers": ["    behavior_list = [ checkOnTour(tourlist, o,"], "all_classes": null, "length": 609}
{"pred": "```python\nwith Html(\"div\", class_=\"content\", id='footer') as footer:\n```\nThis line of code is used to create a new HTML element with the class \"content\" and the id \"footer\". The \"with\" statement is used to create a new scope for the HTML element, which", "answers": ["        footer = self.write_footer(None)"], "all_classes": null, "length": 960}
{"pred": "            self.progress(\"Checking we are still on the ground\")\n            if abs(m.relative_alt) > max_relalt_mm:\n                self.progress(\"Relative Altitude %u mm\" % m.relative_alt)\n                self.progress(\"Expected to be on the ground\")\n                self.progress(\"Disarming\")\n                self.disarm_vehicle", "answers": ["            if abs(m.relative_alt) > max_relalt_mm:"], "all_classes": null, "length": 577}
{"pred": "\t\t\t\t\t\t\tif (strings[0] == \"GlobalSettings\")\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar globalSettings = Session.GlobalSettings.Deserialize(node.Value);\n\t\t\t\t\t\t\t\torderManager.LobbyInfo.GlobalSettings = globalSettings;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tGame.SyncLobbyInfo();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\tcase \"SyncLobby", "answers": ["\t\t\t\t\t\t\tif (strings[0] == \"GlobalSettings\")"], "all_classes": null, "length": 591}
{"pred": "\t\t\t\tSystem.arraycopy(src, srcOffset, buf, 0, byteCount);\n\t\t\t\tbufferedPacket.setPayload(buf);\n\t\t\t\tstate = SocketReadState.READ_NOTHING;\n\t\t\t\treturn bufferedPacket;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\treturn null;\n\t}\n\t/**\n\t * This function will return the current", "answers": ["\t\t\t\tfor (int i = 0; i < byteCount; i++) {"], "all_classes": null, "length": 783}
{"pred": "        opiRuntimeToolBarDelegate = new OPIRuntimeToolBarDelegate(this);\n        opiRuntimeToolBarDelegate.init(site, input);\n        if (persist)\n        {\n            // Save input to memento\n            saveInputToMemento();\n        }\n    }\n    /** Save input to memento */\n    private void saveInputTo", "answers": ["        if (opiRuntimeToolBarDelegate != null)"], "all_classes": null, "length": 813}
{"pred": "            if (launcher!= null && launcher.isMenuVisible()) {\n                launcher.showMenu(e);\n            }\n        }\n    }\n}\nThis is a custom JComboBox class that overrides the default behavior of JComboBox to control the number of displayed items at once. It also handles text contextual menus for editable JComboBoxes. The class has several", "answers": ["            if (launcher != null && !e.isPopupTrigger()) {"], "all_classes": null, "length": 933}
{"pred": "def test_clean_last_names(self):\n    names = [\n        (\"MACDONALD\", \"MacDonald\"),\n        (\"MACDONALD\", \"MacDonald\"),\n        (\"MACDONALD\", \"MacDonald\"),\n        (\"MACDONALD\", \"MacDonald\"),\n        (\"MACDONALD\", \"Mac", "answers": ["            (\"O`NEAL \\nCarol Joy\", \"Carol Joy O'Neal\"),"], "all_classes": null, "length": 919}
{"pred": "            sort_by, sort_order = sort\n            if sort_by == 'uploadDate':\n                key_func = itemgetter('upload_date')\n            elif sort_by == 'displayname':\n                key_func = itemgetter('display_name')\n            else:\n                raise ValueError(\"Invalid sort_by value: %s\" % sort", "answers": ["            if sort[0] == 'uploadDate':"], "all_classes": null, "length": 1853}
{"pred": "            }\n        }\n    }\n}\n```\nThe final answer is: \n```\n            {\n                index = -1;\n                Current = default;\n            }\n            public bool MoveNext()\n            {\n                if (index < list.objects.Count)\n                {\n                    Current = list.objects[index];\n                    index++;\n                    return true", "answers": ["                index = -1;"], "all_classes": null, "length": 1053}
{"pred": "                parentpath = parentpath[len(cwd):]\n                if parentpath.endswith(os.sep):\n                    parentpath = parentpath[:-1]\n    return unionrepository(ui, path, parentpath)\ndef _test():\n    import test\n    test.main(globals())\nif __name__ == '__main__':\n    _test", "answers": ["                parentpath = parentpath[len(cwd):]"], "all_classes": null, "length": 795}
{"pred": "        if sys.version_info[0] == 2:\n            kwargs.pop('sinfo', None)\n        record = logging.LogRecord(name, level, fn, lno, msg, args, exc_info,\n                                   **kwargs)\n        record.__dict__.update(structured)\n        return record\nclass StructuredFormatter", "answers": ["        if sys.version_info[0] == 2:"], "all_classes": null, "length": 897}
{"pred": "                                m.Skills.Spellweaving.BaseFixedPoint += 1;\n                                m.Mana -= 20;\n                            }\n                            else\n                            {\n                                m.SendMessage(\"You have reached the skill cap for that skill.\");\n                            }\n                        }\n                        else\n                        {\n                            m.SendMessage(\"You need 100 gold pieces to", "answers": ["                                m.Mana -= 20;"], "all_classes": null, "length": 569}
{"pred": "            for key, value in hash_.items():\n                if key in model._meta.fields:\n                    fields[key] = value\n                else:\n                    extra_attrs[key] = value\n            model_obj = model.objects.get(**fields)\n            for key, value in extra_attrs.items():\n                setattr(model_obj, key,", "answers": ["            for k, v in hash_.iteritems():"], "all_classes": null, "length": 546}
{"pred": "            return page_not_authorized(req=req, referer=\"/edit\",\n                                       text=auth_message, navtrail=navtrail)\n        recid = argd['recid']\n        body, errors, warnings = perform_request_newticket(ln, recid)\n        return page(title = _(\"New Ticket\"),\n                    body =", "answers": ["            return page_not_authorized(req=req, referer=\"/edit\","], "all_classes": null, "length": 756}
{"pred": "```\n      use_tty:\n        version_added: '2.5'\n        default: 'yes'\n        description: add -tt to ssh commands to force tty allocation\n        env: [{name: ANSIBLE_SSH_USETTY}]\n        ini:\n          - key: use_tty\n            section", "answers": ["        - {key: usetty, section: ssh_connection}"], "all_classes": null, "length": 968}
{"pred": "\t\tfor(int x = 0; x < DataCollection.count(); x++)\n\t\t{\n\t\t\tims.dto.NASMessage message = new ims.dto.NASMessage();\n\t\t\tmessage.encodeRecord(DataCollection.get(x));\n\t\t\tdataString += message.getMessage();\n\t\t}\n\t\treturn dataString;\n\t}\n\tprivate String encode", "answers": ["\t\tWardlistRecord data = (WardlistRecord)DataCollection.get(0);"], "all_classes": null, "length": 1476}
{"pred": "            record_add_field(rec, '300', subfields=[('a', page_count)])\n        abstract = self.get_abstract(xml)\n        if abstract:\n            record_add_field(rec, '520', subfields=[('a', abstract)])\n        keywords = self.get_keywords(xml)\n        if keywords:\n            for k in keywords", "answers": ["            record_add_field(rec, '300', subfields=[('a', page_count)])"], "all_classes": null, "length": 1283}
{"pred": "                assertEquals(A.getQuick(r, c), B.getQuick(c, r));\n            }\n        }\n    }\n    public void testViewRow() {\n        IntMatrix1D row = A.viewRow(NROWS / 2);\n        assertEquals(NCOLUMNS, row.size());\n        for (int c = 0;", "answers": ["                assertEquals(A.getQuick(r, NCOLUMNS - 1 - c), B.getQuick(r, c));"], "all_classes": null, "length": 1319}
{"pred": "# Send Unit Data\n                 (PacketField(\"commandSpecificData\", ENIPSendUnitData,\n                             ENIPSendUnitData),\n                  lambda pkt: pkt.commandId == 0x70),\n                # Indicate Status\n                (PacketField(\"commandSpecificData\", None, CommandSpecificData),\n                 lambda pkt", "answers": ["                 lambda pkt: pkt.commandId == 0x6f),"], "all_classes": null, "length": 625}
{"pred": "\t\t//... BUSINESS LOGGIC... //\n\t\t//... BUSINESS LOGGIC... //\n\t\t//... BUSINESS LOGGIC... //\n\t\t//... BUSINESS LOGGIC... //\n\t\t//... BUSINESS LOGGIC... //\n\t\t//... BUSINESS LOGGIC... //\n\t\t//...", "answers": ["\t\tfinal CoordinateReferenceSystem crs = reader.getCrs();"], "all_classes": null, "length": 805}
{"pred": "            ((Creature) e).setTamed(false);\n        }\n        \n        return e;\n    }\n}\n```\nThe code is almost complete, but there are a few issues that need to be addressed. The code is an enum for MobArena, a Minecraft plugin, and it's used to spawn creatures in the game", "answers": ["            Creature c = (Creature) e;"], "all_classes": null, "length": 386}
{"pred": "\t\t\tMemoryStream ms = new MemoryStream();\n\t\t\tbin.Write(lookups, 0, lookups.Length);\n\t\t\tbin.Write(new byte[4], 0, 4);\n\t\t\tbin.Write(new byte[4], 0, 4);\n\t\t\tbin.Write(new byte[4], ", "answers": ["\t\t\tushort* line = (ushort*)bd.Scan0;"], "all_classes": null, "length": 1243}
{"pred": "                    if (house == null)\n                        house = BaseHouse.FindHouseAt(new Point3D(m.X, m.Y + 1, 127), m.Map, 16);\n                    if (house!= null)\n                        bonus = 50.0;\n                }\n                int range = Math.Min((int)((100", "answers": ["                    if (house == null)"], "all_classes": null, "length": 585}
{"pred": "\t\t\t\t\t{\n\t\t\t\t\t\tConsole.WriteLine(displaySet.Name);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthrow;\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tDispose(displaySets);\n\t\t\t\tDispose(seriesCT, seriesPET, seriesPETCor);\n\t\t\t}\n\t\t}\n\t\t[Test]\n\t\tpublic void TestPETFusion", "answers": ["\t\t\t\t\t\tConsole.WriteLine(\" > {0}\", displaySet.Descriptor.Description);"], "all_classes": null, "length": 803}
{"pred": "    \"\"\" Find the appropriate reader for a file \"\"\"\n    ext = os.path.splitext(fname)[1][1:]\n    if ext in supported_extensions():\n        return supported_extensions()[ext]\n    else:\n        raise ValueError(\"File %s has unknown extension %s\" % (fname, ext))\ndef read_timestamps(fname):\n", "answers": ["    exts = supported_extensions()"], "all_classes": null, "length": 653}
{"pred": "\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\t\tif (cgn.depth == -1) continue;\n\t\t\t\t\t\tif (cgn.depth > 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tGraphNode parent = graphNodes.get(cell.getParent());\n\t\t\t\t\t\t\tif (parent == null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tSystem.out.println(\"", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "\t\t\t    case 189: // -/_ key\n                    if (CAPS)\n                    {\n                        Program.keyH_ENT = (Program.keyH_ENT & (~4));\n                    }\n                    else\n                    {\n                        Program.keyH_ENT = (Program.keyH_ENT & (~2));\n                        Program.keyB_SPC = (Program", "answers": ["\t\t\t    case 189: // -/_ key"], "all_classes": null, "length": 1748}
{"pred": "out_list += [weights_dmat_all[index]]\nout_comment += ['Weights of distortion matrix']\nout_units += ['']\nresults.write(out_list, names=out_names, header=header, comment=out_comment,\n              units=out_units, extname='DATA')\nresults.close()\n```\nThe code is a part of a larger", "answers": ["        out_list += [weights_dmat_all[index]]"], "all_classes": null, "length": 1374}
{"pred": "    obj = obj.lstrip(\"\\ufeff\") if obj.startswith(\"\\ufeff\") else obj\n    lines = obj.splitlines()\n    if not lines:\n        return []\n    if implementation == RisImplementation.BASE:\n        parser = Ris(lines, mapping, strict)\n    elif implementation == RisImplementation.WOK:\n        parser", "answers": ["    obj = obj.lstrip(\"\\ufeff\")"], "all_classes": null, "length": 676}
{"pred": "\t\tif (orig == null ||!orig.exists() || orig.length() == 0)\n\t\t\treturn;\n\t\tString newUuid = mDbHelper.getBookUuid(newId);\n\t\tcopyFileToCoverImageIfMissing(orig, newUuid);\n\t}\n\t/**\n\t * Copy the UUID-based cover from its current location", "answers": ["\t\tif (orig == null || !orig.exists() || orig.length() == 0)"], "all_classes": null, "length": 866}
{"pred": "            strength += this.calculateBestTableStrength(opponent.getValue());\n        }\n        tableStrengthScore.setScore(strength);\n        tableStrengthScore.setPlayer(player);\n        this.addAScore(tableStrengthScore);\n    }\n    private int calculateBestTableStrength(Player player) {\n        ArrayList<PlayerScore> clonePlayerScore = new ArrayList", "answers": ["            for (PlayerScore scoreTable : this.scoreTable) {"], "all_classes": null, "length": 1212}
{"pred": "            res = c.get(\"/\")\n            res.get_data()\n            assert res.status_code == 401\n    def _make_auth_headers(self, password):\n        return Headers({\"Authorization\": f\"Basic {base64.b64encode(password.encode()).decode()}\"})\n    def _make_auth_headers(self, password):\n        return", "answers": ["            res = c.get(\"/\")"], "all_classes": null, "length": 919}
{"pred": "```java\nnsClientService = mLocalBinder.getService();\n```\nThis line of code is used to get the NSClientService instance from the LocalBinder. The LocalBinder is a binder that is used to communicate with the NSClientService. The getService() method of the LocalBinder returns the NSClientService instance.", "answers": ["                nsClientService = mLocalBinder.getServiceInstance();"], "all_classes": null, "length": 516}
{"pred": "```python\n            # Now we have the makefiles, we can build the OpenSSL library\n            # and the Python extensions.\n            if arch == \"x86\":\n                # 32 bit build\n                os.system(\"nmake -f \"+makefile+\" \"+make_flags)\n            else:\n                # 64", "answers": ["            if arch == \"amd64\":"], "all_classes": null, "length": 982}
{"pred": "\t\tfor(int i=0; i<length; i++){\n\t\t\tif(i>=tempCostList.Length){\n\t\t\t\ttowerList[index].baseStat.costs[i]=0;\n\t\t\t}\n\t\t\telse{\n\t\t\t\ttowerList[index].baseStat.costs[i]=tempCostList[i];\n\t\t\t}\n\t\t", "answers": ["\t\tfor(int i=0; i<length; i++){"], "all_classes": null, "length": 3890}
{"pred": "\t\t\t\tAddCraft( typeof( Axe ), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0", "answers": ["\t\t\t\tAddRes( index, typeof( BrilliantAmber ), 1032697, 1, 1044240 );"], "all_classes": null, "length": 3677}
{"pred": "def test_gwt_plurals(self):\n    \"\"\"Test conversion of gwt plurals.\"\"\"\n    propsource = \"\"\"# GWT plurals\npref1=1\npref2=2\npref3=3\npref4=4\npref5=5\npref6=6\npref7=7", "answers": ["        options = self.help_check(options, \"-P, --pot\")"], "all_classes": null, "length": 1336}
{"pred": "\t\t\tforeach (object obj in members) {\n\t\t\t\t// What should be done here?\n\t\t\t}\n\t\t}\n\t}\n} \nPlease complete the code given above. \n\n```csharp\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Reflection;\nusing System.Text;\n\n", "answers": ["\t\t\tforeach (Signal sig in sigs.Values) {"], "all_classes": null, "length": 1298}
{"pred": "    module = AnsibleModule(argument_spec=fields)\n    connection = Connection(module._socket_path)\n    if not connection:\n        module.fail_json(msg=FAIL_SOCKET_MSG)\n    fos = FortiOSHandler(connection)\n    is_error, has_changed, msg = fortios_wireless_controller(data=module.params, fos=f", "answers": ["    module = AnsibleModule(argument_spec=fields,"], "all_classes": null, "length": 1009}
{"pred": "    node.setLeaf(leaf);\n  }\n  public void setLoaded(boolean loaded) {\n    this.loaded = loaded;\n  }\n  public void setLoading(boolean loading) {\n    this.loading = loading;\n  }\n  public void setPresentableTextContainer(Element presentableTextContainer) {\n    this.presentableTextContainer =", "answers": ["    if (node instanceof MutableNode) {"], "all_classes": null, "length": 568}
{"pred": "            return GroupByWithMinSize(prevChildren, c => c.Published, c => c.Published.Year);\n        }\n        private IEnumerable<ContentItem> ChildrenWithArchive(IEnumerable<ContentItem> previousChildren, Query query, GroupFactory factory)\n        {\n            if (AllowDirectQuery)\n            {\n                var archive", "answers": ["            var page = prevChildren.Take(StartPagingTreshold).ToList();"], "all_classes": null, "length": 781}
{"pred": "        soaResponse = dns.message.make_response(query)\n        soaResponse.use_edns(edns=False)\n        soaResponse.answer.append(soa)\n        responses.append(soaResponse)\n        response = dns.message.make_response(query)\n        response.use_edns(edns=False)\n        content = \"\"\n        for i in", "answers": ["        soaResponse = dns.message.make_response(query)"], "all_classes": null, "length": 648}
{"pred": "        if (kind == null) {\n            throw new IllegalArgumentException(\"Unknown javaccKind: \" + javaccKind);\n        }\n        return kind;\n    }\n    public int getJavaCCKind() {\n        return javaccKind;\n    }\n    public TokenCategory getCategory() {\n        return category;\n    }\n    public", "answers": ["        if (kind == null) {"], "all_classes": null, "length": 524}
{"pred": "        }\n        public Control GetLabelForPercentageControl()\n        {\n            return this.FindControlRecursive(PercentageControlID) as Label;\n        }\n        public Control GetLabelForTitleControl()\n        {\n            return this.FindControlRecursive(\"Title\") as Label;\n        }\n        #endregion\n    }\n}\n```\nThe code is", "answers": ["            return this.FindControlRecursive(DescriptionControlID) as Label;"], "all_classes": null, "length": 450}
{"pred": "```python\n            query_string = urllib.urlencode(query_args)\n            path = path + '?' + query_string\n```\n```python\n        if self.is_secure():\n            protocol = 'https'\n        else:\n            protocol = 'http'\n        if sender:\n            sender = sender\n        else:\n            sender =", "answers": ["            path += '?' + query_args"], "all_classes": null, "length": 1198}
{"pred": "\t\t\t\tcanvas.drawBitmap(tiles[i].getBitmap(), left, top, null);\n\t\t\t}\n\t\t}\n\t}\n\tprivate void drawPath(Canvas canvas, double localScale){\n\t\tfor(int i = 0; i < edges.size(); i++){\n\t\t\tLatLonPos pos = edges.get(i).getPos", "answers": ["\t\t\t\tRectF destRect = new RectF(left, top, right, bottom);"], "all_classes": null, "length": 1184}
{"pred": "            HueInfo = new Dictionary<DyeType, Tuple<int, int>>();\n            HueInfo.Add(DyeType.None, new Tuple<int, int>(0, 0));\n            HueInfo.Add(DyeType.WindAzul, new Tuple<int, int>(0x1A7, 0x1A", "answers": ["            HueInfo = new Dictionary<DyeType, Tuple<int, int>>();"], "all_classes": null, "length": 535}
{"pred": "                this.alertDialog.show(MSGS.deleteCertificate(), MSGS.deleteCertificateConfirm(), new ConfirmListener() {\n                    @Override\n                    public void onConfirm() {\n                        CertificateListTabUi.this.gwtCertificatesService.uninstallCertificate(selected.getAlias(), c -> {\n                            CertificateListTabUi.this.refresh();\n                        });\n                    }\n               ", "answers": ["                final Modal modal = new Modal();"], "all_classes": null, "length": 698}
{"pred": "\t\t\t\t\"    {0}\" +\n\t\t\t\t\"    Public Class SomeClass{0}\" +\n\t\t\t\t\"        {0}\" +\n\t\t\t\t\"        Private _someField As SomeType{0}\" +\n\t\t\t\t\"        {0}\" +\n\t\t\t\t\"        Public Sub New(){0}\" +\n\t\t\t", "answers": ["\t\t\t\t\"    {0}\" +"], "all_classes": null, "length": 1270}
{"pred": "            list.append(self.file + os.extsep + ext)\n        return list\n    def do_close(self):\n        if self.dbm:\n            self.dbm.close()\n            self.dbm = None\n    def do_open(self, flags):\n        self.dbm = self.dbmmodule.open(self.file, flags)\n", "answers": ["            if os.access(self.file + os.extsep + ext, os.F_OK):"], "all_classes": null, "length": 1142}
{"pred": "        return \"ImageIcon: \" + description;\n    }\n    /**\n     * Returns the accessible description of the icon.\n     *\n     * @return the accessible description of the icon\n     */\n    public String getAccessibleDescription() {\n        return description;\n    }\n    /**\n     * Returns the accessible role of the icon", "answers": ["        if (description != null) {"], "all_classes": null, "length": 1934}
{"pred": "            all_plugins = self._bot.plugin_manager.getAllPlugins()\n        return '\\n'.join(['%s (%s)' % (plugin.name, plugin.documentation) for plugin in all_plugins])\n    @botcmd(admin_only=True)\n    def plugin_list(self, _, args):\n        \"\"\" list all the plugins loaded by the", "answers": ["            all_plugins = self._bot.plugin_manager.get_all_plugin_names()"], "all_classes": null, "length": 833}
{"pred": "                \"vdom\": {\"required\": False, \"type\": \"str\"}\n            }\n        }\n    }\n    module = AnsibleModule(argument_spec=fields)\n    connection = Connection(module._socket_path)\n    if not connection:\n        module.fail_json(msg=FAIL_SOCKET_MSG)\n    fos = FortiOSHandler(connection", "answers": ["                \"vdom\": {\"required\": False, \"type\": \"str\"}"], "all_classes": null, "length": 1164}
{"pred": "            throw new IOException();\n        }\n        fileDecoder = savedDecoder;\n    }\n    private native int readByte(Object fileDecoder);\n    private native int bytesRemain(Object fileDecoder);\n    private native int readBytes(Object fileDecoder, byte b[], int off, int len);\n    private native Object clone(Object fileDecoder", "answers": ["            throw new IOException();"], "all_classes": null, "length": 880}
{"pred": "\t\t\t\treturn originalObject!= null;\n\t\t\tcase ActivitydiagramPackage.TRACED_ACTIVITY__TRACE_SEQUENCE:\n\t\t\t\treturn traceSequence!= null &&!traceSequence.isEmpty();\n\t\t}\n\t\treturn super.eIsSet(featureID);\n\t}\n} \nPlease complete the code. \n\nNote: The code is generated by the EM", "answers": ["\t\t\t\treturn originalObject != null;"], "all_classes": null, "length": 533}
{"pred": "\t\t// TODO: implement this method\n\t\treturn null;\n\t}\n} \npackage org.opennms.netmgt.importer.operations;\n\nimport java.util.List;\n\nimport org.opennms.netmgt.model.OnmsNode;\nimport org.opennms.netmgt.dao.api.OnmsNodeDao;\n\npublic class", "answers": ["\t\tList<Event> events = new LinkedList<Event>();"], "all_classes": null, "length": 888}
{"pred": "    if module.check_mode:\n        module.exit_json(changed=changed, queries=publication.executed_queries, **publication.get_info())\n    else:\n        if state == 'present':\n            if publication.exists:\n                changed = publication.update(tables, params, owner)\n            else:\n                changed = publication.create(tables", "answers": ["    if state == 'present':"], "all_classes": null, "length": 2176}
{"pred": "\t\t\tint version = reader.ReadInt();\n\t\t\tif ( version == 0 )\n\t\t\t{\n\t\t\t\t// Add code here to handle version 0\n\t\t\t}\n\t\t}\n\t}\n}\n} \n/////////////////////////////////////////////////////\n//\n//Created by:  Morrigan and Ashlar, together forever.\n//\n/////////////////////////////////////////////////////\n```\nThe", "answers": ["\t\t\tint version = reader.ReadInt();"], "all_classes": null, "length": 737}
{"pred": "        return T.mean(T.sum(pre_sigmoid_nv *\n                            T.log(pre_sigmoid_nv) +\n                            (1 - pre_sigmoid_nv) *\n                            T.log(1 - pre_sigmoid_nv),\n                            axis=1))\n        # end-snippet-4\n    def train_with_cd(self, train_set_x", "answers": ["        of log(sigmoid(..)) and will not apply the wanted"], "all_classes": null, "length": 1545}
{"pred": "            return new TripChain(Person);\n        }\n        #endregion ITripChain Members\n    }\n}\n```\nThe final answer is: \n```csharp\npublic ITripChain Clone()\n{\n    return new TripChain(Person);\n}\n``` \nThis code is a clone method for the TripChain class. It creates a", "answers": ["            ITripChain chain = (ITripChain)MemberwiseClone();"], "all_classes": null, "length": 798}
{"pred": "        super(edge.getOwner(), new Rectangle(0, 0, 0, 0));\n        role = new FigRole();\n        role.setGroup(this);\n        ordering = new FigOrdering();\n        ordering.setGroup(this);\n        add(role);\n        add(ordering);\n        add(new FigMultiplicity());\n        add", "answers": ["        role = new FigRole();"], "all_classes": null, "length": 2539}
{"pred": "                    throw ex;\n                }\n            }\n        }\n    }\n}\n#endif\n```\nThe code is written in C# and is a part of the NLog logging framework. The PerfCounterTarget class is a target that increments a specified performance counter on each write. The code is mostly complete, but there are a few", "answers": ["                    if (LogManager.ThrowExceptions) throw ex;"], "all_classes": null, "length": 849}
{"pred": "            name,checksum = checksums.get(block=False)\n            assert os.path.isfile( pjoin( cfg.webdav_backend_directory, name ) )\n            with open(pjoin(cfg.webdav_backend_directory, name), \"rb\") as f:\n                m = hashlib.md5()\n                m.update( f.read()", "answers": ["            name, checksum = checksums.get(block=False)"], "all_classes": null, "length": 599}
{"pred": "        stac = self.labels.setdefault(args[0], stac)\n        self.stack_count = stac\n    @stacker(Pseudop.JUMP_IF_FALSE)\n    def stacker_jump_if_false(self, pseudop, args, push, pop):\n        stac = self.stack_count\n        stac =", "answers": ["        dest = args[0]"], "all_classes": null, "length": 655}
{"pred": "\t\t\t\tresult.append((ofs, \"\\x00\" * mem_len))\n\t\t\t\tlen -= mem_len\n\t\t\t\tofs += mem_len\n\t\t\t\tcontinue\n\t\t\tresult.append((ofs, self.data.read(cur.offset + prog_ofs, file_len)))\n\t\t\tlen -= file_len\n\t\t\tofs += file_len\n\t\treturn", "answers": ["\t\t\t\tresult += [DATA_ORIGINAL] * mem_len"], "all_classes": null, "length": 1032}
{"pred": "\t\t\tint endIndex = value.indexOf(\"}\", startIndex);\n\t\t\tif (endIndex == -1) {\n\t\t\t\tthrow new IllegalArgumentException(\"Macro not closed!\");\n\t\t\t}\n\t\t\tString macroName = value.substring(startIndex + 2, endIndex);\n\t\t\tString macroValue = macroHandler.getMacroValue(macroName);\n\t\t\tif (", "answers": ["\t\t\tStringBuffer result = new StringBuffer();"], "all_classes": null, "length": 3860}
{"pred": "      elements.add(ASN1Boolean.encodeAsBoolean(false, TYPE_INCLUDE_AUTHN_ENTRY));\n    }\n    if (! includeAuthZEntry)\n    {\n      elements.add(ASN1Boolean.encodeAsBoolean(false, TYPE_INCLUDE_AUTHZ_ENTRY));\n    }\n    if (attributes!= null)\n    {\n      final ArrayList<ASN", "answers": ["      elements.add(new ASN1Boolean(TYPE_INCLUDE_AUTHN_ENTRY, false));"], "all_classes": null, "length": 1468}
{"pred": "\t\tfor(int i = 0; i < beans.length; i++)\n\t\t{\n\t\t\tcoll.add(beans[i].buildVo());\n\t\t}\n\t\treturn coll;\n\t}\n} \n//#############################################################################\n//#                                                                           #\n//#  This file was generated by the Object-Relational Mapping (ORM) Framework ", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 773}
{"pred": "\t\t\treturn new EmptyIterator<String>();\n\t\t}\n\t}\n}\npackage com.idevicesinc.sweetblue;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.Map;\nimport android.content.Context;\nimport com.idevicesinc.sweetblue.utils.EmptyIterator;\nimport com.idevicesinc.sweet", "answers": ["\t\t\treturn new EmptyIterator<String>();"], "all_classes": null, "length": 526}
{"pred": "            var serializer = GetResponseSerializer(contentType);\n            if (serializer == null)\n                throw new NotSupportedException(\"ContentType not supported: \" + contentType);\n            var httpRes = new HttpResponseStreamWrapper(httpResponse);\n            serializer(requestContext, response, httpRes);\n        }\n        private ResponseSerializerDelegate GetResponseSerializer(string contentType", "answers": ["            var serializer = GetResponseSerializer(contentType);"], "all_classes": null, "length": 488}
{"pred": "        }\n    }\n    public void ShowPhoneCallRecord(string CallNumber)\n    {\n        if (serviceProxy == null)\n            throw new ApplicationException(LocalizedResourceManager.GetString(\"DotNetScript\", \"DynamicsSession.Error.NotLoggedIn\"));\n        Guid CallNumberGuid = Guid.Parse(CallNumber);\n        ShowPhoneCallRecord(CallNumber", "answers": ["            string CallNumberGuid = CallNumber.ToString();"], "all_classes": null, "length": 648}
{"pred": "        }\n        text = text.substring(nextToken + 7);\n        nextToken = text.indexOf(\" width=\");\n        if (nextToken < 0) {\n            throw (new IllegalArgumentException(\"Invalid EXPLAIN string: no \\\" width=\\\"\"));\n        }\n        try {\n            width = Long.parseLong(text.substring(0, next", "answers": ["        text = text.substring(nextToken + 7);"], "all_classes": null, "length": 772}
{"pred": "        n = m + i16 - 2;\n        i25 = 1;\n        if ((paramInt1!= 0? 1 : 0)!= 0)\n        {\n          Dlartg(localdoubleW1, localdoubleW2, localdoubleW3, localdoubleW4", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "                if (constraintEntry.startsWith(\"keySize\")) {\n                    Matcher matcher = keySizePattern.matcher(constraintEntry);\n                    if (matcher.matches()) {\n                        String op = matcher.group(1);\n                        String size = matcher.group(2);\n                        if (op.equals(\"<=\")) {\n                            constraintsMap.put(size, new", "answers": ["                if (debug != null) {"], "all_classes": null, "length": 983}
{"pred": "      DefaultPort proxy_port = proxyCell.getPort(0);\n      DefaultPort device_port = null;\n      ProxyInfo proxy_info = (ProxyInfo) proxyCell.getUserObject();\n      ConfigElement proxy_elt = proxy_info.getProxy();\n      int unit_number = proxy_elt.getPropertyValue(0);\n      // XXX: This is", "answers": ["      ProxyInfo proxy_info = (ProxyInfo) proxyCell.getUserObject();"], "all_classes": null, "length": 2936}
{"pred": "                object obj = this.ViewState[\"SubmitText\"];\n                return (obj == null)? true : (bool)obj;\n            }\n            set\n            {\n                this.ViewState[\"SubmitText\"] = value;\n            }\n        }\n        /// <summary>\n        /// \n        /// </summary>\n        [Meta]\n", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "```python\ndef create_new_filesystem(self, new_path):\n    \"\"\"Creates a collection starting from a root directory.\n    Args:\n        new_path: The path to recursively search for the collection within.\n    Returns:\n        None\n    \"\"\"\n    os.mkdir(new_path)\n    for artist in self.collection:\n        artist", "answers": ["                for song in self.collection[artist][album]:"], "all_classes": null, "length": 826}
{"pred": "        SecurityManager sm = System.getSecurityManager();\n        if (sm!= null)\n            sm.checkPermission(SecurityConstants.GET_CLASSLOADER_PERMISSION);\n    }\n    private static void checkForDuplicatePkgs(Configuration cf,\n                                              Function<String, ClassLoader> clf)\n    {\n        Set<String> seen = new HashSet<>();\n", "answers": ["        SecurityManager sm = System.getSecurityManager();"], "all_classes": null, "length": 3987}
{"pred": "\t\t\t\t// Set the order status to complete\n\t\t\t\tSetOrderStatus(order, OrderStatus.Complete);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Set the order status to complete\n\t\t\t\tSetOrderStatus(order, OrderStatus.Complete);\n\t\t\t}\n\t\t\t// Add a note to the order\n\t\t\torder", "answers": ["\t\t\t\torder.ShippingStatusId = (int)ShippingStatus.Delivered;"], "all_classes": null, "length": 5265}
{"pred": "    }\n}\n```\nThe code is a part of a data builder class that creates various objects in a database. The method `createAutoNumberingScheme` is incomplete and needs to be completed. The method should create an `AutoNumberingScheme` object and persist it to the database. \n\nHere is the completed", "answers": ["        AutoNumberingScheme ans = new AutoNumberingScheme();"], "all_classes": null, "length": 5629}
{"pred": "\t\t\tvar source = new int [0];\n\t\t\tvar result = source.SingleOrDefault ();\n\t\t\tAssert.That (result, Is.EqualTo (0));\n\t\t}\n\t\t[Test]\n\t\tpublic void SingleOrDefault_SourceWithOneElement_ReturnsSingleElement ()\n\t\t{\n\t\t\tvar source = new int [1];\n\t\t\tvar result =", "answers": ["\t\t\tvar source = Read<int> ();"], "all_classes": null, "length": 5586}
{"pred": "\t\t\t\t\tArrayList<String> valuesList = new ArrayList<String>();\n\t\t\t\t\tArrayList<String> domainsList = new ArrayList<String>();\n\t\t\t\t\tfor (int i = 0; i < tempValues.length; i++) {\n\t\t\t\t\t\tvaluesList.add(tempValues[i]);\n\t\t\t\t\t\tdomainsList.add(tempDomains[i]);\n\t\t\t\t\t}\n\t\t\t\t\tString[]", "answers": ["\t\t\t\t\tArrayList<String> valuesList = new ArrayList<String>();"], "all_classes": null, "length": 4724}
{"pred": "        return self._conf_helper('sp', options)\n    def _create_devs(self):\n        self.sp = self._conf_helper('sp', options)\n        self.fetch = self._conf_helper('fetch', options)\n        self.alias = self.fetch\n        self.status_ch = self._conf_helper('status_ch", "answers": ["        if dev_obj == self.fetch:"], "all_classes": null, "length": 4119}
{"pred": "    if (success) {\n      // upload was successful, so we can now delete the temp files\n      cleanup();\n    } else {\n      // upload failed, so we need to leave the temp files around\n      // so that the user can try again\n      deleteTempFiles = false;\n    }\n    return", "answers": ["    return success ? suggestedClassName : null;"], "all_classes": null, "length": 6878}
{"pred": "            Workplane().box(1,1,1).edges().fillet(0.1)\n        Fillets are one of the cases where you may need to use the add() method to select\n        multiple edges. For example, this example creates a cube with the top and bottom edges\n        filleted", "answers": ["            s = Workplane().box(1,1,1).faces(\"+Z\").edges().fillet(0.1)"], "all_classes": null, "length": 4053}
{"pred": "            sleep(0.01)\n        # Reading FIFO count\n        fifoCount = self.getFIFOCount()\n        #print('Current FIFO count = %s' % fifoCount)\n        # Writing final memory update 6/7 (function unknown)\n        j = 0\n        while ((j < ", "answers": ["            fifoCount = self.getFIFOCount()"], "all_classes": null, "length": 6204}
{"pred": "def bulk_print_memberships(names):\n\t#... (rest of the code remains the same)\n\t#... (rest of the code remains the same)\n\t#... (rest of the code remains the same)\n\t#... (rest of the code remains the same)\n\t#... (rest of the code remains", "answers": ["\t\tnames = names['names']"], "all_classes": null, "length": 4346}
{"pred": "\t\t\t\twhile (itHistory.hasNext()) {\n\t\t\t\t\tFLRHistory history = (FLRHistory) itHistory.next();\n\t\t\t\t\tdata[i][0] = history.getI_id();\n\t\t\t\t\tdata[i][1] = history.getI_id();\n\t\t\t\t\tdata[i][2] = history.getI_id();\n\t\t\t\t\tdata[i][", "answers": ["\t\t\t\twhile (itHistory.hasNext()) {"], "all_classes": null, "length": 4200}
{"pred": "                list.Add(1073741824, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, 0x7FFF, ", "answers": ["                list.Add(1072378); // <br>Only when full set is present:\t\t\t\t"], "all_classes": null, "length": 6963}
{"pred": "         sb.append((char) ('a' + d - 10));\n      }\n      d = (c >> 6) & 0x3f;\n      if (d < 10) {\n         sb.append((char) ('0' + d));\n      } else {\n         sb.append((char)", "answers": ["         sb.append((char) ('a' + d - 10));"], "all_classes": null, "length": 4005}
{"pred": "\t\t\tif (type == PacketTypes.PlayerInfo)\n\t\t\t{\n\t\t\t\t// Handle player info packet\n\t\t\t}\n\t\t\telse if (type == PacketTypes.PlayerInfo2)\n\t\t\t{\n\t\t\t\t// Handle player info packet 2\n\t\t\t}\n\t\t\telse if (type == PacketTypes.PlayerInfo3)\n", "answers": ["\t\t\tvar player = Players[e.Msg.whoAmI];"], "all_classes": null, "length": 4973}
{"pred": "        // create path and map\n        String localVarPath = \"/organizations/{organizationId}/stops\".replaceAll(\"\\\\{\",\"\").replaceAll(\"}\\\\\",\"\")\n       .replaceAll(\"\\\\{\" + \"organizationId\" + \"\\\\}\", apiClient.escapeString(organizationId.toString()));\n        List<Pair> localVarQueryParams = new ArrayList<Pair>();\n", "answers": ["        if (organizationId == null) {"], "all_classes": null, "length": 5074}
{"pred": "            X           -   nodes\n            W           -   weights\n          -- ALGORITHM --\n            *   Use  the  Gauss-Kronrod  formula  with  15  Gauss  points and\n                23 Kronrod points.\n          -- REFERENCES --\n            *   P. Rabinowitz, \"", "answers": ["            X           -   array[0..N-1] - array of quadrature nodes,"], "all_classes": null, "length": 4527}
{"pred": "        self.assertEqual(modulestore().get_course_history(course_id).count(), 1)\n```  # pylint: disable=invalid-name\n        # pylint: disable=too-many-arguments\n        # pylint: disable=too-many-locals\n        # pylint: disable=too-many-statements\n        # pylint:", "answers": ["            'deleting_user', parent.version_agnostic(), category_queue[0]"], "all_classes": null, "length": 4289}
{"pred": "                                    + Long.toString(Math.abs(i)));\n                                }\n                                else {    //not \"log10\"-type label\n                                    if (i >= 0) {   //if positive exponent then\n                                                    //make integer\n                                        NumberFormat format\n                                            = getNumberFormatInstance();\n                                        tickLabel = format.format(tick", "answers": ["                                            + \"10^\" + Math.abs(i));"], "all_classes": null, "length": 4434}
{"pred": "               .map(PushedAsset::getAssetId)\n               .collect(Collectors.toList());\n        assertEquals(1, newBundlePushedAssets.size());\n    }\n    private static class ModifiableList<T> extends ArrayList<T> {\n        public void addAll(final Collection<? extends T> c) {\n            super.addAll(c);\n", "answers": ["                .map(pushedAsset -> pushedAsset.getEnvironmentId())"], "all_classes": null, "length": 6390}
{"pred": "        String fileName = \"file-\" + RUNID + \".txt\";\n        // Create a file in the root folder\n        Document file = createFile(getRootNodeId(), fileName, content);\n        // Create a shared link to the file\n        QuickShareLink sharedLink = createSharedLink(file.getNodeRef(), \"shared", "answers": ["        String fileName1 = \"fileOne_\" + RUNID + \".txt\";"], "all_classes": null, "length": 4714}
{"pred": "            if (obj instanceof Number) {\n                return true;\n            }\n            if (obj instanceof BigInteger) {\n                return true;\n            }\n            if (obj instanceof BigDecimal) {\n                return true;\n            }\n            if (obj instanceof BigInteger) {\n                return true;\n            }\n            if (obj instanceof BigDecimal) {\n", "answers": ["            if (obj == null) {"], "all_classes": null, "length": 4128}
{"pred": "                                if (grapple.DockUid!= part.Uid)\n                                {\n                                    Syntax.Warning(part, \"Grappling part is not grappled to this part\");\n                                }\n                            }\n                            else\n                            {\n                                other.AttachedToNode = true;\n                            }\n                        }\n                    }\n                    else\n                    {\n                        Syntax", "answers": ["                                if (grapple.DockUid != part.Uid)"], "all_classes": null, "length": 4169}
{"pred": "            if not xml_id:\n                raise ValueError, \"No such xml_id: %s\" % (xml_id,)\n            if not module:\n                raise ValueError, \"No such module: %s\" % (module,)\n            if not name:\n                raise ValueError, \"No such name: %s\" % (", "answers": ["            ir_values_obj = pooler.get_pool(cr.dbname).get('ir.values')"], "all_classes": null, "length": 4578}
{"pred": "            return actionTL.getVolatile() == SYNCHRONIZE_CODE;\n        }\n        @Uninterruptible(reason = \"Called from uninterruptible code.\", mayBeInlined = true)\n        public static void setSynchronizeCode() {\n            actionTL.setVolatile(SYNCHRONIZE_CODE);\n        }\n", "answers": ["            return actionTL.getVolatile() == SYNCHRONIZE_CODE;"], "all_classes": null, "length": 4390}
{"pred": "\t\t\tlong size = lgetxattr (path, name, value, 0);\n\t\t\tif (size <= 0)\n\t\t\t\treturn size;\n\t\t\tvalue = new byte [size];\n\t\t\treturn lgetxattr (path, name, value, (ulong) size);\n\t\t}\n\t\t// fget", "answers": ["\t\t\tlong size = lgetxattr (path, name, value, 0);"], "all_classes": null, "length": 6868}
{"pred": "\t\t\t\tsuper(id, path, width, height);\n\t\t\t}\n\t\t}\n\t\tprivate Images()\n\t\t{\n\t\t\tCore = new CoreImages();\n\t\t}\n\t\tpublic final class CoreImages implements java.io.Serializable\n\t\t{\n\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\tprivate CoreImages()\n", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "        return encodeBytesToBytes( source, off, len, options, 0, 0 );\n    }   // end encodeBytesToBytes\n    \n    /**\n     * Similar to {@link #encodeBytes(byte[], int, int, int)} but returns a byte array\n     * instead of a String. This", "answers": ["        if( source == null ){"], "all_classes": null, "length": 5175}
{"pred": "\t\t\t\tnew ColumnInfo (\"IsCaseSensitive\", typeof(bool)),\n\t\t\t\tnew ColumnInfo (\"IsFixedLength\", typeof(bool)),\n\t\t\t\tnew ColumnInfo (\"IsFixedPrecisionScale\", typeof(bool)),\n\t\t\t\tnew ColumnInfo (\"IsLong\", typeof(bool)),\n\t\t\t\tnew ColumnInfo (\"IsNullable\", typeof(bool)),\n\t\t\t\tnew ColumnInfo (\"", "answers": ["\t\t\t\tnew ColumnInfo (\"IsCaseSensitive\", typeof(bool)),"], "all_classes": null, "length": 4122}
{"pred": "\t\t\t\tBigInteger v = q[0];\n\t\t\t\tBigInteger r = q[1];\n\t\t\t\tBigInteger u = u1;\n\t\t\t\tBigInteger t = u1Out;\n\t\t\t\tu1 = u.Subtract(v.Multiply(u1));\n\t\t\t\tu1Out = t;\n\t\t\t\tu = v1;\n\t\t\t\tt =", "answers": ["\t\t\t\tBigInteger tn = u1.Subtract(v1.Multiply(q[0]));"], "all_classes": null, "length": 5148}
{"pred": "\t\t\t\tif (_abi_info == null)\n\t\t\t\t\t_abi_info = GLib.AbiStruct.GetAbiStruct (typeof (Gst.Message));\n\t\t\t\treturn _abi_info;\n\t\t\t}\n\t\t}\n\t}\n#endregion\n}\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion\n#endregion", "answers": ["\t\t\t\tif (_abi_info == null)"], "all_classes": null, "length": 4205}
{"pred": "                if (name.endsWith(\".zargo\")) {\n                    Configuration.setString(\n                            PersistenceManager.KEY_PROJECT_NAME_PATH,\n                            name.substring(0, name.length() - 6));\n                }\n            }\n            return theFile;\n        }\n        return null;\n    }\n    private class SaveWorker extends SwingWorker<Void, Void>", "answers": ["                if (!name.endsWith(\".\" + filter.getExtension())) {"], "all_classes": null, "length": 5940}
{"pred": "                5: SortableHeader('Outline', False, '', 'col-center'),\n                6: SortableHeader('Script', False, '', 'col-center'),\n                7: SortableHeader('Slide', False, '', 'col-center'),\n                8: SortableHeader('Video', False, '',", "answers": ["                5: SortableHeader('Outline', False, '', 'col-center'),"], "all_classes": null, "length": 4072}
{"pred": "            string[][] ss11 = new string[][] { s111, s112 };\n            string[] s121 = new string[] { \"hello\"};\n            string[][] ss12 = new string[][] { s121 };\n            string[][][] sssi1 = new string[][][] { ss11, ss12 };\n            string[]", "answers": ["            string[][] ss11 = new string[][] { s111, s112 };"], "all_classes": null, "length": 4165}
{"pred": "            field = model_class._meta.get_field(unique_check[0])\n            return ValidationError(\n                message=field.error_messages['unique'],\n                code='unique',\n                params=params\n            )\n        # A unique together field\n        else:\n            return ValidationError(\n                message=_('A %(model_name)s with this %(unique", "answers": ["            field = opts.get_field(unique_check[0])"], "all_classes": null, "length": 4513}
{"pred": "            for radio in [\"slope\", \"intercept\"]:\n                try:\n                    paramtestdic[radio] = paramtestdic[radio] + 0.1\n                except:\n                    pass\n                rslope, rintercept = run_minimization(\"000000000000000000000000000000000000", "answers": ["            for key, value in sorted(paramtestdic.iteritems()):"], "all_classes": null, "length": 4363}
{"pred": "    for i in range(0, len(h), 20):\n        heads.append(h[i:i+20])\n    return heads\n```python\ndef handlecheckheads(op, inpart):\n    \"\"\"check that head of the repo did not change\n    This is used to detect a push race when using unbundle", "answers": ["    while len(h) == 20:"], "all_classes": null, "length": 4561}
{"pred": "        if(contentPaneStyle.getBorder()!= null) {\n            prefWidth = Math.max(prefWidth, contentPaneStyle.getBorder().getMinimumWidth());\n            prefHeight = Math.max(prefHeight, contentPaneStyle.getBorder().getMinimumHeight());\n        }\n        return new Dimension(prefWidth, prefHeight);\n    }\n", "answers": ["        prefWidth = Math.min(prefWidth, width);"], "all_classes": null, "length": 6347}
{"pred": "        ca = literal_eval(cas_data_str)\n        cell_attributes = model.cell_attributes\n        cell_attributes[row, column, table] = ca\n        grid.update()\n        grid.repaint()\n        grid.setFocus()\n        grid.show()\n        grid.raise_()\n        grid.activateWindow()\n        grid.update()\n        grid.repaint()\n       ", "answers": ["        cas = literal_eval(cas_data_str)"], "all_classes": null, "length": 5088}
{"pred": "\t\t\t\t\tpixel = cursor_bitmap.GetPixel(x, y);\n\t\t\t\t\tif (pixel == cursor_pixel) {\n\t\t\t\t\t\tcursor_bits[(x / 8) + (y * (width / 8))] |= (Byte)(1 << (7 - (x % 8)));\n\t\t\t\t\t}\n\t\t\t\t\tpixel = cursor_mask", "answers": ["\t\t\t\t\tpixel = cursor_bitmap.GetPixel(x, y);"], "all_classes": null, "length": 6831}
{"pred": "\t\t\tInterval interval=new Interval(apptLengthMins);\n\t\t\t//Loop through each day in the date range passed in.\n\t\t\tfor(DateTime date=dateStart;date<=dateEnd;date=date.AddDays(1)) {\n\t\t\t\t//Get the list of available time slots for this day.\n\t\t\t\tList<TimeSlot", "answers": ["\t\t\tList<DateTime> listUniqueDays=new List<DateTime>();"], "all_classes": null, "length": 4064}
{"pred": "                      pMem1.enc == SQLITE_UTF16BE ||\n                      pMem1.enc == SQLITE_UTF16LE );\n        rc = sqlite3StrICmp( pMem1.z, pMem2.z, pMem1.n, pMem2.n );\n        if ( rc!= 0 )\n        {\n          return rc", "answers": ["        pMem1.enc == SQLITE_UTF16LE || pMem1.enc == SQLITE_UTF16BE );"], "all_classes": null, "length": 5688}
{"pred": "                    data.MaxPower[i] = packet.ReadInt32(\"MaxPower\", indexes, i);\n                    }\n                }\n            }\n            if (changesMask[130])\n            {\n                for (var i = 0; i < 7; ++i)\n                {\n                    if (changesMask[131 + i])\n                   ", "answers": ["                        data.MaxPower[i] = packet.ReadInt32(\"MaxPower\", indexes, i);"], "all_classes": null, "length": 4140}
{"pred": "        # TODO: get the indel info from the trimmed locus\n        # TODO: get the indel info from the trimmed locus\n        # TODO: get the indel info from the trimmed locus\n        # TODO: get the indel info from the trimmed locus\n        # TODO: get the indel", "answers": ["        seq = self.seqs[nidx]"], "all_classes": null, "length": 7755}
{"pred": "            Index ix = indexByTagAndClass[tag];\n            if (ix == null) {\n                ix = new Index(tagName(tag)+\".\"+classRef.toString(), new Entry[0]);\n                indexByTagAndClass[tag] = ix;\n            }\n            Index ix2 = ix;\n            if (ix2 ==", "answers": ["            Index[] perClassIndexes = indexByTagAndClass[tag];"], "all_classes": null, "length": 5112}
{"pred": "            this.quoteLabel.Size = new System.Drawing.Size(0, 13);\n            this.quoteLabel.TabIndex = 0;\n            this.quoteLabel.Text = \"Quote Label\";\n            this.quoteLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;\n            this.quoteLabel.Visible = false;\n            // \n            // processor\n            // \n", "answers": ["            this.quoteLabel.Size = new System.Drawing.Size(46, 16);"], "all_classes": null, "length": 4569}
{"pred": "            data['interval'] = rule._interval\n            data['count'] = rule._count\n            data['until'] = rule._until\n            data['byweekday'] = rule._byweekday\n            data['bymonthday'] = rule._bymonthday\n            data['bymonth", "answers": ["            data['rrule_type'] = rrule_type[rule._freq]"], "all_classes": null, "length": 4433}
{"pred": "                // Copy the decoded row to the output stream\n                fout.Write(curr, 0, bytesPerRow);\n                // Copy the decoded row to the prior row\n                System.Array.Copy(curr, 0, prior, 0, bytesPerRow);\n                // Read the next row\n                tot = 0", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "      get { return DefaultInstance; }\n    }\n    \n    protected override ReportRefundRequest ThisMessage {\n      get { return this; }\n    }\n    \n    public static pbd::MessageDescriptor Descriptor {\n      get { return global::bnet.protocol.exchange.ReportRefundRequest.Descriptor; }\n    }\n    \n    protected", "answers": ["      get { return DefaultInstance; }"], "all_classes": null, "length": 5791}
{"pred": "                        AApDocumentDetailRow DetailRow = (AApDocumentDetailRow)rv.Row;\n                        MainDs.AApAnalAttribDetail.DefaultView.RowFilter = String.Format(\"{0}={1} AND {2}={3}\",\n                            AApAnalAttribDetailTable.GetApDocumentIdDBName(), Row.ApDocument", "answers": ["                        AApDocumentDetailRow DetailRow = (AApDocumentDetailRow)rv.Row;"], "all_classes": null, "length": 5677}
{"pred": "\t\t\t\tOwner.SendMessage(\"Rewarding {0} for completing {1}\", RewardItem!= null? RewardItem.Name : RewardAttachment!= null? RewardAttachment.Name : RewardAction, Name);\n\t\t\t\t//RewardItem!= null? RewardItem.Drop(Owner) : RewardAttachment!= null? RewardAttachment.Drop(Owner)", "answers": ["\t\t\t\tif (RewardItem != null)"], "all_classes": null, "length": 4101}
{"pred": "\t            return items.Length;\n\t        }\n\t    }\n\t    public bool ContainsKey(TKey key)\n\t    {\n\t        return global::System.Collections.Generic.Comparer<TKey>.Default.Compare(key, items[0].Key) >= 0 && global::System.Collections.Generic.Comparer<TKey>.Default.Compare(key, items[items.Length - ", "answers": ["\t            return lastItemIndex - firstItemIndex + 1;"], "all_classes": null, "length": 5727}
{"pred": "                if (AControlLabel!= null)\n                {\n                    AControlLabel.Name = \"ArgumentPanelLabel_\" + AControl.Name;\n                    AControlLabel.AutoSize = true;\n                    AControlLabel.Font = new Font(\"Microsoft Sans Serif\", 8.25f, FontStyle.Regular, GraphicsUnit.Point, ((int)(", "answers": ["                if (AControlLabel != null)"], "all_classes": null, "length": 7766}
{"pred": "\t\t\treturn Unique(target, null);\n\t\t}\n\t\t/// <summary>\n\t\t/// Returns a new list containing only the unique elements of the target collection, preserving the order.\n\t\t/// The specified <see cref=\"IEqualityComparer{T}\"/> is used to determine uniqueness.\n\t\t/// </summary>\n\t", "answers": ["\t\t\treturn Unique(target, null);"], "all_classes": null, "length": 4367}
{"pred": "```\nclass Elf64_Dyn(Cstruct):\n```\nPlease complete the code. \n```\nclass Elf64_Dyn(Cstruct):\n    _fields_ = [\n        (\"d_tag\", \"u32\"),\n        (\"d_val\", \"u64\"),\n        (\"d_ptr\", \"u64\"),\n        (\"d", "answers": ["DT_PPC64_OPD    = (DT_LOPROC + 1)"], "all_classes": null, "length": 6803}
{"pred": "                html.WriteLine(\"      table { width: 100%; }\");\n                html.WriteLine(\"     .cmd { width: 100%; }\");\n                html.WriteLine(\"     .cmd td { padding: 2px; }\");\n                html.WriteLine(\"     .cmd th { padding: 2px; }\");\n               ", "answers": ["                html.WriteLine(\"      table { width: 100%; }\");"], "all_classes": null, "length": 5413}
{"pred": "\t\t\tbuff[4] = (byte)(address & 0x000000ff);\n\t\t\tWriteReport(buff);\n\t\t\tmReadDone.WaitOne();\n\t\t\treturn mReadBuff;\n\t\t}\n\t\tprivate void WriteReport(byte[] buff)\n\t\t{\n\t\t\tif(mStream!= null)\n\t\t\t{\n\t\t\t\tmStream", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "                    sd[node.split_dim] = np.abs(node.split - x[node.split_dim])\n                    min_distance = min_distance - side_distances[node.split_dim] + sd[node.split_dim]\n                else:\n                    sd[node.split_dim] = (node.split - x[node.split_dim]) ** p\n                    min_distance = min_distance", "answers": ["                    sd[node.split_dim] = np.abs(node.split - x[node.split_dim])"], "all_classes": null, "length": 5233}
{"pred": "\t\tassertEquals(acn, rules.formatMove(game.getLastMove()));\n\t}\n} \npackage de.schildbach.andy.chess;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.io.Serializable;\n\nimport de.schildbach.andy.chess", "answers": ["\t\tassertEquals(acn, rules.formatGame(game, Locale.ENGLISH));"], "all_classes": null, "length": 4129}
{"pred": "    catch (ReadOnlyException e)\n    {\n      throw new Error(\"Internal error: \" + e.getMessage());\n    }\n    return null;\n  }\n  \n  /**\n   * Get the parent qualifier of a feature.\n   * @param f\n   * @return\n   */\n  public static String getParentQualifier(final Feature", "answers": ["    catch (InvalidRelationException e){}"], "all_classes": null, "length": 7770}
{"pred": "\t\t\t\t\tstring str = reader.ReadString();\n\t\t\t\t\tType type = Type.GetType(str);\n\t\t\t\t\tif (type!= null)\n\t\t\t\t\t{\n\t\t\t\t\t\tm_arSpellDefense.Add(type);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (version >= 2)\n\t\t\t{\n\t\t\t\tm_FightMode = (FightMode)reader.ReadInt", "answers": ["\t\t\t\t\tstring str = reader.ReadString();"], "all_classes": null, "length": 5717}
{"pred": "\t\t\t\t\t\t\t\tif (newsector!= null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t// Update the sidedefs\n\t\t\t\t\t\t\t\t\tforeach (Linedef ld in newsector.Sidedefs)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tld.Sector = newsector;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t// Update the sector\n\t\t\t\t\t\t\t\t\tnewsector.Sector = new", "answers": ["\t\t\t\t\t\t\t\tif(newsector == null) return false;"], "all_classes": null, "length": 5677}
{"pred": "        translation = parent_doc.translated_to(document_locale=document_locale)\n    except Document.DoesNotExist:\n        translation = None\n    if translation:\n        # If we're editing an existing translation, we need to get the\n        # current revision of the translation, not the parent document.\n        translation = translation.current_revision\n   ", "answers": ["        doc = parent_doc.translations.get(locale=document_locale)"], "all_classes": null, "length": 4854}
{"pred": "                lDummyHeights[i] = lNewMaxRows;\n            }\n            \n            // now we'll create new rows and columns\n            if (isTable) {\n                newRows = new ArrayList();\n                for (i=0; i < lTotalRows; i++) {\n                    newRows.Add(new Row());\n", "answers": ["                lDummyHeights [i] = lNewMaxRows;"], "all_classes": null, "length": 5053}
{"pred": "\t\t\t\t\t\treferenceNode.AddLink( GetReferenceNode( script ) );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn referenceNode;\n\t\t}\n\t\tprivate ReferenceNode GetReferenceNode( Object obj )\n\t\t{\n\t\t\treturn GetReferenceNode( obj, obj.name );\n\t\t}\n\t\tprivate ReferenceNode GetReferenceNode(", "answers": ["\t\t\t\t\t\treferenceNode.AddLinkTo( GetReferenceNode( script ) );"], "all_classes": null, "length": 4267}
{"pred": "\t\t\t\t\t\tif (trait!= null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tnode.Value.Nodes.Add(new MiniYamlNode(\"-InvulnerabilityMultiplier@EXPERIENCE\"));\n\t\t\t\t\t\t\tnode.Value.Nodes.Remove(trait);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n#endregion\n```\nThe code is a", "answers": ["\t\t\t\t\t\tif (trait != null)"], "all_classes": null, "length": 5181}
{"pred": "        return self.__class__(values, key=self._key)\n    __radd__ = __add__\n    def __iadd__(self, other):\n        \"\"\"Update sorted-key list with values from other iterable.\n        ``skl += other``\n        Runtime: O(n log n) where n is the number", "answers": ["        return self.__class__(values, key=self._key)"], "all_classes": null, "length": 7674}
{"pred": "        self._finalize_loaded(states)\n```\nThe code is a part of SQLAlchemy, a popular SQL toolkit and Object-Relational Mapping (ORM) library for Python. The code is from the `orm/session.py` module, which defines the `Session` class. The code is responsible for managing the state of objects", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "                    else if (this.RequiredRace == Race.Gargoyle)\n                        from.SendLocalizedMessage(1111707); // Only gargoyles can wear this.\n                    else\n                        from.SendMessage(\"Only {0} may use this.\", this.RequiredRace.PluralName);\n                    return false;\n                }\n                if (!this.Allow", "answers": ["                    else if (this.RequiredRace == Race.Gargoyle)"], "all_classes": null, "length": 4125}
{"pred": "new FullTextThesaurusPhraseTable() { /*... */ }\n}\n}.ToList();\n\t\t\t}\n\t\t\treturn values;\n\t\t}\n\t}\n}\n```\nThe code snippet you provided is already complete. It appears to be a method that returns a list of `FullTextThesaurusPhraseTable` objects.", "answers": ["\t\t\t\tnew syspalvalue { @class = \"LEOP\", value = 0, name = \"TABLE\" },"], "all_classes": null, "length": 7135}
{"pred": "        if (emails == null) {\n            return;\n        }\n        for (int i = 0; i < emails.length(); i++) {\n            JSONObject email = emails.getJSONObject(i);\n            JSONArray emailTypes = email.optJSONArray(\"type\");\n            if (emailTypes == null) {\n                emailTypes = email.opt", "answers": ["        if (emails == null) {"], "all_classes": null, "length": 4282}
{"pred": "            if (Diff!= null)\n            {\n                result[\"diff\"] = Diff;\n            }\n            if (Diff!= null)\n            {\n                result[\"diff\"] = Diff;\n            }\n            return ToJson(result);\n        }\n        private string ToJson(object obj)\n        {\n            return ToJson(obj, 0", "answers": ["            if (Diff.Count > 0 && DiffMode)"], "all_classes": null, "length": 4201}
{"pred": "\t\t\tblockSize = BZip2Constants.blockSize100k;\n\t\t}\n\t}\n} \n```\nThe code is a BZip2 compression stream implementation in C#. The code is quite complex and has many methods and variables. The code is also quite long and has many comments. The code is a good example", "answers": ["\t\t\tint n = BZip2Constants.baseBlockSize * blockSize100k;"], "all_classes": null, "length": 5391}
{"pred": "                        int actorIndex = args[0];\n                        int x = args[1];\n                        int y = args[2];\n                        int radius = args[3];\n                        int boxIndex = args[4];\n                        int boxX = args[5];\n                        int boxY = args[6];\n                        int boxRadius", "answers": ["                        var a = Actors[args[1]];"], "all_classes": null, "length": 4518}
{"pred": "                    if (iFile!= null)\n                        iFile.close();\n                }\n            }\n            catch (final IOException e)\n            {\n                e.printStackTrace();\n                throw new ObjectStoreException(e);\n            }\n        }\n    }\n    private final void deleteEntries (final ArrayList<InputObjectState> objectStates, final ArrayList<InputObject", "answers": ["                    if (iFile != null)"], "all_classes": null, "length": 4288}
{"pred": "\t\t\ttrackError += trackSegmentError;\n\t\t}\n\t\n\t\treturn trackError ;\n\t}\n\t/**\n\t * @param route         route to be simplified.\n\t * @param maxPoints     maximum number of points in the simplified route.\n\t * @param accuracyMtr   maximum distance between original and simplified route", "answers": ["\t\t\tif (trackSegmentError > trackError)"], "all_classes": null, "length": 5623}
{"pred": "\t\t\t\t\"    Function Something(<A()> ByVal __arg1 As Object, <B()> ByVal __arg2 As Object) As Object{0}\" +\n\t\t\t\t\"        Implements System.Collections.IEnumerable.GetEnumerator{0}\" +\n\t\t\t\t\"        Return Nothing{0}\" +\n\t\t\t\t\"    End Function{0", "answers": ["\t\t\t\t\"    {0}\" +"], "all_classes": null, "length": 5620}
{"pred": "                    CollisionObjects = new[] { \"Jhin_Base_R_Shot.troy\" },\n                    CollisionObjects = new[] { \"Jhin_Base_R_Shot.troy\" },\n                    CollisionObjects = new[] { \"Jhin_Base_R_Shot.troy\" },\n                    CollisionObjects = new[] { \"Jhin", "answers": ["                    ExtraMissileNames = new[] { \"JhinRShotMis4\" },"], "all_classes": null, "length": 4463}
{"pred": "                            m_House.Delete();\n                        }\n                    }\n                }\n            }\n        }\n    }\n    public class PreviewHouse : BaseHouse\n    {\n        public PreviewHouse() : base() { }\n        public PreviewHouse(BaseHouse house) : base(house) { }\n        public override void Delete()\n        {\n            if", "answers": ["                            if (m_House.MovingCrate != null)"], "all_classes": null, "length": 5532}
{"pred": "\t\tplot = new Plot();\n\t}\n\tvoid showPlot() {\n\t\tif (plot==null) {\n\t\t\tinterp.error(\"No plot defined\");\n\t\t\treturn;\n\t\t}\n\t\tplot.show();\n\t}\n\tvoid updatePlot() {\n\t\tif (plot==null) {\n\t\t\tinterp.error(\"No plot", "answers": ["\t\tString title = getFirstString();"], "all_classes": null, "length": 5653}
{"pred": "                    # Get the widget name from the skin, if it's a custom widget\n                    widgetName = DATA.get( \"widgetName\" )\n                    if widgetName == None:\n                        # If it's not a custom widget, get the name from the widget itself\n                        widgetName = selectedShortcut.getProperty( \"widget", "answers": ["                        widgetTempName = xbmc.getInfoLabel(widgetName)"], "all_classes": null, "length": 6955}
{"pred": "        return encodeBytesToBytes( source, 0, source.length, 0 );\n    }   // end encodeBytesToBytes\n    \n    /**\n     * Similar to {@link #encodeBytes(byte[])} but returns a byte array\n     * instead of instantiating a String. This is more efficient if you're", "answers": ["        byte[] encoded = null;"], "all_classes": null, "length": 5023}
{"pred": "            mnem[ishr] = \"ishr\";\n            mnem[lshr] = \"lshr\";\n            mnem[ushr] = \"ushr\";\n            mnem[iushr] = \"iushr\";\n            mnem[lushr] = \"lushr\";\n            mnem[", "answers": ["            mnem[ishr] = \"ishr\";"], "all_classes": null, "length": 6113}
{"pred": "def _get_selinux_enabled():\n    try:\n        import selinux\n        return selinux.is_selinux_enabled()\n    except ImportError:\n        return False\n```\nThe code is a part of a larger Ansible module, and it seems to be related to file operations and SELinux context management. The code snippet", "answers": ["            umask = os.umask(0)"], "all_classes": null, "length": 7132}
{"pred": "\t\t\t\t\tdo {\n\t\t\t\t\t\tMenus [selected].Current = (Menus [selected].Current+1) % Menus [selected].Children.Length;\n\t\t\t\t\t} while (Menus [selected].Children [Menus [selected].Current] == null);\n\t\t\t\t\tif (Menus [selected].Children [Menus [selected].Current].", "answers": ["\t\t\t\t\tforeach (var mi in Menus [selected].Children){"], "all_classes": null, "length": 7643}
{"pred": "        if (lastScanOffset() + pixelStride > data.length)\n        {\n            throw new RasterFormatException(\"Data buffer is too small\");\n        }\n    }\n    /**\n     * Returns the offset of the last scanline in the data buffer.\n     *\n     * @return the offset of the last scanline in", "answers": ["        int lastPixelOffset = (width - 1) * pixelStride;"], "all_classes": null, "length": 4323}
{"pred": "```\n        return utils_misc.get_shared_meminfo(filename)\n```\n\"\"\"\nUtility classes and functions for libvirt.\n\"\"\"\nfrom virttest import utils_misc\nfrom virttest import utils_net\nfrom virttest import utils_libvirt\nfrom virttest import utils_test\nfrom virttest import utils_misc\nfrom virttest import", "answers": ["        shm = int(open(filename).read().split()[2])"], "all_classes": null, "length": 7764}
{"pred": "g.parser.add_argument('delta_type', type=valid_delta_type, location='args')\n```\nThe final answer is: \n```\ng.parser.add_argument('delta_type', type=valid_delta_type, location='args')\n``` \nThis line of code adds a new argument to the parser, named `delta_type", "answers": ["    exclude_types = args.get('exclude_types')"], "all_classes": null, "length": 4956}
{"pred": "class CourseEnrollmentManager(models.Manager):\n    \"\"\"\n    Custom manager for CourseEnrollment model.\n    \"\"\"\n    def get_queryset(self):\n        return super(CourseEnrollmentManager, self).get_queryset().select_related('course')\n    def get_enrollments_for_user(self, user):\n        \"\"\"\n        Returns a list", "answers": ["    objects = CourseEnrollmentManager()"], "all_classes": null, "length": 4276}
{"pred": "        system_id = self.get_system_id(system)\n        if not system_id:\n            continue\n        self.client.remove_custom_value(system_id, keys)\n####################\ndef get_system_id(self, system):\n    if system in self.ssh_systems:\n        return self.ssh_systems[system]\n    if system in", "answers": ["        system_id = self.get_system_id(system)"], "all_classes": null, "length": 5050}
{"pred": "        'types': ('ly:prob?',),\n    },\n    'xNotesOn': {\n        'name': 'SequentialMusic',\n        'type': 'ly:prob?',\n        'types': ('ly:prob?',),\n    },\n    'xNotesUp': {\n        'name': 'SequentialMusic',\n       ", "answers": ["        'types': ('general-music', 'sequential-music',),"], "all_classes": null, "length": 4888}
{"pred": "\t\t\t\t.Append (base.ToString ())\n\t\t\t\t.ToString ();\n\t\t}\n\t\t\n#endregion\n\t}\n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n}", "answers": ["\t\t\t\t.Append (base.ToString ()).ToString ();"], "all_classes": null, "length": 5367}
{"pred": "                chr.IsColliding = false;\n            }\n            foreach (OdeCharacter chr in _characters)\n            {\n                foreach (OdeCharacter chr2 in _characters)\n                {\n                    if (chr!= chr2)\n                    {\n                        nearCallback(chr, chr2);\n                    }\n                }\n            }\n            foreach (", "answers": ["                if (chr.Shell == IntPtr.Zero || chr.Body == IntPtr.Zero)"], "all_classes": null, "length": 6278}
{"pred": "        for t in ts:\n            t.start()\n    else:\n        ts = [None]\n    # The main thread is responsible for updating the status\n    if number_threads > 1:\n        status_updater = StatusUpdater(total_recs, finished_queue)\n        status_updater.start()\n    # The main thread", "answers": ["        update_t = StatusUpdater(total_recs, finished_queue)"], "all_classes": null, "length": 6540}
{"pred": "        digits_compute=dp.get_precision('Product Price'))\n    price_subtotal = fields.Float(string='Subtotal', readonly=True,\n        compute='_compute_price', store=True)\n    quantity = fields.Float(string='Quantity', digits_compute=dp.get_precision('Product Unit of Measure'),\n        default=1.0)\n   ", "answers": ["        digits= dp.get_precision('Product Price'),"], "all_classes": null, "length": 4978}
{"pred": "def _get_mask(self, mask, rng, size):\n    \"\"\"Return a mask of the given size, with the given mask value at the\n    specified random positions.\"\"\"\n    if mask is None:\n        return numpy.ones(size, dtype=bool)\n    else:\n        return numpy.random.choice([mask, ~mask],", "answers": ["        data = self.get_data(variables, gather, clear, annotations)"], "all_classes": null, "length": 5678}
{"pred": "                return value == null? null : -value.doubleValue();\n            }\n        };\n    }\n    /**\n     * Creates a new expression that represents the logical NOT of the given\n     * operand.\n     *\n     * @param operand\n     * The operand to negate.\n     *\n     * @return\n     *", "answers": ["                Class<? extends Number> type = value.getClass();"], "all_classes": null, "length": 5044}
{"pred": "            });\n        }\n    }\n}\n#endregion\n```\nThe code snippet provided is a part of a larger program, likely a League of Legends champion ability detection system. The code defines a static class `SpellDatabase` with a static constructor that populates a list of `SpellData` objects. Each `SpellData`", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "                    \"   NEW: \" + nodeUpdate);\n        }\n        return true;\n    }\n    \n    private void getLostNodes(Long txnId, List<Long> lostNodes)\n    {\n        // TODO: implement this method\n    }\n    \n    private void getLostNodes(Long txnId, List<Long> lostNodes)\n", "answers": ["                    \"   NEW: \" + nodeUpdate);"], "all_classes": null, "length": 6068}
{"pred": "      if (isMainAxisRow) {\n        // If we are laying out in the row direction, the main axis is the width and the cross axis is the height.\n        // We need to compute the height of each item in the row.\n        float rowHeight = 0;\n        for (int i =", "answers": ["      for (i = startOfLineIndex; i < endOfLineIndex; ++i) {"], "all_classes": null, "length": 4941}
{"pred": "\t\t\t\tyAxis.DrawGrid( g, this, scaleFactor, shiftPos );\n\t\t\t\tshiftPos += yAxis._tmpSpace;\n\t\t\t}\n\t\t\tshiftPos = 0.0f;\n\t\t\tforeach ( Y2Axis y2Axis in _y2AxisList )\n\t\t\t{\n\t\t\t\ty2Axis.DrawGrid", "answers": ["\t\t\t\tyAxis.DrawGrid( g, this, scaleFactor, shiftPos );"], "all_classes": null, "length": 4173}
{"pred": "            if (info < 0)\n                throw new ILNumericsException(\"LAPACK error: \" + info.ToString());\n            return ret; \n        }\n        /// <summary>\n        /// Computes the QR decomposition of the matrix A.\n        /// </summary>\n        /// <param name=\"A\">The matrix", "answers": ["            if (info < 0)"], "all_classes": null, "length": 4728}
{"pred": "                if (c!= null) {\n                    c.setFont(getFont());\n                    c.setForeground(getForeground());\n                }\n            }\n        }\n    }\n} \n``` \nPlease note that the code is quite long and complex, and it's not possible to provide a complete and accurate solution without knowing the specific requirements and constraints of the", "answers": ["                if ((c != null)"], "all_classes": null, "length": 9124}
{"pred": "\t\t\t\tif (c == '\\r') {\n\t\t\t\t\tif (peek_char () == '\\n') {\n\t\t\t\t\t\t// Skip the \\r\\n\n\t\t\t\t\t\tget_char ();\n\t\t\t\t\t\tgoto Next line of code;\n\t\t\t\t\t}\n\t\t\t\t\t// \\r without \\n, this is a DOS line ending\n\t\t\t\t\t// We should", "answers": ["\t\t\t\tswitch (c) {"], "all_classes": null, "length": 8996}
{"pred": "        for dep in self.__deps:\n            if dep.condition is None:\n                # no condition, just use the dependency\n                depEnv = depEnv.derive(dep.envOverride)\n                depTools = depTools.derive(dep.toolsOverride)\n                depSandbox = depSandbox if dep.sandboxOverride is None", "answers": ["        depStates = { n : s.copy() for (n,s) in states.items() }"], "all_classes": null, "length": 8648}
{"pred": "            xmlWriter.WriteAttributeString(\"SelectedIndex\", XmlConvert.ToString(pane.SelectedIndex));\n            xmlWriter.WriteAttributeString(\"IsAutoHide\", XmlConvert.ToString(pane.IsAutoHide));\n            xmlWriter.WriteAttributeString(\"IsDocumentPane\", XmlConvert.ToString(pane.IsDocumentPane));\n            xmlWriter.WriteAttributeString(\"", "answers": ["            if (pane.Items.Count > 1)"], "all_classes": null, "length": 8608}
{"pred": "                        &nbsp;(<span class=\"warning\">extra: %(diff)s</span>)<br />\n                        &nbsp;&nbsp;&nbsp;- configuration file \\\"websearch_external_collections_config.py\\\" has %(number_file)s collections\n                        <br /><br /><a href=\"%(site_url)s/admin/externalcollections?", "answers": ["                        &nbsp;(<span class=\"warning\">extra: %(diff)s</span>)<br />"], "all_classes": null, "length": 11089}
{"pred": "def _extract_all_nodes(node, limit = None):\n    \"\"\"Returns a list of all nodes in the given node, or a list of nodes up to the given limit.\"\"\"\n    if limit == None:\n        limit = 1000\n    if node.hasChildNodes():\n        return _extract_all_nodes(node.firstChild,", "answers": ["        if type(text) == int:"], "all_classes": null, "length": 9909}
{"pred": "            if (result!= RESULT.OK)\n            {\n                return result;\n            }\n            if (sound == null)\n            {\n                sound = new Sound();\n            }\n            sound.setRaw(soundraw);\n            return result;\n        }\n        public RESULT createStream( IntPtr data, MODE mode, ref Sound sound )\n        {\n", "answers": ["            if (result != RESULT.OK)"], "all_classes": null, "length": 14097}
{"pred": "                            desc = escape(desc)\n                        output.write(\"      <field name='%s' type='%s' info='%s'/>\\n\" % (field[1], field[0], desc))\n                except:\n                    pass\n                output.write(\"</struct>\\n\");\n            else:\n                output.write(\" info='%s", "answers": ["                            desc = escape(desc)"], "all_classes": null, "length": 8020}
{"pred": "            inputSlice[0], inputSlice[1], masterNum)\n      # Update permanences\n      masterValidPotential = masterValidPermanence = masterValidPermanenceM\n      masterValidPotential[:] = masterValidPermanence[:] = masterValidPermanenceM[:]\n      masterValidPotential[~", "answers": ["                    columnNum // self.coincidencesShape[1],"], "all_classes": null, "length": 8992}
{"pred": "        check_nodes = [self.new_node_uuid, self.target_node_uuid, self.other_node_uuid]\n      else:\n        raise errors.OpPrereqError(\"Invalid mode '%s'\" % self.mode,\n                                   errors.ECODE_STATE)\n    if self.early_release:\n      self.lu.LogWarning(\"Early release is enabled,", "answers": ["        check_nodes = [self.new_node_uuid, self.other_node_uuid]"], "all_classes": null, "length": 8172}
{"pred": "    complt += '\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t", "answers": ["        complt += '\\t\\t\\t\\t\\t-\"'"], "all_classes": null, "length": 8122}
{"pred": "            }\n        }\n        [CommandProperty(AccessLevel.GameMaster)]\n        public int ControlOrder\n        {\n            get { return (int)m_ControlOrder; }\n            set { m_ControlOrder = (OrderType)value; }\n        }\n        [CommandProperty(AccessLevel.GameMaster)]\n        public int ControlOrderType", "answers": ["                if (m_ControlMaster != null)"], "all_classes": null, "length": 9893}
{"pred": "        if (parent!= null) {\n            contains = parent.visibleBoundsContains(x, y);\n        }\n        return contains;\n    }\n    \n    /**\n     * Returns the parent of this component.\n     * @return the parent of this component\n     */\n    public Component getParent() {\n        return parent;\n    }\n    \n", "answers": ["        if (contains) {"], "all_classes": null, "length": 10298}
{"pred": "                            if (n1 < image_width * image_height)\n                            {\n                                if (bmp_mono[n1] == 0)\n                                    side1++;\n                                else\n                                    hits1++;\n                            }\n                        }\n                        if (y + r < image_height)\n                        {\n                            int n2 = ((y + r) *", "answers": ["                            side1 += bmp_mono[n1];"], "all_classes": null, "length": 8006}
{"pred": "\t\t\t z = new double[2];\n\t\t\t z[0] = Math.sqrt(3.0) - 2.0;\n\t\t\t z[1] = Math.sqrt(3.0) - 2.0;\n\t\t\t break;\n\t\t default:\n\t\t\t z = new double[0];\n\t\t }\n\t\t if", "answers": ["\t\t\t z = new double[3];"], "all_classes": null, "length": 9193}
{"pred": "\t\t// TODO: This is a very inefficient way to get the fields.  We should be able to get the fields from the database metadata.\n\t\t// \n\t\t// \n\t\t// \n\t\t// \n\t\t// \n\t\t// \n\t\t// \n\t\t// \n\t\t", "answers": ["        RowMetaInterface tabFields = getTableFields(tableName);"], "all_classes": null, "length": 9895}
{"pred": "\t\t\tbonusFeats[3] = new String[] {\"TRACK\"};\n\t\t\tbonusFeats[4] = new String[] {\"ENDURANCE\"};\n\t\t\tbonusFeats[5] = new String[] {\"TRACK\"};\n\t\t\tbonusFeats[6] = new String[] {\"ENDURANCE\"};\n", "answers": ["\t\t\tfeIndex = rand.nextInt(allFE.size());"], "all_classes": null, "length": 8696}
{"pred": "        \"\"\"\n        # reset the hover item\n        self._tip_item = None\n        self.SetToolTipString(\"\")\n        self.StopPreviewTimer()\n        event.Skip()\n    def OnSetCursor(self, event):\n        \"\"\"\n        Handles the ``wx.EVT_SET_CURSOR`` event for this object.\n        :param event: the event", "answers": ["        Handles the ``wx.EVT_LEAVE_WINDOW`` event for L{AuiToolBar}."], "all_classes": null, "length": 11431}
{"pred": "            mute = (m!= 0);\n            return result;\n        }\n        public RESULT setUserData         (IntPtr userdata)\n        {\n            return FMOD_EventCategory_SetUserData(eventcategoryraw, userdata);\n        }\n        public RESULT getUserData        (ref IntPtr userdata)\n        {\n            return FMOD_EventCategory_GetUserData", "answers": ["            mute = (m != 0);"], "all_classes": null, "length": 9240}
{"pred": "public class StewartLibrarySimonPtjScript : StewartVarLibraryPtjBaseScript\n{\n\tprotected override bool DoShelving { get { return false; } }\n\tprotected override int QuestId { get { return 0; } }\n\tprotected override int[] QuestIds { get { return new int[] { 0,", "answers": ["\tprotected override int QuestId { get { return 519436; } }"], "all_classes": null, "length": 9147}
{"pred": "            try{ ois.close(); } catch( Exception e ){EncogLogging.log(e);}\n        }   // end finally\n        \n        return obj;\n    }   // end decodeToObject\n    \n    /**\n     * \n     * @param encodedObject\n     * @return\n     * @throws java.io.IOException\n    ", "answers": ["            try{ ois.close();  } catch( Exception e ){EncogLogging.log(e);}"], "all_classes": null, "length": 8136}
{"pred": "                if e.nodeType == e.ELEMENT_NODE and e.localName == \"layout\":\n                    self.layoutNode = e\n                    break\n            # Check the XLF for validity\n            self.__checkXLF()\n        except Exception, e:\n            # If the XLF is invalid, set builtWithNoXLF", "answers": ["                if e.nodeType == e.ELEMENT_NODE and e.localName == \"layout\":"], "all_classes": null, "length": 8661}
{"pred": "            numBits++;\n            uint numBytes = numBits >> 5;\n            if((numBits & 0x1F)!= 0)       // if there are any bits left over\n                numBytes++;\n            uint[] data = new uint[numBytes];\n            data[0] = 0x", "answers": ["                numBits = (numBits >> 1) + 1;"], "all_classes": null, "length": 8360}
{"pred": "        if cdata is not None and cdata[0] is not None:\n            # The subtensor is taking the full input\n            # We can remove it\n            return node.inputs[0]\n    elif isinstance(node.op, AdvancedSubtensor1):\n        # Check if the subtensor is taking the full", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": "                   is_const=True)\n    return\ndef register_module():\n    module = pybind11_module()\n    module.add_function(retval=pybind11_module().cppclass('ns3::EmptyAttribute').get_type(), name='EmptyAttribute', doc='An empty attribute.', visibility='public', pybind11_overloads=[", "answers": ["                   is_const=True, is_virtual=True, is_pure_virtual=True)"], "all_classes": null, "length": 10722}
{"pred": "                    Node node = body.getNode(0);\n                    if (node instanceof Node.TemplateText) {\n                        templateTextOptimization = true;\n                    }\n                }\n                if (!templateTextOptimization) {\n                    out.println(\"int _jspx_push_body_count_\" + varName + \" = 0;\");\n                    out.println(\"", "answers": ["                    Node bodyElement = body.getNode(0);"], "all_classes": null, "length": 9144}
{"pred": "\t\t\t\tcase Msg.WM_KEYUP:\n\t\t\t\tcase Msg.WM_SYSKEYUP:\n\t\t\t\t\tPreviewKeyDownEventArgs e = new PreviewKeyDownEventArgs ((Keys)msg.WParam.ToInt32 () | XplatUI.State.ModifierKeys);\n\t\t\t\t\tOnPreviewKeyDown (e);\n\t\t\t\t\treturn PreProcessControlState.MessageNeeded;\n\t\t\t\tcase", "answers": ["\t\t\t\t\tif (PreProcessMessage (ref msg))"], "all_classes": null, "length": 9784}
{"pred": "        if os.path.exists(md_file_path) is False:\n            return False, 'Unable to locate the pre-processed file: %s' % md_file_path\n        # load\n        try:\n            mantidmd = mantidmd.load(md_file_path)\n        except Exception as e:\n            return False,", "answers": ["        if os.path.exists(md_file_path) is False:"], "all_classes": null, "length": 9108}
{"pred": "            package = None\n    return package\ndef _calc___spec__(globals):\n    \"\"\"Calculate what __spec__ should be.\n    __spec__ is not guaranteed to be defined.\n    \"\"\"\n    spec = globals.get('__spec__')\n    if spec is None:\n        spec = importlib.util.find_spec(g", "answers": ["            package = package.rpartition('.')[0]"], "all_classes": null, "length": 8094}
{"pred": "                var methodGroup = (BoundMethodGroup)expression;\n                var resolution = this.ResolveMethodGroup(methodGroup);\n                if (resolution.HasErrors)\n                {\n                    diagnostics.Add(resolution.Diagnostics);\n                }\n                else\n                {\n                    var method = resolution.Method;\n                    var methodSymbol = method as IMethodSymbol;\n", "answers": ["                var methodGroup = (BoundMethodGroup)expression;"], "all_classes": null, "length": 8696}
{"pred": "            search_reg_str = search_terms.replace(' ', r'\\b\\w*\\b')\n        # Make sure the search terms are in the correct order.\n        search_reg_str = r'%s' % search_reg_str\n        # Make sure the search terms are in the correct order.\n        search_reg_str = r", "answers": ["            search_reg_str = '\\\\b%s\\\\b' % search_terms.replace(' ',"], "all_classes": null, "length": 11879}
{"pred": "                FvImageSectionObj.FvName = self.__GetToken()\n                \n            Obj.SectionList.append(FvImageSectionObj)\n            \n        elif SectionName == \"UI\":\n            UiSectionObj = UiSection.UiSection()\n            if self.__GetToken() == \"UI\":\n                pass\n            else:\n               ", "answers": ["                if not self.__IsKeyword(\"FV\"):"], "all_classes": null, "length": 10845}
{"pred": "      headers_phase = PBXHeadersBuildPhase()\n      self.AppendBuildPhase(headers_phase)\n    return headers_phase\n  def ResourcesPhase(self):\n    resources_phase = self.GetBuildPhaseByType(PBXResourcesBuildPhase)\n    if resources_phase is None:\n      resources_phase = PBXResourcesBuildPhase()\n      self", "answers": ["      headers_phase = PBXHeadersBuildPhase()"], "all_classes": null, "length": 11459}
{"pred": "    post_data = {'node_ids': ','.join(map(str, x))}\n    #... rest of the code...\n```\nThe final answer is: \n```\n    post_data = {'node_ids': ','.join(map(str, x))}\n    url = remote_instance._get_node_location_url()\n    response = remote_instance", "answers": ["    post = {'node_ids[{}]'.format(i): n for i, n in enumerate(x)}"], "all_classes": null, "length": 14106}
{"pred": "                        // We are looking for the exponent separator. If we find it,\n                        // then we know that we are in phase 1. If we are in phase\n                        // 1, then we must be in phase 1 of the second pattern.\n                        // Otherwise, we are in phase 2 of the", "answers": ["                        if (useExponentialNotation) {"], "all_classes": null, "length": 11534}
{"pred": "        BeginBatchUndo(self, String cmd)\n        BeginBatchUndo(self, String cmd, String cmd2)\n        BeginBatchUndo(self, String cmd, String cmd2, String cmd3)\n        BeginBatchUndo(self, String cmd, String cmd2, String cmd3, String cmd4)\n        BeginBatchUndo", "answers": ["        BeginBatchUndo(self, String cmdName) -> bool"], "all_classes": null, "length": 9452}
{"pred": "  exec /usr/bin/lighttpd -f /opt/dirac/etc/lighttpd.conf\n  \"\"\" % {'bashrc': os.path.join( self.instancePath, 'bashrc' ) } )\n        fd.close()\n        os.chmod( runFile, stat.S_IRWXU | stat.S_IRGRP", "answers": ["  exec lighttpdSvc.sh < /dev/null"], "all_classes": null, "length": 8611}
{"pred": "    if (tractor.getY() - target.getY() == -2) {\n      my = -1;\n    }\n    if (tractor.getY() - target.getY() == 2) {\n      my = 1;\n    }\n    if (mx == 0 && my == 0) {\n      result = new", "answers": ["    if (tractor.getY() - target.getY() == -2) {"], "all_classes": null, "length": 8405}
{"pred": "            if module.params.get('next_run'):\n                # If we are in next_run state, we need to reboot the VM:\n                ret = vms_module.action(\n                    action='reboot',\n                    entity=ret['id'],\n                    entity_condition=lambda entity: entity.status == otypes.VmStatus.UP,\n                   ", "answers": ["        elif state == 'suspended':"], "all_classes": null, "length": 8276}
{"pred": "        m = ModeFactory.getMode(\"ChannelActionDAO\", \"getChannelActionsForSet\");\n        DataResult dr = m.execute(params, subCids, unsubCids);\n        Iterator i = dr.getIterator();\n        while (i.hasNext()) {\n            DataBean db = (DataBean) i.next();\n           ", "answers": ["        List<Map> subDr = Collections.EMPTY_LIST;"], "all_classes": null, "length": 10246}
{"pred": "            for (int i = 0; i < libs.size(); i++) {\n                NativeLibrary nl = libs.elementAt(i);\n                if (nl.name.equals(name)) {\n                    if (nl.isBuiltin == isBuiltin) {\n                        return true;\n                    }\n                    // If we're trying to load a library", "answers": ["            int size = libs.size();"], "all_classes": null, "length": 8562}
{"pred": "            state.s1 = s0;\n            state.s2 = s1;\n            state.magicv = hqrndmagic;\n        }\n        /*************************************************************************\n        HQRNDState initialization with two integer values.\n        The  values  are  used  as  seeds  for  the  random  number  generator", "answers": ["            hqrndseed(s0, s1, state, _params);"], "all_classes": null, "length": 18518}
{"pred": "                hr = (float) radii.getTopRightHorizontalRadius();\n                vr = (float) radii.getTopRightVerticalRadius();\n                // 1 - Top Right:     X - HR, Y + 0,      X, Y,      X + 0, Y + VR\n                dx0", "answers": ["                hr = (float) radii.getTopRightHorizontalRadius();"], "all_classes": null, "length": 9945}
{"pred": "        group = group.add_option_group(_('Yum Base Command Line Options'))\n        group.add_option(\"-y\", \"--assumeyes\", dest=\"assumeyes\",\n                        action=\"store_true\",\n                        help=_(\"assume yes for all prompts\"))\n        group.add_option(\"-q\", \"--quiet\", dest=\"quiet\", action=\"", "answers": ["        group.add_option(\"\", \"--rpmverbosity\", default=None,"], "all_classes": null, "length": 8933}
{"pred": "            for (int i = 0; i < retryCount; i++) {\n                try {\n                    // mount the data in the repository.\n                    mountData(dataFile, dataPrefix, values, defaultData,\n                              registerDataNames, fileEditable);\n                    successful = true;\n                    break;\n                } catch (Exception", "answers": ["            while (!successful && retryCount-- > 0) try {"], "all_classes": null, "length": 10896}
{"pred": "                    }\n                }\n                moduleBeingBuilt.AddDebugDocument(normalizedPath, checkSumText, guid);\n            }\n        }\n        private static bool CheckSumMatches(string checkSumText, string sourceHash)\n        {\n            return checkSumText == sourceHash;\n        }\n        private static void ReportManifestResourceNameConflict(\n", "answers": ["                        if (guid == existingDoc.SourceHashKind)"], "all_classes": null, "length": 8489}
{"pred": "                    while self.tok[0]!= ')':\n                        if self.tok[0] == 'TYPE':\n                            params.append(self.tok[1])\n                            self.NextToken()\n                            self.expect('IDENTIFIER')\n                        else:\n                            self.expect('IDENTIFIER')\n                        params.append(self.tok[1])\n                       ", "answers": ["                    if self.tok[0] != ')':"], "all_classes": null, "length": 10276}
{"pred": "#------------------------------------------------------------------------------\n#------------------------------------------------------------------------------\n#------------------------------------------------------------------------------\n#------------------------------------------------------------------------------\n#------------------------------------------------------------------------------\n#------------------------------------------------------------------------------\n#------------------------------------------------------------------------------\n#------------------------------------------------------------------------------\n#------------------------------------------------------------------------------\n#------------------------------------------------------------------------------\n#------------------------------------------------------------------------------\n#------------------------------------------------------------------------------\n#------------------------------------------------------------------------------\n#------------------------------------------------------------------------------\n#------------------------------------------------------------------------------\n#------------------------------------------------------------------------------\n#------------------------------------------------------------------------------\n#------------------------------------------------------------------------------\n#------------------------------------------------------------------------------\n#------------------------------------------------------------------------------\n#------------------------------------------------------------------------------\n#------------------------------------------------------------------------------\n#------------------------------------------------------------------------------\n#------------------------------------------------------------------------------\n#------------------------------------------------------------------------------\n#------------------------------------------------------------------------------\n#------------------------------------------------------------------------------\n#------------------------------------------------------------------------------\n#------------------------------------------------------------------------------\n#------------------------------------------------------------------------------\n#------------------------------------------------------------------------------\n#------------------------------------------------------------------------------\n", "answers": ["        options_value = json_d.get('options', [])"], "all_classes": null, "length": 13691}
{"pred": "          pMem.n = sqlite3Strlen30( pMem.z );\n        }\n        pMem.type = SQLITE_TEXT;\n        pMem.enc = SQLITE_UTF8;\n        if ( p.pResultSet == null )\n        {\n          p.pResultSet = p.pResultSet = new Mem[8];\n        }\n        p.p", "answers": ["          Debug.Assert( pMem.z != null );"], "all_classes": null, "length": 8052}
{"pred": "def _fail(self, req, status):\n    return json.dumps({'status': status})\n```\n\nThe code provided is a part of a web application that handles various tasks related to user management, such as creating new users, managing existing users, and performing various actions on user data. The code is written in Python and", "answers": ["        json_data = json.loads(str(form['jsondata']))"], "all_classes": null, "length": 9234}
{"pred": "                disk_type = expected_disk_spec['type'].lower()\n                if disk_type not in ['thin', 'eagerzeroedthick', 'eagerzeroed']:\n                    self.fail(\"Invalid disk type '%s' specified\" % disk_type)\n                if disk_type == 'thin' and'scsi'", "answers": ["                disk_type = expected_disk_spec.get('type', '').lower()"], "all_classes": null, "length": 9014}
{"pred": "\t\t\treturn names [(int) ot] [1];\n\t\t}\n\t\tpublic override string GetSignature (string name)\n\t\t{\n\t\t\treturn name;\n\t\t}\n\t\tpublic override string GetSignature (string name, string signature)\n\t\t{\n\t\t\treturn name;\n\t\t}\n\t\tpublic override string GetSignature (", "answers": ["\t\t\treturn names [(int) ot] [1];"], "all_classes": null, "length": 8622}
{"pred": "                this.childBranches = null;\n                this.children = null;\n                this.filteredChildren = null;\n                this.filteredChildrenCount = 0;\n                this.filteredChildrenList = null;\n                this.filteredChildrenListCount = 0;\n                this.filteredChildrenListIndex = 0;\n                this.filteredChildrenListOffset", "answers": ["                this.Children = new ArrayList();"], "all_classes": null, "length": 8049}
{"pred": "class stock_move(osv.osv):\n    _name ='stock.move'\n    _inherit ='stock.move'\n    _columns = {\n        'product_qty': fields.float('Quantity', digits_compute=dp.get_precision('Product UoS')),\n        'product_uom': fields.many2one('product.u", "answers": ["        if acc_src == acc_valuation:"], "all_classes": null, "length": 9425}
{"pred": "    out : array of datetime64[D]\n        An array with the same shape as ``dates``, containing the\n        adjusted dates.\n    See Also\n    --------\n    is_busday : Returns a boolean array indicating which dates are valid.\n    busday_offset : Applies an offset to the given dates.\n    busday", "answers": ["    out : array of datetime64[D]"], "all_classes": null, "length": 23278}
{"pred": "                subsets = dim_coord_subset()\n            else:\n                subsets = [slice(None)]\n        else:\n            subsets = [slice(None)]\n        return subsets\n    def _intersect(self, other, intersect_func):\n        # Check if the other object is a CoordExtent\n        if isinstance(other, iris.coords.CoordExtent", "answers": ["                subsets = dim_coord_subset()"], "all_classes": null, "length": 8031}
{"pred": "this.region = region;\nupdateRegion();\n}\nvoid updateRegion() {\n\tif (region == null) {\n\t\tregion = new Region();\n\t}\n\tregion.setHrgn(handle);\n}\n/**\n * Sets the receiver's tool tip text.\n * <p>\n * The tool tip text may contain any key except <", "answers": ["\tlong /*int*/ hRegion = 0;"], "all_classes": null, "length": 16705}
{"pred": "                    if paper in autoclaim_successful_recs:\n                        continue\n                    if paper in autoclaim_unsuccessful_recs:\n                        continue\n                    if paper in autoclaim_ticket:\n                        continue\n                    if paper in external_pubs_association:\n                        continue\n                    if paper in papers_to_autoclaim:\n", "answers": ["                    operation_parts = {'pid': person_id,"], "all_classes": null, "length": 8290}
{"pred": "            u\"User %s opted in to receiving emails from course %s\",\n            user.username,\n            course_key\n        )\n        track.views.track(\n            \"change_email_settings\",\n            {\"course_id\": course_id},\n            {\"receive_emails\": receive_emails}\n        )\n    else:\n        optout_object = Opt", "answers": ["            u\"User %s (%s) opted in to receive emails from course %s\","], "all_classes": null, "length": 8301}
{"pred": "class CGUnionConversion:\n    def __init__(self, type, unionConversion):\n        self.type = type\n        self.unionConversion = unionConversion\n        self.enumValues = []\n        self.enumConversions = []\n        self.enumNames = []\n        self.enumTypes = []\n        self.enumInnerTypes = []\n       ", "answers": ["        if len(arrayObjectMemberTypes) > 0:"], "all_classes": null, "length": 12254}
{"pred": "class _ParserBase(object):\n    def __init__(self, expr):\n        self.expr = expr\n        self._results = None\n        self._tokens = None\n        self._loc = None\n        self._locEnd = None\n        self._locStart = None\n        self._locLine =", "answers": ["                    tokenlist[ikey] = _ParseResultsWithOffset(dictvalue,i)"], "all_classes": null, "length": 11936}
{"pred": "```python\ndef _CheckFile(file_path):\n  \"\"\"Check a single file for lint errors.\"\"\"\n  #... (rest of the function remains the same)\n```\nThe code is already quite long, so I'll only provide the next line of code, which is the first line of the `_CheckFile` function", "answers": ["    if matched_zero and matched_zero.group(1) != '0':"], "all_classes": null, "length": 20316}
{"pred": "def GuessVCS():\n    \"\"\"Guess the VCS from the current directory.\"\"\"\n    # Check for Git.\n    if os.path.exists(os.path.join(os.getcwd(), \".git\")):\n        return \"git\"\n    # Check for SVN.\n    if os.path.exists(os.path.join(os.getcwd(), \".svn\")):\n       ", "answers": ["          if after == NULL_HASH:"], "all_classes": null, "length": 10689}
{"pred": "            url = _get_subfield_value(fft, 'a')\n            if url is None:\n                url = _get_subfield_value(fft, 'q')\n            if url is None:\n                url = _get_subfield_value(fft, 'u')\n            if url is None:\n                url = _", "answers": ["            url = field_get_subfield_values(fft, 'a')"], "all_classes": null, "length": 8249}
{"pred": "        int[] ret = new int[ifds.length];\n        for (int i = 0; i < ifds.length; i++) {\n            if ((ifdFlags & (1 << ifds[i]))!= 0) {\n                ret[i] = ifds[i];\n            }\n        }\n        return", "answers": ["        ArrayList<Integer> l = new ArrayList<>();"], "all_classes": null, "length": 9563}
{"pred": "            c = new double[m];\n            i1 = 0;\n            while (i1<m)\n            {\n                c[i1] = b[i1];\n                i1++;\n            }\n            return;\n        }\n    }\n}\n```\nThis code is a part of a larger class, and it seems to be", "answers": ["            c = new double[m];"], "all_classes": null, "length": 10316}
{"pred": "            \"\\x1FF2\\x03B1\", /* Greek letter alpha */\n            \"\\x1FF3\\x03B2\", /* Greek letter beta */\n            \"\\x1FF4\\x03B3\", /* Greek letter gamma */\n            \"\\x1FF5\\x03B4\", /* Greek letter delta */\n", "answers": ["            \"\\x1FF2\\x1F7C\\x03B9\", /* 1FF2; 1F7C 03B9; Case map */"], "all_classes": null, "length": 14273}
{"pred": "        if (op == null) {\n            throw new NullPointerException();\n        }\n        try {\n            op.filter(bImg, bImg);\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n        try {\n            drawImage(bImg, x, y);\n        } catch (Exception e) {\n", "answers": ["        if (bImg == null) {"], "all_classes": null, "length": 14028}
{"pred": "      return JavaCore.createPackageFragment(fileName, pkgEnd);\n    }\n  }\n  public static IJavaProject getJavaProject(IContainer container) {\n    if (container instanceof IJavaProject) {\n      return (IJavaProject) container;\n    }\n    if (container instanceof IJavaElement) {\n      return ((", "answers": ["      Path path = new Path(new String(fileName, 0, pkgEnd));"], "all_classes": null, "length": 9133}
{"pred": "def _get_sipdir():\n    \"\"\"Return the path to the SIP installation directory.\"\"\"\n    # The SIP installation directory is stored in the SIPDIR environment variable.\n    # If it is not set then we try to find it by looking for the sip.py file.\n    sipdir = os.environ.get('SIP", "answers": ["                if adding and rhs != \"\":"], "all_classes": null, "length": 8273}
{"pred": "                if end_line == t[2][0]:\n                    # same line\n                    previous[3] = (end_line, end + len(text))\n                else:\n                    # new line\n                    logical.append(previous)\n                    previous = (t[2][0], t[2][1], text, (t", "answers": ["                start_line, start = t[2]"], "all_classes": null, "length": 8040}
{"pred": "    def parse_poly(self, filename):\n        poly = None\n        with open(filename, 'r') as f:\n            for line in f:\n                line = line.strip()\n                if line.startswith('#'):\n                    continue\n                if line.startswith('poly'):\n                    poly = line.split('=')[1].strip()\n                   ", "answers": ["        with open(filename, \"r\") as inputfile:"], "all_classes": null, "length": 9404}
{"pred": "\t\t\t\tif (mediaEncoderItems.Length!= 3)\n\t\t\t\t{\n\t\t\t\t\tthrow new ArgumentException(String.Format(\"Invalid media encoding string: {0}\", mediaEncStr));\n\t\t\t\t}\n\t\t\t\tstring[] fileTypes = mediaEncoderItems[0].Split(new char[] { '.' }, StringSplitOptions.RemoveEmptyEntries);\n\t\t\t\tstring[] fileExtensions =", "answers": ["\t\t\t\tif (mediaEncoderItems.Length != 3)"], "all_classes": null, "length": 11381}
{"pred": "            for k in self.splitKeyHash.keys():\n                if k in tree2.splitKeyHash.keys():\n                    theSum += abs(self.splitKeyHash[k].br.len - tree2.splitKeyHash[k].br.len)\n            for k in selfHasButNotTree2:\n                theSum += self.splitKeyHash", "answers": ["            for k in self.splitKeySet.intersection(tree2.splitKeySet):"], "all_classes": null, "length": 10347}
{"pred": "def _get_cube_shape(cube):\n    return tuple(cube.shape) if cube.shape else (1,)\n```\n\nThe final answer is: \n```\ndef _get_cube_shape(cube):\n    return tuple(cube.shape) if cube.shape else (1,)\n``` \nThis function takes a cube as input and returns its shape as", "answers": ["                kwargs = dict(kwargs)"], "all_classes": null, "length": 11922}
{"pred": "def _listen(\n    event_key, fn, weak=False, **kw\n):\n    \"\"\"listen for an event on a target object, with a weak reference to the\n    target object if specified.  The weak reference is used to allow the\n    target object to be garbage collected without preventing the event from\n", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": "                setMargins(\n                        a.getDimensionPixelOffset(LEFT, DEFAULT_LEFT),\n                        a.getDimensionPixelOffset(TOP, DEFAULT_TOP),\n                        a.getDimensionPixelOffset(RIGHT, DEFAULT_RIGHT),\n                        a.getDimensionPixelOffset(BOTTOM, DEFAULT_BOTTOM));\n            } finally {\n                a.recycle();\n            }\n        }\n", "answers": ["                int margin = a.getDimensionPixelSize(MARGIN, DEFAULT_MARGIN);"], "all_classes": null, "length": 9007}
{"pred": "        if (Trace.isTraceEnabled()) {\n            if (Trace.isTraceEnabled()) {\n                SibTr.trace(Trace.INFO, \"getUuid() - \" + _uuid);\n            }\n            return _uuid;\n        } else {\n            return null;\n        }\n    }\n    /**\n     * Returns the unique id", "answers": ["        if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())"], "all_classes": null, "length": 9441}
{"pred": "                return new SynthesizedIntrinsicOperatorSymbol(returnType, op, isChecked);\n            }\n            return new SynthesizedIntrinsicOperatorSymbol(leftType, rightType, returnType, op, isChecked);\n        }\n        private static void GetSymbolsForIntrinsicOperator(BoundNode node, out Symbol symbol, out bool isDynamic", "answers": ["                if ((object)leftType == null)"], "all_classes": null, "length": 15198}
{"pred": "        self.invoke('beforeEvaluate', expression=expression, locals=locals)\n        try:\n            result = self.pseudoEvaluate(expression, locals)\n        except Exception, e:\n            # If an exception occurs, we'll catch it and let the caller\n            # decide what to do with it.\n            self.metaError", "answers": ["        if expression in ('1', 'True'): return True"], "all_classes": null, "length": 8731}
{"pred": "      for (int j = 0; j < dsize; j++) {\n        labels[dataIndex][j] = document.get(j).label();\n        data[dataIndex][j] = document.get(j).features();\n        if (featureVals!= null) {\n          featureVals[dataIndex][j] = document", "answers": ["      if (featureVals != null)"], "all_classes": null, "length": 8316}
{"pred": "        /// <summary>\n        internal uint pad; // padding to make size of record a multiple of 4\n    }\n    // end of LeafMethod\n    // end of LeafMFunc\n    // end of LeafMFunc\n    // end of LeafMFunc\n    // end of LeafMFunc\n", "answers": ["        internal string name; // length prefixed name of method"], "all_classes": null, "length": 9110}
{"pred": "            if (GL.GetString(StringName.Version).StartsWith(\"GL ES\"))\n                contextProfile = _CONTEXT_PROFILE_ES;\n            // MAJOR & MINOR only introduced in GL 3.0\n            GL.GetInteger(GetPName.MajorVersion, out majorVersion);\n            GL.GetInteger(GetPName.Minor", "answers": ["            if (GL.GetString(StringName.Version).StartsWith(\"GL ES\"))"], "all_classes": null, "length": 8378}
{"pred": "```python\ndef check_bibcode(bibcode):\n    \"\"\"Check if a bibcode is valid.\"\"\"\n    #... (rest of the function implementation)\n```\nThis function is used to check if a bibcode is valid. A bibcode is a unique identifier for a publication in the ADS database. It is", "answers": ["    return (0, CFG_WEBACCESS_WARNING_MSGS[0])"], "all_classes": null, "length": 11744}
{"pred": "class UDFBootRecord(object):\n    \"\"\"UDF Boot Record.\"\"\"\n    def __init__(self, boot_record, boot_record_size, boot_record_location,\n                 boot_record_location_offset, boot_record_location_size,\n                 boot_record_location_size_offset, boot_record_location_size2,\n                 boot_record_location_size2_offset,", "answers": ["        self.impl_id = UDFEntityID()"], "all_classes": null, "length": 10644}
{"pred": "```\ndef _get_numeric_data(self, obj):\n    \"\"\"\n    Return a new object with only numeric columns.\n    \"\"\"\n    #... (rest of the function remains the same)\n```\nThis function is used to get the numeric data from a DataFrame. It is used in various places in the code, including in", "answers": ["                            result = concat(values, keys=key_index,"], "all_classes": null, "length": 9883}
{"pred": "            case 'L':\n                flags |= LITERAL;\n                break;\n            default:\n                throw error(\"Unknown flag: \"+(char)ch);\n            }\n            ch = next();\n            if (ch == ':') {\n                unread();\n                break;\n            }\n        }\n    }\n    /**\n     *  The following", "answers": ["            case '-': // subFlag then fall through"], "all_classes": null, "length": 10915}
{"pred": "        final VMProfile profile = _vmProfileDao.findById(vmId);\n        if (profile == null) {\n            throw new CloudRuntimeException(\"Unable to find VM profile for vmId: \" + vmId);\n        }\n        final VirtualMachine vm = _vmDao.findById(vmId);\n        if (vm == null)", "answers": ["        final VMInstanceVO vm = _vmDao.findByUuid(vmUuid);"], "all_classes": null, "length": 8853}
{"pred": "        #=========================================================================\n        #=========================================================================\n        #=========================================================================\n        #=========================================================================\n        #=========================================================================\n        #=========================================================================\n        #=========================================================================\n        #=========================================================================\n        #=========================================================================\n        #=========================================================================\n        #=========================================================================\n        #=========================================================================\n        #=========================================================================\n        #=========================================================================\n        #=========================================================================\n        #=========================================================================\n", "answers": ["        W_nk = self._computeWeights(recalc_denom=True)"], "all_classes": null, "length": 12510}
{"pred": "class FTPTestCase(unittest.TestCase):\n    def setUp(self):\n        self.root = filepath.FilePath('/')\n        self.shell = ftp.FTPShell(self.root)\n        self.transport = ftp.FTPTransport(self.shell)\n        self.factory = ftp.FTPFactory(self.transport)\n        self.protocol = self.factory.buildProtocol(None)\n        self", "answers": ["        d = self.shell.stat(('ned',), ('size', 'directory'))"], "all_classes": null, "length": 8415}
{"pred": "                if( b < 0 ) {\n                    break;\n                }   // end if\n                \n                dest[ off + i ] = (byte)b;\n            }   // end for\n            \n            return i;\n        }   // end read\n        \n        /**\n         * Reads all bytes from the input stream and converts them to", "answers": ["                if( b >= 0 ) {"], "all_classes": null, "length": 9989}
{"pred": "            if (b == null)  return a;\n            return new ToolkitEventMulticaster(a, b);\n        }\n        static AWTEventListener remove(AWTEventListener a,\n                                      AWTEventListener b) {\n            if (a == null)  return b;\n            if (b == null)  return a", "answers": ["            if (b == null)  return a;"], "all_classes": null, "length": 10923}
{"pred": "\t\t\t\t\t\t\t\tresults.Sort( AccountComparer.Instance );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif ( results.Count == 1 )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tAccount disp = results[0] as Account;\n\t\t\t\t\t\t\t\tif ( disp!= null )\n\t\t\t\t\t\t\t\t\tfrom disp;\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\tfrom disp = results[0] as Account;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t", "answers": ["\t\t\t\t\t\t\t\tresults.Sort( AccountComparer.Instance );"], "all_classes": null, "length": 9034}
{"pred": "            if (result!= RESULT.OK)\n            {\n                return result;\n            }\n            soundnew = new Sound();\n            soundnew.setRaw(soundraw);\n            sound = soundnew;\n            return result;\n        }\n        public RESULT createSoundEx            (IntPtr name_or_data, MODE mode, ref CREATESOUNDEX", "answers": ["            if (result != RESULT.OK)"], "all_classes": null, "length": 14660}
{"pred": "                tbl_ix = data[base] & 255;\n            int huffbits = 0;\n            int huffval = 0;\n            int huffbitslen = 0;\n            int huffbitspos = 0;\n            int huffbitslenlen = 0;\n            int h", "answers": ["                tbl_ix = data[base] & 255;"], "all_classes": null, "length": 16751}
{"pred": "                    this.AddButton(x2, 215, 0xFAB, 0xFAD, 405, GumpButtonType.Reply, 0);\n                    // add the team deathmatch challenge button\n                    this.AddButton(x3, 215, 0xFAB, 0xFAD, 406", "answers": ["                    this.AddLabel(x2 + 30, 215, 55, a.Text(200233));  // \"DeathBall\""], "all_classes": null, "length": 8017}
{"pred": "            TemplateRow = TemplateDT.NewRow();\n            TemplateRow.PartnerKey = AFamilyPartnerKey;\n            RequiredColumns = new StringCollection();\n            RequiredColumns.Add(\"PartnerKey\");\n            RequiredColumns.Add(\"LocationKey\");\n            RequiredColumns.Add(\"LocationType\");\n            RequiredColumns.Add(\"LocationSite\");\n            RequiredColumns", "answers": ["            TemplateRow = TemplateDT.NewRowTyped(false);"], "all_classes": null, "length": 8754}
{"pred": "\t\tfinal LameInternalFlags gfc = gfp.internal_flags;\n\t\tif (gfc!= null) {\n\t\t\t/* free internal buffers */\n\t\t\tgfc.free();\n\t\t\tgfp.internal_flags = null;\n\t\t}\n\t\tif (gfp.free_bitstream) {\n\t\t\tbs.free_bitstream();\n\t\t", "answers": ["\t\tif (gfp != null && gfp.class_id == LAME_ID) {"], "all_classes": null, "length": 8018}
{"pred": "                if (AllSubmissionsOK == false)\n                {\n                    TVerificationResultCollection verificationResult = new TVerificationResultCollection();\n                    verificationResult.Add(new TVerificationResult(\n                        Messages.GetMessage(\"PartnerDetails\", \"PartnerDetails\", \"PartnerDetails\"),\n                        Messages.GetMessage(\"PartnerDetails\", \"PartnerDetails\", \"", "answers": ["                if (AllSubmissionsOK == false)"], "all_classes": null, "length": 8128}
{"pred": "```python\nelif name == \"requires\":\n```\nShould be:\n```python\nelif name == \"requires\" or name == \"requires\" == \"requires\":\n```\nExplanation:\nThe code is checking if the name of the tag is \"requires\". However, the condition `name == \"requires\"` is always `", "answers": ["                    elif name == \"requires\":"], "all_classes": null, "length": 9136}
