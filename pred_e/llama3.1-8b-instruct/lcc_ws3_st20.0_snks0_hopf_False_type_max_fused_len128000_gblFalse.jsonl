{"pred": "\t\t\tprimerak.setInventarnaKnjiga(invKnjPanel.getCode());\n\t\t\tprimerak.setPodlokacija(podlokacijaPanel.getCode());\n\t\t\tprimerak.setBrojPrimeraka((Integer)raspodelaSpinner.getValue());\n\t\t\tprimerak.setPreostalo(Integer.parseInt(preost", "answers": ["\t\t\tString invKnj = invKnjPanel.getCode();"], "all_classes": null, "length": 451}
{"pred": "              SubCriteria[\"GroupID\"] = new SearchCondition<String>(\"GroupID\");\n              }\n              return (ISearchCondition<String>)SubCriteria[\"GroupID\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"WorkQueueID\")]\n        public ISearchCondition<Int32", "answers": ["                 SubCriteria[\"GroupID\"] = new SearchCondition<String>(\"GroupID\");"], "all_classes": null, "length": 475}
{"pred": "\t\taliases.Add (\"GB2312\", \"gb2312\");\n\t\taliases.Add (\"GB2312-80\", \"gb2312\");\n\t\taliases.Add (\"GB2312-80-1990\", \"gb2312\");\n\t\taliases.Add (\"GB2312-80-1990:199", "answers": ["\t\taliases.Add (\"GBK\", \"gb2312\");"], "all_classes": null, "length": 545}
{"pred": "        if source.get() == '[' + class_name:\n            return class_contents\n    return None\n```\nThe final answer is: \n```\ndef _parse_char_class(source):\n    for class_name, class_contents in _BRACKET_CHARACTER_CLASSES.iteritems():\n        if source.get() == '[' + class_name:\n           ", "answers": ["        if _parse_verbatim(source, '[:%s:]' % class_name):"], "all_classes": null, "length": 850}
{"pred": "#izracunavanje rezultata za svaki slika u test setu\n#izracunavanje rezultata za svaki slika u test setu\n#izracunavanje rezultata za svaki slika u test setu\n#izracun", "answers": ["check = numbers[5][123]"], "all_classes": null, "length": 502}
{"pred": "        sendBean(\"A\", 0, 0L);\n        assertEquals(0L, listener.assertOneGetNewAndReset().get(\"longBoxed\"));\n        sendBean(\"A\", null, null);\n        assertEquals(null, listener.assertOneGetNewAndReset().get(\"longBoxed\"));\n        sendBean", "answers": ["        sendBean(\"A\", null, null);"], "all_classes": null, "length": 756}
{"pred": "                item.setExpanded(true);\n                item.setSelection(true);\n                break;\n            }\n            if (item.getItemCount() > 0) {\n                restoreSelection(selectionText, item.getItems());\n            }\n        }\n    }\n    private void saveSettings() {\n        SettingsSaver.saveSettings(fetcherGui);\n    }\n    private", "answers": ["                tree.setSelection(new TreeItem[] { item });"], "all_classes": null, "length": 1800}
{"pred": "        nilCard.setText(Language.INSTANCE.localizeWithReplace(\"instance.nodisplay\", \"\\n\\n\"));\n    }\n} \nPlease complete the code given above. \nThe code is written in Java and it seems to be a part of a larger application. The code is for a tab in a GUI application that displays a list", "answers": ["        if (nilCard != null) {"], "all_classes": null, "length": 511}
{"pred": "\t\t\tsqrtAspect = (float) Math.sqrt(w * w / h / h);\n\t\t}\n\t}\n\tprivate void loadBitmap() throws IOException {\n\t\tif (file == null)\n\t\t\treturn;\n\t\tInputStream is = new FileInputStream(file);\n\t\tbitmap = BitmapFactory.decodeStream(is);\n\t\tis.close();\n\t\tif", "answers": ["\t\t\tfloat r = (w+h)/2f;"], "all_classes": null, "length": 1042}
{"pred": "            self.__repeat = (delay, interval)\n            self.__tick_id = gobject.timeout_add(10, self._tick_cb)\n        elif delay is None and self.__repeat[0] is not None:\n            self.__repeat = (None, None)\n            gobject.source_remove(self.__tick_id)\n", "answers": ["            self.__tick_id = gobject.timeout_add(10, self._tick_cb)"], "all_classes": null, "length": 703}
{"pred": "    logger.addHandler(logged_critical)\n    return logged_critical\ndef get_test_paths(test_paths, product, **kwargs):\n    if kwargs[\"test_paths\"] is None:\n        test_paths = testloader.TestPaths(test_paths)\n    else:\n        test_paths = testloader.TestPaths(kwargs[\"test_paths\"])\n    return test", "answers": ["    handler = handlers.LogLevelFilter(logged_critical, \"CRITICAL\")"], "all_classes": null, "length": 1196}
{"pred": "        if self.getState()!= 'idle' and self.getState()!= 'deactivated':\n            self.log.error('Wavemeter is not in idle state.')\n            return -1\n        # stop the measuring thread\n        self.sig_handle_timer.emit(False)\n        # stop the wavemeter\n        self._", "answers": ["        if self.getState() == 'idle':"], "all_classes": null, "length": 885}
{"pred": "        List<String> mustStatusNames = new LinkedList<String>();\n        mustStatusNames.add(\"available\");\n        mustStatusNames.add(\"dnd\");\n        mustStatusNames.add(\"xa\");\n        mustStatusNames.add(\"offline\");\n        mustStatusNames.add(\"unknown\");\n        mustStatusNames.add(\"proposed\");\n        must", "answers": ["        List<String> requiredStatusNames ="], "all_classes": null, "length": 678}
{"pred": "                            await cmd.ExecuteArmed(this, null);\n                        }\n                    });\n                }\n            }\n            await StartVote(options, poll);\n            return true;\n        }\n        private async Task pollTimer_Elapsed(object sender, ElapsedEventArgs e)\n        {\n            if (ActivePoll!= null)\n            {\n                await Active", "answers": ["                            await cmd.ExecuteArmed(this, null);"], "all_classes": null, "length": 3344}
{"pred": "\t\t\tthis.label1.Location = new System.Drawing.Point(6, 52);\n\t\t\tthis.label1.Name = \"label1\";\n\t\t\tthis.label1.Size = new System.Drawing.Size(148, 18);\n\t\t\tthis.label1.TabIndex = 0;\n\t\t\tthis.label1.Text = \"Description\";\n\t\t\tthis.label1", "answers": ["\t\t\tthis.label1.Location = new System.Drawing.Point(6, 51);"], "all_classes": null, "length": 1316}
{"pred": "\t\t\t\tif (throwOnMissing)\n\t\t\t\t\tthrow new Exception (\"Assembly not found: \" + name);\n\t\t\t\telse\n\t\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\tclass CompoundFoundry : Foundry\n\t\t{\n\t\t\tArrayList foundries;\n\t\t\tstring name;\n\t\t\tpublic CompoundFoundry (string name)\n\t\t", "answers": ["\t\t\t\tif (assembly == null) {"], "all_classes": null, "length": 1336}
{"pred": "        if self.interface == 'all':\n            self.param_type = INTERFACE_ALL\n        elif get_interface_type(self.interface):\n            self.param_type = INTERFACE_TYPE\n        else:\n            self.param_type = INTERFACE_FULL_NAME\n    def main(self):\n        \"\"\"Main function\"\"\"\n        self.check_params()\n        self.get_intf_param", "answers": ["        if self.interface == 'all':"], "all_classes": null, "length": 1718}
{"pred": "    for (int i = 0; i < s.length(); i++) {\n      if (!Character.isDigit(s.charAt(i)) && s.charAt(i)!= ',') return false;\n    }\n    return true;\n  }\n  // Helper method to test for all numerics and commas.\n  private boolean hasOnly", "answers": ["    for (int i = 0; i < s.length(); i++)"], "all_classes": null, "length": 939}
{"pred": "\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t\t/// <summary>\n\t\t/// Records a staff member deleting an item\n\t\t/// </summary>\n\t\t/// <param name=\"auction\">The auction</param>\n\t\t/// <param", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "                            sead_partnn_l = getNeighbours(nodemap, c_sead);\n                        }\n                        if (sead_partnn_l!= null) {\n                            for (int k = 0; (k < sead_partnn_l.size() &&!force_kill_path); k++) {\n                                Integer c_se", "answers": ["                            if (c_sead == start || c_sead == stop) {"], "all_classes": null, "length": 1426}
{"pred": "\t\t\tthis.ResumeLayout(false);\n\t\t\tthis.PerformLayout();\n\t\t\tthis.PerformLayout();\n\t\t\tthis.PerformLayout();\n\t\t\tthis.PerformLayout();\n\t\t\tthis.PerformLayout();\n\t\t\tthis.PerformLayout();\n\t\t\tthis.PerformLayout();\n\t\t\tthis.PerformLayout();\n\t\t\tthis.PerformLayout();\n\t\t\tthis.PerformLayout();\n\t\t\tthis.PerformLayout();\n\t\t\tthis.PerformLayout();\n\t\t\tthis.PerformLayout();\n\t\t\tthis.PerformLayout();\n\t\t\tthis.PerformLayout", "answers": ["\t\t\tthis.Size = new System.Drawing.Size(371, 300);"], "all_classes": null, "length": 825}
{"pred": "    behavior = {\n        'observations': observations,\n        'translations': translations_dict,\n        'tour': tourlist,\n        }\n    with open(OutFileNames.behavior, 'w') as f:\n        json.dump(behavior, f, indent=4)\n        \n    return behavior\ndef writeBehaviorCSV(", "answers": ["    behavior_list = [ checkOnTour(tourlist, o,"], "all_classes": null, "length": 609}
{"pred": "```python\nwith Html(\"div\", class_=\"content\", id='subsection narrative') as sec8:\n```\nThis line of code is the next step in the narrative web page generator. It is used to create a new section in the HTML content of the page. The section will be used to display additional information", "answers": ["        footer = self.write_footer(None)"], "all_classes": null, "length": 960}
{"pred": "            while abs(m.relative_alt) < max_relalt_mm:\n                self.mav.wait_heartbeat()\n                m = self.mav.recv_match(type='GLOBAL_POSITION_INT', blocking=True)\n            self.progress(\"Rotor runup complete\")\n            self.progress(\"TAKEOFF\")\n            self.change_mode('GUIDED')\n           ", "answers": ["            if abs(m.relative_alt) > max_relalt_mm:"], "all_classes": null, "length": 577}
{"pred": "\t\t\t\t\t\t\tif (strings[0] == \"GlobalSettings\")\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar globalSettings = Session.GlobalSettings.Deserialize(node.Value);\n\t\t\t\t\t\t\t\torderManager.LobbyInfo.GlobalSettings = globalSettings;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tGame.SyncLobbyInfo();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\tcase \"SyncLobby", "answers": ["\t\t\t\t\t\t\tif (strings[0] == \"GlobalSettings\")"], "all_classes": null, "length": 591}
{"pred": "\t\t\t\tSystem.arraycopy(src, srcOffset, buf, 0, byteCount);\n\t\t\t\tbufferedPacket.setPayload(buf);\n\t\t\t\tstate = SocketReadState.READ_NOTHING;\n\t\t\t\treturn bufferedPacket;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\treturn null;\n\t}\n\t/**\n\t * This function will try to read", "answers": ["\t\t\t\tfor (int i = 0; i < byteCount; i++) {"], "all_classes": null, "length": 783}
{"pred": "        opiRuntimeToolBarDelegate = new OPIRuntimeToolBarDelegate(this);\n        opiRuntimeToolBarDelegate.init(site, input);\n        if (persist)\n        {\n            final IMemento memento = createMemento();\n            if (memento!= null)\n            {\n                saveMemento(memento);\n            }\n        }\n   ", "answers": ["        if (opiRuntimeToolBarDelegate != null)"], "all_classes": null, "length": 813}
{"pred": "            if (launcher!= null && launcher.isPopupTrigger(e)) {\n                launcher.showPopup(e);\n            }\n        }\n    }\n} \nPlease complete the code given above. \n```java\npackage org.openstreetmap.josm.gui.widgets;\n\nimport java.awt.Component;\nimport java.awt.Dimension;\nimport java.awt.Toolkit", "answers": ["            if (launcher != null && !e.isPopupTrigger()) {"], "all_classes": null, "length": 933}
{"pred": "def test_clean_name_two_word_surnames(self): \n    names = [\n        (\"EDE COOPER \\nPalmer\", \"Palmer Ede Cooper\"),\n        (\"VAN DULKEN \\nRichard Michael\", \"Richard Michael Van Dulken\"),\n        (\"ARMSTRONG LILLEY \\nL", "answers": ["            (\"O`NEAL \\nCarol Joy\", \"Carol Joy O'Neal\"),"], "all_classes": null, "length": 919}
{"pred": "            sort_by, sort_order = sort\n            if sort_by == 'uploadDate':\n                key_func = itemgetter('upload_date')\n            elif sort_by == 'displayname':\n                key_func = itemgetter('displayname')\n            else:\n                raise ValueError(\"Invalid sort_by value: %s\" % sort", "answers": ["            if sort[0] == 'uploadDate':"], "all_classes": null, "length": 1853}
{"pred": "            }\n        }\n    }\n}\n```\nThe final answer is: \n```\n            public struct Enumerator : IEnumerator<T>\n            {\n                readonly SyncList<T> list;\n                int index;\n                public T Current { get; private set; }\n                public Enumerator(SyncList<T> list)\n                {\n                    this", "answers": ["                index = -1;"], "all_classes": null, "length": 1053}
{"pred": "                parentpath = parentpath[len(cwd):]\n                if parentpath.endswith(os.sep):\n                    parentpath = parentpath[:-1]\n    return unionrepository(ui, path, parentpath)```python\n# unionrepo.py - repository class for viewing union of repository changesets\n#\n# Derived from bundlerepo", "answers": ["                parentpath = parentpath[len(cwd):]"], "all_classes": null, "length": 795}
{"pred": "        if sys.version_info[0] == 2:\n            kwargs.pop('sinfo', None)\n        record = logging.LogRecord(name, level, fn, lno, msg, args, exc_info,\n                                   **kwargs)\n        record.__dict__.update(structured)\n        return record\nclass StructuredFormatter", "answers": ["        if sys.version_info[0] == 2:"], "all_classes": null, "length": 897}
{"pred": "                                m.Skills.Spellweaving.BaseFixedPoint += 1;\n                                m.Mana -= 20;\n                            }\n                            else\n                            {\n                                m.SendMessage(\"You have reached the skill cap for that skill\");\n                            }\n                        }\n                        else\n                        m.SendMessage(\"You need 100gp in your pack to", "answers": ["                                m.Mana -= 20;"], "all_classes": null, "length": 569}
{"pred": "            for key, value in hash_.items():\n                if key in model._meta.fields:\n                    fields[key] = value\n                else:\n                    extra_attrs[key] = value\n            model_obj = model.objects.get(**fields)\n            for key, value in extra_attrs.items():\n                setattr(model_obj, key,", "answers": ["            for k, v in hash_.iteritems():"], "all_classes": null, "length": 546}
{"pred": "            return page_not_authorized(req=req, referer=\"/edit\",\n                                       text=auth_message, navtrail=navtrail)\n        recid = argd['recid']\n        body, errors, warnings = perform_request_newticket(ln, recid)\n        return page(title = _(\"New Ticket\"),\n                    body =", "answers": ["            return page_not_authorized(req=req, referer=\"/edit\","], "all_classes": null, "length": 756}
{"pred": "```\n      use_tty:\n        version_added: '2.5'\n        default: 'yes'\n        description: add -tt to ssh commands to force tty allocation\n        env: [{name: ANSIBLE_SSH_USETTY}]\n        ini:\n          - section: ssh_connection\n            key:", "answers": ["        - {key: usetty, section: ssh_connection}"], "all_classes": null, "length": 968}
{"pred": "\t\tfor(int x = 0; x < DataCollection.count(); x++)\n\t\t{\n\t\t\tint index = DataCollection.add();\n\t\t\tdataString += \"RSNO\" + ims.dto.NASMessageCodes.ATTRIBUTEVALUESEPARATOR + DataCollection.get(x).Rsno;\n\t\t\tdataString += ims.dto.NAS", "answers": ["\t\tWardlistRecord data = (WardlistRecord)DataCollection.get(0);"], "all_classes": null, "length": 1476}
{"pred": "            record_add_field(rec, '300', subfields=[('a', page_count)])\n        abstract = self.get_abstract(xml)\n        if abstract:\n            record_add_field(rec, '520', subfields=[('a', abstract)])\n        keywords = self.get_keywords(xml)\n        if keywords:\n            for kwd_type", "answers": ["            record_add_field(rec, '300', subfields=[('a', page_count)])"], "all_classes": null, "length": 1283}
{"pred": "                assertEquals(A.getQuick(r, c), B.getQuick(c, r));\n            }\n        }\n    }\n    public void testViewRow() {\n        IntMatrix1D row = A.viewRow(NROWS / 2);\n        assertEquals(NCOLUMNS, row.size());\n        for (int c = 0;", "answers": ["                assertEquals(A.getQuick(r, NCOLUMNS - 1 - c), B.getQuick(r, c));"], "all_classes": null, "length": 1319}
{"pred": "# Send Unit Data\n```\nThe final answer is: \n```\n# Send Unit Data\n(PacketField(\"commandSpecificData\", ENIPSendUnitData, ENIPSendUnitData),\n                 lambda pkt: pkt.commandId == 0x70),\n                # Indicate Status\n                (PacketField(\"", "answers": ["                 lambda pkt: pkt.commandId == 0x6f),"], "all_classes": null, "length": 625}
{"pred": "\t\t//... rest of the code...\n}\n```\nThe code is written in Java and is part of a geospatial batch processing system. The `harvest` method is responsible for processing a GeoTIFF file and creating a Metoc XML file based on a template. The method takes several parameters, including", "answers": ["\t\tfinal CoordinateReferenceSystem crs = reader.getCrs();"], "all_classes": null, "length": 805}
{"pred": "            ((Creature) e).setTamed(false);\n        }\n        \n        return e;\n    }\n}\n```\nThe code is almost complete, but there are a few issues that need to be addressed. The code is an enum for MobArena, a Minecraft plugin, and it's used to spawn creatures in the game", "answers": ["            Creature c = (Creature) e;"], "all_classes": null, "length": 386}
{"pred": "\t\t\tMemoryStream ms = new MemoryStream(stream);\n\t\t\tBinaryReader bin = new BinaryReader(ms);\n\t\t\tushort* line = (ushort*)bd.Scan0;\n\t\t\tint delta = bd.Stride >> 1;\n\t\t\tfor( int y = 0; y < height; ++y, line += delta", "answers": ["\t\t\tushort* line = (ushort*)bd.Scan0;"], "all_classes": null, "length": 1243}
{"pred": "                    if (house == null)\n                        house = BaseHouse.FindHouseAt(new Point3D(m.X, m.Y + 1, 127), m.Map, 16);\n                    if (house!= null)\n                        bonus = 50.0;\n                }\n                //int range = 18 - (int", "answers": ["                    if (house == null)"], "all_classes": null, "length": 585}
{"pred": "\t\t\t\t\t{\n\t\t\t\t\t\tConsole.WriteLine(displaySet.Name);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthrow;\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tDispose(displaySets);\n\t\t\t\tDispose(seriesCT, seriesPET, seriesPETCor);\n\t\t\t}\n\t\t}\n\t\t[Test]\n\t\tpublic void TestPETFusion", "answers": ["\t\t\t\t\t\tConsole.WriteLine(\" > {0}\", displaySet.Descriptor.Description);"], "all_classes": null, "length": 803}
{"pred": "    \"\"\" Find the appropriate reader for a file \"\"\"\n    ext = os.path.splitext(fname)[1][1:]\n    if ext in supported_extensions():\n        return supported_extensions()[ext]\n    else:\n        raise ValueError(\"File %s has unknown extension %s\" % (fname, ext))\ndef read_timestamps(fname):\n", "answers": ["    exts = supported_extensions()"], "all_classes": null, "length": 653}
{"pred": "\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\t\tif (cgn.depth == -1)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcgn.depth = 0;\n\t\t\t\t\t\t\tmore = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (cgn.depth > maxDepth)\n\t\t\t\t\t\t\tmaxDepth = cgn.depth;\n\t\t\t\t\t\t// place", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "\t\t\t    case 188: // -/_ key\n                    if (down)\n                    {\n                        if (CAPS)\n                            Program.keyH_ENT = (Program.keyH_ENT & (~8));\n                        else\n                        {\n                            Program.keyH_ENT = (Program.keyH_ENT & (~4));\n                            Program.keyB_SPC", "answers": ["\t\t\t    case 189: // -/_ key"], "all_classes": null, "length": 1748}
{"pred": "out_list += [weights_dmat_all[index]]\nout_comment += ['Weights of distortion matrix']\nout_units += ['']\nresults.write(\n    out_list,\n    names=out_names,\n    header=header,\n    comment=out_comment,\n    units=out_units,\n    extname='DATA')\nresults.close()\nt3 = time", "answers": ["        out_list += [weights_dmat_all[index]]"], "all_classes": null, "length": 1374}
{"pred": "    obj = obj.lstrip(\"\\ufeff\") if obj.startswith(\"\\ufeff\") else obj\n\nThis is the next line of code in the given code snippet. It checks if the input string `obj` starts with a BOM (Byte Order Mark) character (`\\ufeff`) and removes it if present.", "answers": ["    obj = obj.lstrip(\"\\ufeff\")"], "all_classes": null, "length": 676}
{"pred": "\t\tif (orig == null ||!orig.exists() || orig.length() == 0)\n\t\t\treturn;\n\t\tString newUuid = mDbHelper.getBookUuid(newId);\n\t\tcopyFileToCoverImageIfMissing(orig, newUuid);\n\t}\n\t/**\n\t * Copy the UUID-based cover from its current location", "answers": ["\t\tif (orig == null || !orig.exists() || orig.length() == 0)"], "all_classes": null, "length": 866}
{"pred": "            strength += calculateBestTableStrength(opponent.getValue());\n        }\n        tableStrengthScore.setScore(Collections.singletonList(strength));\n        tableStrengthScore.setPlayer(player);\n        this.addAScore(tableStrengthScore);\n    }\n}\npackage usspg31.tourney.model;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport", "answers": ["            for (PlayerScore scoreTable : this.scoreTable) {"], "all_classes": null, "length": 1212}
{"pred": "            res = c.get(\"/\")\n            res.get_data()\n            assert res.status_code == 401\n    def _make_auth_headers(self, password):\n        auth = base64.b64encode(f\"{password}:OnionShare\".encode()).decode()\n        return {\"Authorization\": f\"Basic {auth}\"}\n    def", "answers": ["            res = c.get(\"/\")"], "all_classes": null, "length": 919}
{"pred": "```java\nnsClientService = mLocalBinder.getService();\n```\nThis line of code is used to get the NSClientService instance from the LocalBinder. The LocalBinder is a binder that is used to communicate with the NSClientService. The getService() method of the LocalBinder returns the NSClientService instance.", "answers": ["                nsClientService = mLocalBinder.getServiceInstance();"], "all_classes": null, "length": 516}
{"pred": "```python\n            # Now we have the makefile, we can build the OpenSSL library\n            # and the Python extensions.\n            if arch == \"x86\":\n                # 32bit build\n                os.system(\"nmake -f \"+makefile+\" \"+make_flags)\n            else:\n                # 64", "answers": ["            if arch == \"amd64\":"], "all_classes": null, "length": 982}
{"pred": "\t\tfor(int i=0; i<length; i++){\n\t\t\tif(i>=tempCostList.Length){\n\t\t\t\ttowerList[index].baseStat.costs[i]=0;\n\t\t\t}\n\t\t\telse{\n\t\t\t\ttowerList[index].baseStat.costs[i]=tempCostList[i];\n\t\t\t}\n\t\t", "answers": ["\t\tfor(int i=0; i<length; i++){"], "all_classes": null, "length": 3890}
{"pred": "\t\t\t\tAddRes( index, typeof( BrilliantAmber ), 1032697, 1, 1044240 );\n\t\t\t\tAddRecipe( index, 34 );\n\t\t\t\tSetNeededExpansion( index, Expansion.ML );\n\t\t\t\tindex = AddCraft( typeof( RuneAxe ), 1011082, 107", "answers": ["\t\t\t\tAddRes( index, typeof( BrilliantAmber ), 1032697, 1, 1044240 );"], "all_classes": null, "length": 3677}
{"pred": "def test_gwt_plurals(self):  # pylint: disable=unused-argument\n    \"\"\"Test conversion of gwt plural units.\"\"\"\n    propsource = \"\"\"\nmessage-multiedit-header={0,number} selected\nmessage-multiedit-header[none]=Edit\nmessage-multiedit-header[one]={0", "answers": ["        options = self.help_check(options, \"-P, --pot\")"], "all_classes": null, "length": 1336}
{"pred": "\t\t\tforeach (object member in members) {\n\t\t\t\tif (member is Signal) {\n\t\t\t\t\tSignal sig = member as Signal;\n\t\t\t\t\tsw.WriteLine (\"\\t\\tpublic event \" + sig.CName + \" \" + sig.CName + \";\");\n\t\t\t\t} else if (member is VirtualMethod) {\n\t\t\t\t\tVirtual", "answers": ["\t\t\tforeach (Signal sig in sigs.Values) {"], "all_classes": null, "length": 1298}
{"pred": "    module = AnsibleModule(argument_spec=fields)\n    try:\n        from fortiosapi import FortiOSHandler\n        fos = FortiOSHandler(module)\n        is_error, has_changed, result = fortios_wireless_controller(module.params, fos)\n    except Exception as sh:\n        if has_changed:\n            module", "answers": ["    module = AnsibleModule(argument_spec=fields,"], "all_classes": null, "length": 1009}
{"pred": "    node.setLeaf(leaf);\n  }\n  public void setLoaded(boolean loaded) {\n    this.loaded = loaded;\n  }\n  public void setLoading(boolean loading) {\n    this.loading = loading;\n  }\n  public void setPresentableTextContainer(Element presentableTextContainer) {\n    this.presentableTextContainer =", "answers": ["    if (node instanceof MutableNode) {"], "all_classes": null, "length": 568}
{"pred": "            return GroupByWithMinSize(prevChildren, c => c.Published.HasValue? c.Published.Value.Date.ToString(\"yyyy-MM-dd\") : \"-\")\n               .Select(g => childFactory(query.Parent, g.Key, \"virtual-grouping/\" + g.Key, () => g));\n        }\n        private IEnumerable<Content", "answers": ["            var page = prevChildren.Take(StartPagingTreshold).ToList();"], "all_classes": null, "length": 781}
{"pred": "        soaResponse = dns.message.make_response(query)\n        soaResponse.use_edns(edns=False)\n        soaResponse.answer.append(soa)\n        responses.append(soaResponse)\n        response = dns.message.make_response(query)\n        response.use_edns(edns=False)\n        content = \"\"\n        for i in", "answers": ["        soaResponse = dns.message.make_response(query)"], "all_classes": null, "length": 648}
{"pred": "        if (kind == null) {\n            throw new IllegalArgumentException(\"Unknown javaccKind: \" + javaccKind);\n        }\n        return kind;\n    }\n    public int getJavaCCKind() {\n        return javaccKind;\n    }\n    public TokenCategory getCategory() {\n        return category;\n    }\n    public", "answers": ["        if (kind == null) {"], "all_classes": null, "length": 524}
{"pred": "        }\n        public Control GetLabelForPercentageControl()\n        {\n            return this.FindControlRecursive(PercentageControlID) as Label;\n        }\n        public Control GetLabelForTitleControl()\n        {\n            return this.FindControlRecursive(\"LabelForTitle\") as Label;\n        }\n        #endregion\n    }\n}\n```\nThe", "answers": ["            return this.FindControlRecursive(DescriptionControlID) as Label;"], "all_classes": null, "length": 450}
{"pred": "```python\n            query_string = urllib.urlencode(query_args)\n            path = path + '?' + query_string\n```\nThis line of code is used to add query arguments to the path of the URL. The query arguments are passed in as a dictionary. The `urllib.urlencode()` function is used to convert", "answers": ["            path += '?' + query_args"], "all_classes": null, "length": 1198}
{"pred": "\t\t\t\tcanvas.drawBitmap(tiles[i].getBitmap(), left, top, null);\n\t\t\t}\n\t\t}\n\t}\n\tprivate void drawPath(Canvas canvas, double localScale){\n\t\tfor(int i = 0; i < edges.size(); i++){\n\t\t\tGraphEdge edge = edges.get(i);\n\t\t\tLat", "answers": ["\t\t\t\tRectF destRect = new RectF(left, top, right, bottom);"], "all_classes": null, "length": 1184}
{"pred": "            HueInfo = new Dictionary<DyeType, Tuple<int, int>>();\n            HueInfo.Add(DyeType.None, new Tuple<int, int>(0, 0));\n            HueInfo.Add(DyeType.WindAzul, new Tuple<int, int>(0x1A, 0x1A));\n", "answers": ["            HueInfo = new Dictionary<DyeType, Tuple<int, int>>();"], "all_classes": null, "length": 535}
{"pred": "                this.alertDialog.show(MSGS.deleteCertificate(), MSGS.deleteCertificateConfirm(), new ConfirmListener() {\n                    @Override\n                    public void onConfirm() {\n                        RequestQueue.submit(c -> CertificateListTabUi.this.gwtCertificatesService.uninstallCertificate(selected.getAlias(), c.callback(result -> {\n                            CertificateListTabUi.this", "answers": ["                final Modal modal = new Modal();"], "all_classes": null, "length": 698}
{"pred": "\t\t\t\t\"        {0}\" +\n\t\t\t\t\"        Private Sub SomeMethod(Of T As  {{System.IComparable, System.ICloneable, New}}, S As System.IDisposable)(){0}\" +\n\t\t\t\t\"        End Sub{0}\" +\n\t\t\t\t\"    End Class{0}\" +\n\t\t\t", "answers": ["\t\t\t\t\"    {0}\" +"], "all_classes": null, "length": 1270}
{"pred": "            list.append(self.file + os.extsep + ext)\n        return list\n    def do_open(self, flags):\n        self.dbm = self.dbmmodule.open(self.file, flags)\n    def do_close(self):\n        self.dbm.close()\n    def open(self, flags, checkcount=False):\n        Open", "answers": ["            if os.access(self.file + os.extsep + ext, os.F_OK):"], "all_classes": null, "length": 1142}
{"pred": "        return \"ImageIcon: \" + description;\n    }\n    /**\n     * Returns the accessible description of the icon.\n     *\n     * @return the accessible description of the icon\n     */\n    public String getAccessibleDescription() {\n        return description;\n    }\n    /**\n     * Returns the accessible role of the icon", "answers": ["        if (description != null) {"], "all_classes": null, "length": 1934}
{"pred": "            all_plugins = self._bot.plugin_manager.getAllPlugins()\n        return '\\n'.join(['%s (%s)' % (plugin.name, plugin.documentation) for plugin in all_plugins])\n    @botcmd(admin_only=True)\n    def plugins(self, _, args):\n        \"\"\" list the current active plugin repositories\n       ", "answers": ["            all_plugins = self._bot.plugin_manager.get_all_plugin_names()"], "all_classes": null, "length": 833}
{"pred": "                \"vdom\": {\"required\": False, \"type\": \"str\"}\n            }\n        }\n    }\n    module = AnsibleModule(argument_spec=fields)\n    warnings = []\n    check_supported_fortios_version(module, warnings)\n    connection = Connection(module._socket_path, module)\n    if not connection:\n", "answers": ["                \"vdom\": {\"required\": False, \"type\": \"str\"}"], "all_classes": null, "length": 1164}
{"pred": "            throw new IOException();\n        }\n        fileDecoder = savedDecoder;\n    }\n    private native int readByte(Object fileDecoder);\n    private native int bytesRemain(Object fileDecoder);\n    private native int readBytes(Object fileDecoder, byte b[], int off, int len);\n    private native Object clone(Object fileDecoder", "answers": ["            throw new IOException();"], "all_classes": null, "length": 880}
{"pred": "\t\t\t\treturn originalObject!= null;\n\t\t\tcase ActivitydiagramPackage.TRACED_ACTIVITY__TRACE_SEQUENCE:\n\t\t\t\treturn traceSequence!= null &&!traceSequence.isEmpty();\n\t\t}\n\t\treturn super.eIsSet(featureID);\n\t}\n} \nPlease complete the code given above. \n\n```java\n/**\n */\npackage activity", "answers": ["\t\t\t\treturn originalObject != null;"], "all_classes": null, "length": 533}
{"pred": "\t\t// TODO: implement this method\n\t\treturn Collections.emptyList();\n\t}\n} \npackage org.opennms.netmgt.importer.operations;\n\nimport java.util.List;\n\nimport org.opennms.netmgt.model.OnmsNode;\nimport org.opennms.netmgt.model.OnmsNodeDao;\nimport org", "answers": ["\t\tList<Event> events = new LinkedList<Event>();"], "all_classes": null, "length": 888}
{"pred": "    if module.check_mode:\n        module.exit_json(changed=changed, queries=publication.executed_queries)\n    # If publication exists and we need to drop it:\n    if state == 'absent' and publication.exists:\n        changed = publication.drop(cascade=cascade)\n    # If publication exists and we need", "answers": ["    if state == 'present':"], "all_classes": null, "length": 2176}
{"pred": "\t\t\tint version = reader.ReadInt();\n\t\t\tif ( version == 0 )\n\t\t\t{\n\t\t\t\t// Add code here to handle version 0\n\t\t\t}\n\t\t}\n\t}\n}\n} \n/////////////////////////////////////////////////////\n//\n//Created by:  Morrigan and Ashlar, together forever.\n//\n/////////////////////////////////////////////////////\n```\nThe", "answers": ["\t\t\tint version = reader.ReadInt();"], "all_classes": null, "length": 737}
{"pred": "        return T.mean(T.sum(pre_sigmoid_nv * T.log(pre_sigmoid_nv) +\n                            (1 - pre_sigmoid_nv) * T.log(1. - pre_sigmoid_nv), axis=1))\n        # end-snippet-5\n    def train_RBM(self, train_set_x, learning", "answers": ["        of log(sigmoid(..)) and will not apply the wanted"], "all_classes": null, "length": 1545}
{"pred": "            return new TripChain(Person);\n        }\n        #endregion ITripChain Members\n    }\n}\n```\nThe final answer is: \n```csharp\npublic ITripChain Clone()\n{\n    return new TripChain(Person);\n}\n``` \nThis is the correct implementation of the Clone method in the TripChain class.", "answers": ["            ITripChain chain = (ITripChain)MemberwiseClone();"], "all_classes": null, "length": 798}
{"pred": "        super(edge);\n        role = new FigRole();\n        addPathItem(role, new PathItemPlacement(edge, role, 0, 5, -135, 5));\n        ordering = new FigOrdering();\n        addPathItem(ordering, new PathItemPlacement(edge, ordering, 0, ", "answers": ["        role = new FigRole();"], "all_classes": null, "length": 2539}
{"pred": "                    throw ex;\n                }\n            }\n        }\n    }\n}\n#endif\n```\nThe code is almost complete, but there are a few issues that need to be addressed. The code is missing the implementation of the `Dispose` method, which is required for the `IDisposable` interface. Additionally, the `Initialize", "answers": ["                    if (LogManager.ThrowExceptions) throw ex;"], "all_classes": null, "length": 849}
{"pred": "            name,checksum = checksums.get(block=False)\n            assert os.path.isfile( pjoin( cfg.webdav_backend_directory, name) )\n            with open(pjoin( cfg.webdav_backend_directory, name), \"rb\") as f:\n                m = hashlib.md5()\n                m.update( f.read", "answers": ["            name, checksum = checksums.get(block=False)"], "all_classes": null, "length": 599}
{"pred": "        stac = self.labels.setdefault(args[0], stac)\n        self.stack_count = stac\n        jump_size = self.jump_count\n        label_size = self.labels.get(args[0], 0)\n        if label_size!= jump_size:\n            raise StackMismatch(args[0], label_size, jump", "answers": ["        dest = args[0]"], "all_classes": null, "length": 655}
{"pred": "\t\t\t\tresult.append((ofs, \"\\x00\" * mem_len))\n\t\t\t\tlen -= mem_len\n\t\t\t\tofs += mem_len\n\t\t\t\tcontinue\n\t\t\tresult.append((ofs, self.data.read(cur.offset + prog_ofs, file_len)))\n\t\t\tlen -= file_len\n\t\t\tofs += file_len\n\t\treturn", "answers": ["\t\t\t\tresult += [DATA_ORIGINAL] * mem_len"], "all_classes": null, "length": 1032}
{"pred": "\t\t\tint endIndex = value.indexOf(\"}\", startIndex);\n\t\t\tif (endIndex == -1) {\n\t\t\t\tthrow new IllegalArgumentException(\"Macro not closed!\");\n\t\t\t}\n\t\t\tString macroName = value.substring(startIndex + 2, endIndex);\n\t\t\tString macroValue = macroHandler.getMacroValue(macroName);\n\t\t\tif (", "answers": ["\t\t\tStringBuffer result = new StringBuffer();"], "all_classes": null, "length": 3860}
{"pred": "      elements.add(ASN1Boolean.encodeAsBoolean(false));\n    }\n    if (! includeAuthZEntry)\n    {\n      elements.add(ASN1Boolean.encodeAsBoolean(false));\n    }\n    if (attributes!= null)\n    {\n      final ArrayList<ASN1Element> attributeElements = new ArrayList<>(attributes.size());\n", "answers": ["      elements.add(new ASN1Boolean(TYPE_INCLUDE_AUTHN_ENTRY, false));"], "all_classes": null, "length": 1468}
{"pred": "\t\tfor(int x = 0; x < beans.length; x++)\n\t\t{\n\t\t\tcoll.add(beans[x].buildVo());\n\t\t}\n\t\treturn coll;\n\t}\n} \n//#############################################################################\n//#                                                                           #\n//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #\n", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 773}
{"pred": "\t\t\treturn new EmptyIterator<String>();\n\t\t}\n\t}\n}\npackage com.idevicesinc.sweetblue;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.Map;\nimport android.content.Context;\nimport com.idevicesinc.sweetblue.utils.EmptyIterator;\nimport com.idevicesinc.sweet", "answers": ["\t\t\treturn new EmptyIterator<String>();"], "all_classes": null, "length": 526}
{"pred": "            var serializer = GetResponseSerializer(contentType);\n            if (serializer == null)\n                throw new NotSupportedException(\"ContentType not supported: \" + contentType);\n            var httpRes = new HttpResponseStreamWrapper(httpResponse.OutputStream);\n            serializer(requestContext, response, httpRes);\n        }\n        public void DeserializeFromStream(IRequestContext", "answers": ["            var serializer = GetResponseSerializer(contentType);"], "all_classes": null, "length": 488}
{"pred": "        }\n    }\n    public void ShowPhoneCallRecord(string CallNumber)\n    {\n        if (serviceProxy == null)\n            throw new ApplicationException(LocalizedResourceManager.GetString(\"DotNetScript\", \"DynamicsSession.Error.NotLoggedIn\"));\n        Guid CallNumberGuid = Guid.Parse(CallNumber);\n        ShowPhoneCallRecord(CallNumber", "answers": ["            string CallNumberGuid = CallNumber.ToString();"], "all_classes": null, "length": 648}
{"pred": "        }\n    }\n} \npackage org.intermine.sql.query;\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\n/**\n * Subclass of ExplainResult specific to PostgreSQL.\n *\n * @author Matthew Wakeling\n * @author Andrew Varley\n", "answers": ["        text = text.substring(nextToken + 7);"], "all_classes": null, "length": 772}
{"pred": "        n = m + i16 - 2;\n        i27 = i26 + i16 - 1;\n        i29 = i28 + i16 - 1;\n        i25 = 1;\n        if ((paramInt1!= 0? 0 : 1)!= 0)\n", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "                if (constraintEntry.startsWith(\"keyUsage\")) {\n                    // keyUsage is not a constraint, it is a certificate extension\n                    // and is not handled by this class.\n                    continue;\n                }\n                Matcher keySizeMatcher = keySizePattern.matcher(constraintEntry);\n                Matcher denyAfterMatcher = denyAfterPattern", "answers": ["                if (debug != null) {"], "all_classes": null, "length": 983}
{"pred": "      ProxyInfo proxy_info = (ProxyInfo) proxyCell.getUserObject();\n      ConfigElement proxyElt = proxy_info.getProxyElement();\n      ConfigElement devElt = proxy_info.getDeviceElement();\n      int unit_number = proxy_info.getUnitNumber();\n      DefaultPort proxy_port = proxyCell.getPort();\n      Default", "answers": ["      ProxyInfo proxy_info = (ProxyInfo) proxyCell.getUserObject();"], "all_classes": null, "length": 2936}
{"pred": "                object obj = this.ViewState[\"SubmitText\"];\n                return (obj == null)? true : (bool)obj;\n            }\n            set\n            {\n                this.ViewState[\"SubmitText\"] = value;\n            }\n        }\n        /// <summary>\n        /// True to submit value of selected items\n        ///", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "```python\ndef create_new_filesystem(self, new_path):\n    \"\"\"Creates a collection starting from a root directory.\n    Args:\n        new_path: The path to recursively search for the collection within.\n    Returns:\n        None\n    \"\"\"\n    os.mkdir(new_path)\n    for artist in self.collection:\n        artist", "answers": ["                for song in self.collection[artist][album]:"], "all_classes": null, "length": 826}
{"pred": "        SecurityManager sm = System.getSecurityManager();\n        if (sm!= null)\n            sm.checkPermission(SecurityConstants.GET_CLASSLOADER_PERMISSION);\n    }\n    private static void checkForDuplicatePkgs(Configuration cf,\n                                              Function<String, ClassLoader> clf)\n    {\n        Map<String, ClassLoader> map =", "answers": ["        SecurityManager sm = System.getSecurityManager();"], "all_classes": null, "length": 3987}
{"pred": "\t\t\t\t//add a note\n\t\t\t\torder.OrderNotes.Add(new OrderNote()\n\t\t\t\t{\n\t\t\t\t\tNote = TNote(\"OrderCompleted\"),\n\t\t\t\t\tDisplayToCustomer = false,\n\t\t\t\t\tCreatedOnUtc = DateTime.UtcNow\n\t\t\t\t});\n\t\t\t\t_orderService.UpdateOrder(order);\n\t\t\t\t//check order status\n\t\t\t", "answers": ["\t\t\t\torder.ShippingStatusId = (int)ShippingStatus.Delivered;"], "all_classes": null, "length": 5265}
{"pred": "    }\n} \n```\nThe code is a part of a larger project and is used to create various objects in the database. The code is written in Java and uses Hibernate for database operations. The code is well-structured and follows good coding practices. However, there are some areas that can be improved for better maintain", "answers": ["        AutoNumberingScheme ans = new AutoNumberingScheme();"], "all_classes": null, "length": 5629}
{"pred": "\t\t\tAssert.That (Read<int> ().SingleOrDefault (), Is.EqualTo (0));\n\t\t}\n\t\t[Test]\n\t\tpublic void SingleOrDefault_SourceWithOneElement_ReturnsSingleElement ()\n\t\t{\n\t\t\tvar source = Read (1);\n\t\t\tAssert.That (source.SingleOrDefault (), Is.EqualTo (1));\n\t\t}\n\t\t", "answers": ["\t\t\tvar source = Read<int> ();"], "all_classes": null, "length": 5586}
{"pred": "\t\t\t\t\tArrayList<String> valuesList = new ArrayList<String>();\n\t\t\t\t\tArrayList<String> domainsList = new ArrayList<String>();\n\t\t\t\t\tfor (int i = 0; i < tempValues.length; i++) {\n\t\t\t\t\t\tString v = tempValues[i];\n\t\t\t\t\t\tString d = tempDomains[i];\n\t\t\t\t\t\t// check if invalid value\n", "answers": ["\t\t\t\t\tArrayList<String> valuesList = new ArrayList<String>();"], "all_classes": null, "length": 4724}
{"pred": "        return self._conf_helper('sp', options)\n    def _create_devs(self):\n        self.crdg = scpiDevice(getstr='CRDG? 1', str_type=float)\n        self.enabled_list = MemoryDevice(['1', '2'])\n        self.thermocouple = scpi", "answers": ["        if dev_obj == self.fetch:"], "all_classes": null, "length": 4119}
{"pred": "    if (success) {\n      // if successful, then the sketch is now uploaded\n      // and the board is ready to be used\n      // so we can now close the serial port\n      Base.getSerial().close();\n      // and then we can close the build folder\n      cleanup();\n      // and", "answers": ["    return success ? suggestedClassName : null;"], "all_classes": null, "length": 6878}
{"pred": "            Workplane().box(1,1,1).edges(\"+Z\").fillet(0.1)\n        Fillets are one of the cases where you may need to use the add method to select several\n        edges. For example, this example creates a 3-walled corner, by filleting three", "answers": ["            s = Workplane().box(1,1,1).faces(\"+Z\").edges().fillet(0.1)"], "all_classes": null, "length": 4053}
{"pred": "            sleep(0.01)\n        # Reading FIFO count\n        fifoCount = self.getFIFOCount()\n        #print('Current FIFO count = %s' % fifoCount)\n        # Writing final memory update 6/7 (function unknown)\n        j = 0\n        dmpUpdate = []\n", "answers": ["            fifoCount = self.getFIFOCount()"], "all_classes": null, "length": 6204}
{"pred": "def bulk_print_memberships(names):\n\t#... (rest of the code remains the same)\n\t#... (rest of the code remains the same)\n\t#... (rest of the code remains the same)\n\t#... (rest of the code remains the same)\n\t#... (rest of the code remains", "answers": ["\t\tnames = names['names']"], "all_classes": null, "length": 4346}
{"pred": "\t\t\t\twhile (itHistory.hasNext()) {\n\t\t\t\t\tFLRHistory history = (FLRHistory) itHistory.next();\n\t\t\t\t\tdata[i][ProjektReportFac.REPORT_PROJEKT_JOURNAL_OFFENE_PROJEKTCNR] = projekt\n\t\t\t\t\t\t\t.getC_nr();\n\t\t\t\t\tdata[i][ProjektReportFac.RE", "answers": ["\t\t\t\twhile (itHistory.hasNext()) {"], "all_classes": null, "length": 4200}
{"pred": "                list.Add(1072375); // Missing Set Item\n            }\n        }\n        public virtual void GetSetProperties(ObjectPropertyList list)\n        {\n            if (this.m_SetAttributes!= null)\n                this.m_SetAttributes.GetProperties(list);\n            if (this.m_SetSkillBonuses!= null)\n                this", "answers": ["                list.Add(1072378); // <br>Only when full set is present:\t\t\t\t"], "all_classes": null, "length": 6963}
{"pred": "         sb.append((char) ('a' + d - 10));\n      }\n      d = (c >> 6) & 0x3f;\n      if (d < 10) {\n         sb.append((char) ('0' + d));\n      } else {\n         sb.append((char)", "answers": ["         sb.append((char) ('a' + d - 10));"], "all_classes": null, "length": 4005}
{"pred": "\t\t\tif (type == PacketTypes.PlayerInfo)\n\t\t\t{\n\t\t\t\t// This is a player info packet, which is sent when a player joins or leaves the server.\n\t\t\t\t// We can use this to update the player list.\n\t\t\t\tTSPlayer player = Players[e.Player];\n\t\t\t\tif (player!= null", "answers": ["\t\t\tvar player = Players[e.Msg.whoAmI];"], "all_classes": null, "length": 4973}
{"pred": "        // create path and map variables\n        String localVarPath = \"/organizations/{organizationId}/transportStops\".replaceAll(\"\\\\{format\\\\}\",\"json\")\n       .replaceAll(\"\\\\{\" + \"organizationId\" + \"\\\\}\", apiClient.escapeString(organizationId.toString()));\n        List<Pair> localVarQueryParams = new ArrayList", "answers": ["        if (organizationId == null) {"], "all_classes": null, "length": 5074}
{"pred": "            X           -   array[0..N-1] - array of quadrature nodes,\n                            in ascending order.\n            W           -   array[0..N-1] - array of quadrature weights.\n          -- ALGLIB --\n             Copyright 12.05.2009 by Bochkan", "answers": ["            X           -   array[0..N-1] - array of quadrature nodes,"], "all_classes": null, "length": 4527}
{"pred": "        self.assertEqual(updated_block.children[0].version_agnostic(), block.children[0].version_agnostic())\n```\nThe code you provided is a test class `SplitModuleTest` which is a subclass of `unittest.TestCase`. The test class has several methods that test the functionality of the `SplitModule` class,", "answers": ["            'deleting_user', parent.version_agnostic(), category_queue[0]"], "all_classes": null, "length": 4289}
{"pred": "                                    + Long.toString((long) Math.rint(Math.abs(i))));\n                                }\n                                else {    //not \"log10\"-type label\n                                    if (this.expTickLabelsFlag) {\n                                        //if flag then\n                                        tickLabel = \"1e\" + i;  //create \"1e#\"-", "answers": ["                                            + \"10^\" + Math.abs(i));"], "all_classes": null, "length": 4434}
{"pred": "               .map(PushedAsset::getAssetId)\n               .collect(Collectors.toList());\n        assertTrue(newBundlePushedAssets.contains(template.getIdentifier()));\n    }\n    private void assertAll(final PushPublisherConfig config, final Collection<Object> dependencies) {\n        final List<ManifestItem> manifestItems = new ArrayList<>();\n        final", "answers": ["                .map(pushedAsset -> pushedAsset.getEnvironmentId())"], "all_classes": null, "length": 6390}
{"pred": "        String fileName = \"file-\" + RUNID + \".txt\";\n        Document doc = createTextFile(getMyNodeId(), fileName, content);\n        String docId = doc.getId();\n        Map<String, String> body = new HashMap<>();\n        body.put(\"nodeId\", docId);\n        body.put(\"include\",", "answers": ["        String fileName1 = \"fileOne_\" + RUNID + \".txt\";"], "all_classes": null, "length": 4714}
{"pred": "            return obj!= null;\n        } catch (NumberFormatException ex) {\n            return false;\n        }\n    }\n    //-----------------------------------------------------------------------\n    @Test\n    public void testIsNumber() {\n        assertTrue(\"isNumber(String) 1 failed\", NumberUtils.isNumber(\"12345\"));\n        assertTrue(\"isNumber(String) ", "answers": ["            if (obj == null) {"], "all_classes": null, "length": 4128}
{"pred": "                                if (grapple.DockUid!= part.Uid)\n                                {\n                                    Syntax.Warning(part, \"Part not attached or grappled by parent grappling part: \" + grapple);\n                                    Syntax.Warning(grapple, \"Grappling part is parent of other part, but is not grappled to it: \"", "answers": ["                                if (grapple.DockUid != part.Uid)"], "all_classes": null, "length": 4169}
{"pred": "            if not xml_id:\n                return False\n            if not meta:\n                meta = {}\n            if not isobject:\n                self._update_dummy(cr, uid, model, meta.get('module', ''), xml_id)\n            else:\n                self._update_dummy(cr, uid, model, meta.get('module',", "answers": ["            ir_values_obj = pooler.get_pool(cr.dbname).get('ir.values')"], "all_classes": null, "length": 4578}
{"pred": "            return actionTL.getVolatile() == SYNCHRONIZE_CODE;\n        }\n        @Uninterruptible(reason = \"Called from uninterruptible code.\", mayBeInlined = true)\n        public static void setSynchronizeCode() {\n            actionTL.setVolatile(SYNCHRONIZE_CODE);\n        }\n", "answers": ["            return actionTL.getVolatile() == SYNCHRONIZE_CODE;"], "all_classes": null, "length": 4390}
{"pred": "\t\t\tlong size = lgetxattr (path, name, value, 0);\n\t\t\tif (size <= 0)\n\t\t\t\treturn size;\n\t\t\tvalue = new byte [size];\n\t\t\treturn lgetxattr (path, name, value, (ulong) size);\n\t\t}\n\t\t// fget", "answers": ["\t\t\tlong size = lgetxattr (path, name, value, 0);"], "all_classes": null, "length": 6868}
{"pred": "\t\t\t\tsuper(id, path, width, height);\n\t\t\t}\n\t\t}\n\t\tprivate Images()\n\t\t{\n\t\t\tCore = new CoreImages();\n\t\t}\n\t\tpublic final class CoreImages implements java.io.Serializable\n\t\t{\n\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\tprivate CoreImages()\n", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "        return encodeBytesToBytes( source, off, len, options, MAX_LINE_LENGTH );\n    }   // end encodeBytesToBytes\n    \n    /**\n     * Similar to {@link #encodeBytes(byte[], int, int, int)} but returns\n     * a byte array instead of instantiating a String. This", "answers": ["        if( source == null ){"], "all_classes": null, "length": 5175}
{"pred": "\t\t\t\tnew ColumnInfo (\"IsCaseSensitive\", typeof(bool)),\n\t\t\t\tnew ColumnInfo (\"IsFixedLength\", typeof(bool)),\n\t\t\t\tnew ColumnInfo (\"IsFixedPrecisionScale\", typeof(bool)),\n\t\t\t\tnew ColumnInfo (\"IsLong\", typeof(bool)),\n\t\t\t\tnew ColumnInfo (\"IsNullable\", typeof(bool)),\n\t\t\t\tnew ColumnInfo (\"", "answers": ["\t\t\t\tnew ColumnInfo (\"IsCaseSensitive\", typeof(bool)),"], "all_classes": null, "length": 4122}
{"pred": "\t\t\t\tBigInteger v2 = u1.OuterProduct(u3, v3);\n\t\t\t\tBigInteger u2 = u1.OuterProduct(v3, q[0]);\n\t\t\t\tu1 = u2;\n\t\t\t\tv1 = v2;\n\t\t\t\tu3 = q[1];\n\t\t\t\tv3 = q[0", "answers": ["\t\t\t\tBigInteger tn = u1.Subtract(v1.Multiply(q[0]));"], "all_classes": null, "length": 5148}
{"pred": "\t\t\t\tif (_abi_info == null)\n\t\t\t\t\t_abi_info = GLib.AbiStruct.GetAbiStruct(typeof(Message));\n\t\t\t\treturn _abi_info;\n\t\t\t}\n\t\t}\n\t}\n#endregion\n}\n#endregion\nPlease complete the code given below. \n\n```csharp\nusing System;\nusing System.Collections;\n", "answers": ["\t\t\t\tif (_abi_info == null)"], "all_classes": null, "length": 4205}
{"pred": "                if (name.endsWith(\".zargo\")) {\n                    Configuration.setString(\n                            PersistenceManager.KEY_PROJECT_NAME_PATH,\n                            PersistenceManager.getInstance().getBaseName(\n                                    theFile.getPath()));\n                }\n            }\n            return theFile;\n        } else {\n            return null;\n        }\n    }\n    /**\n     * @return the", "answers": ["                if (!name.endsWith(\".\" + filter.getExtension())) {"], "all_classes": null, "length": 5940}
{"pred": "                5: SortableHeader('Outline', False, '', 'col-center'),\n                6: SortableHeader('Script', False, '', 'col-center'),\n                7: SortableHeader('Slide', False, '', 'col-center'),\n                8: SortableHeader('Video', False, '',", "answers": ["                5: SortableHeader('Outline', False, '', 'col-center'),"], "all_classes": null, "length": 4072}
{"pred": "            string[][] ss11 = new string[][] { s111, s112 };\n            string[] s121 = new string[] { \"hello\"};\n            string[][] ss12 = new string[][] { s121 };\n            string[][][] sssi1 = new string[][][] { ss11, ss12 };\n            string[]", "answers": ["            string[][] ss11 = new string[][] { s111, s112 };"], "all_classes": null, "length": 4165}
{"pred": "            field = opts.get_field(unique_check[0])\n            return ValidationError(\n                message=field.error_messages['unique'],\n                code='unique',\n                params=params\n            )\n        # A unique together field\n        else:\n            return ValidationError(\n                message=opts.error_messages['unique_together'],\n                code='unique", "answers": ["            field = opts.get_field(unique_check[0])"], "all_classes": null, "length": 4513}
{"pred": "            for key, value in sorted(paramtestdic.iteritems()):\n                paramout.write(\"%-3s \\t %.5f\\n\" % (key,value))\n            paramout.close()\n        print \"PASO %i: %f\"%(cyclemin,totalerror)        \n        \n        if cyclemin >= maxcycleminimization", "answers": ["            for key, value in sorted(paramtestdic.iteritems()):"], "all_classes": null, "length": 4363}
{"pred": "    for i in range(0, len(h), 20):\n        heads.append(h[i:i+20])\n    return heads\n```python\ndef handlecheckheads(op, inpart):\n    \"\"\"check that head of the repo did not change\n    This is used to detect a push race when using unbundle", "answers": ["    while len(h) == 20:"], "all_classes": null, "length": 4561}
{"pred": "        if(contentPaneStyle.getBorder()!= null) {\n            prefWidth = Math.max(contentPaneStyle.getBorder().getMinimumWidth(), prefWidth);\n            prefHeight = Math.max(contentPaneStyle.getBorder().getMinimumHeight(), prefHeight);\n        }\n        return new Dimension(prefWidth, prefHeight);\n    }\n", "answers": ["        prefWidth = Math.min(prefWidth, width);"], "all_classes": null, "length": 6347}
{"pred": "        ca = literal_eval(cas_data_str)\n        # Cell attributes\n        cell_attributes = model.code_array.cell_attributes\n        selection = grid.selection\n        (top, left), (bottom, right) = selection.get_grid_bbox(model.shape)\n        table_cell_attributes = cell_attributes.for_table(table)\n        for __", "answers": ["        cas = literal_eval(cas_data_str)"], "all_classes": null, "length": 5088}
{"pred": "\t\t\t\t\tpixel = cursor_bitmap.GetPixel(x, y);\n\t\t\t\t\tif (pixel == cursor_pixel) {\n\t\t\t\t\t\tcursor_bits[(y * (width / 8)) + (x / 8)] |= (byte)(1 << (7 - (x % 8)));\n\t\t\t\t\t}\n\t\t\t\t\tpixel = cursor_mask", "answers": ["\t\t\t\t\tpixel = cursor_bitmap.GetPixel(x, y);"], "all_classes": null, "length": 6831}
{"pred": "\t\t\tInterval interval=new Interval(apptLengthMins);\n\t\t\t//Loop through all the operatories that are flagged for Web Sched.\n\t\t\tfor(int i=0;i<listWebSchedOpNums.Count;i++) {\n\t\t\t\tOperatory op=Operatories.GetOp(listWebSchedOpNum", "answers": ["\t\t\tList<DateTime> listUniqueDays=new List<DateTime>();"], "all_classes": null, "length": 4064}
{"pred": "                      pMem1.enc == SQLITE_UTF16LE ||\n                      pMem1.enc == SQLITE_UTF16BE );\n        rc = sqlite3StrICmp( pMem1.z, pMem2.z, pMem1.n, pMem2.n, pColl );\n        if ( rc!= 0 )\n        {\n", "answers": ["        pMem1.enc == SQLITE_UTF16LE || pMem1.enc == SQLITE_UTF16BE );"], "all_classes": null, "length": 5688}
{"pred": "                    data.MaxPower[i] = packet.ReadInt32(\"MaxPower\", indexes, i);\n                    }\n                }\n            }\n            if (changesMask[124])\n            {\n                for (var i = 0; i < 6; ++i)\n                {\n                    if (changesMask[125 + i])\n                   ", "answers": ["                        data.MaxPower[i] = packet.ReadInt32(\"MaxPower\", indexes, i);"], "all_classes": null, "length": 4140}
{"pred": "        # enter each SNP \n        for snp in self.locsnps[:, 1]:\n            # in case multiple consens were merged in step 6 of this sample\n            for tup in tups:\n                cidx, coffset = tup\n                pos = snp + (self.gtrim - coff", "answers": ["        seq = self.seqs[nidx]"], "all_classes": null, "length": 7755}
{"pred": "            Index ix = indexByTagAndClass[tag];\n            if (ix == null) {\n                ix = new Index(tagName(tag)+\":\"+classRef.stringValue(), new Entry[0]);\n                indexByTagAndClass[tag] = ix;\n            }\n            // Find all entries of the given tag and class.\n           ", "answers": ["            Index[] perClassIndexes = indexByTagAndClass[tag];"], "all_classes": null, "length": 5112}
{"pred": "            this.quoteLabel.Size = new System.Drawing.Size(0, 0);\n            this.quoteLabel.TabIndex = 0;\n            this.quoteLabel.Text = \"quoteLabel\";\n            this.quoteLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;\n            this.quoteLabel.Visible = false;\n            // \n            // processor\n            // \n", "answers": ["            this.quoteLabel.Size = new System.Drawing.Size(46, 16);"], "all_classes": null, "length": 4569}
{"pred": "            data['rrule_type'] = rrule_type[rule._freq]\n        if rule._byweekday:\n            for day in day_list:\n                data[day] = rule._byweekday[day_list.index(day)]\n        if rule._bymonthday:\n            data['day'] = rule._b", "answers": ["            data['rrule_type'] = rrule_type[rule._freq]"], "all_classes": null, "length": 4433}
{"pred": "                // Copy the decoded row to the output stream\n                fout.Write(curr, 0, bytesPerRow);\n                // Copy the decoded row to the prior row\n                System.Array.Copy(curr, 0, prior, 0, bytesPerRow);\n                // Read the next row of data\n                tot =", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "      get { return DefaultInstance; }\n    }\n    \n    protected override ReportRefundRequest ThisMessage {\n      get { return this; }\n    }\n    \n    public static pbd::MessageDescriptor Descriptor {\n      get { return global::bnet.protocol.exchange_object_provider.ExchangeObjectProviderTypes.internal__static_bnet_protocol_exchange", "answers": ["      get { return DefaultInstance; }"], "all_classes": null, "length": 5791}
{"pred": "                        AApDocumentDetailRow DetailRow = (AApDocumentDetailRow)rv.Row;\n                        MainDs.AApAnalAttrib.DefaultView.RowFilter = String.Format(\"{0}={1} AND {2}={3}\",\n                            AApAnalAttribTable.GetDetailNumberDBName(), DetailRow.DetailNumber,\n                           ", "answers": ["                        AApDocumentDetailRow DetailRow = (AApDocumentDetailRow)rv.Row;"], "all_classes": null, "length": 5677}
{"pred": "\t\t\t\tOwner.SendMessage(\"Reward for quest '{0}' has been automatically awarded.\", Name);\n\t\t\t\t// award the reward\n\t\t\t\tif (RewardItem!= null &&!m_RewardItem.Deleted)\n\t\t\t\t{\n\t\t\t\t\tOwner.AddToBackpack(RewardItem);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tif (", "answers": ["\t\t\t\tif (RewardItem != null)"], "all_classes": null, "length": 4101}
{"pred": "\t            return items.Length;\n\t        }\n\t    }\n\t    public bool ContainsKey(TKey key)\n\t    {\n\t        return global::System.Collections.Generic.Comparer<TKey>.Default.Compare(key, items[0].Key) <= 0;\n\t    }\n\t    public bool TryGetValue(TKey key, out TValue value)\n\t    {\n\t        int", "answers": ["\t            return lastItemIndex - firstItemIndex + 1;"], "all_classes": null, "length": 5727}
{"pred": "                if (AControlLabel!= null)\n                {\n                    AControlLabel.Name = \"lblArgument_\" + AControl.Name;\n                    AControlLabel.Tag = CommonTagString.ARGUMENTPANELTAG_KEEPBACKCOLOUR;\n                    AControlLabel.Font = new System.Drawing.Font(\"Verdana\", 8.0f", "answers": ["                if (AControlLabel != null)"], "all_classes": null, "length": 7766}
{"pred": "\t\t\treturn Unique(target, null);\n\t\t}\n\t\t/// <summary>\n\t\t/// Returns a new list containing only the unique elements of the target collection, preserving the order.\n\t\t/// The specified <see cref=\"IEqualityComparer{T}\"/> is used to determine uniqueness.\n\t\t/// </summary>\n\t", "answers": ["\t\t\treturn Unique(target, null);"], "all_classes": null, "length": 4367}
{"pred": "```\n#... (rest of the code remains the same)\n```\nThe final answer is: \n```\n#... (rest of the code remains the same)\n``` \nNote: The code provided is a continuation of the previous code snippet, and the final answer is the same as the previous code snippet. The", "answers": ["DT_PPC64_OPD    = (DT_LOPROC + 1)"], "all_classes": null, "length": 6803}
{"pred": "                html.WriteLine(\"      table { width: 100%; }\");\n                html.WriteLine(\"      </style>\");\n                html.WriteLine(\"      <link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"styles.css\\\" />\");\n                html.WriteLine(\"   </head>\");\n                html.WriteLine(\"   <body>\");\n                html.WriteLine", "answers": ["                html.WriteLine(\"      table { width: 100%; }\");"], "all_classes": null, "length": 5413}
{"pred": "\t\t\tbuff[4] = (byte)(address & 0x000000ff);\n\t\t\tWriteReport(buff);\n\t\t\t// wait for the read to finish\n\t\t\tif(!mReadDone.WaitOne(3000, false))\n\t\t\t\tthrow new WiimoteException(\"Timed out waiting for read operation to complete", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "                    sd[node.split_dim] = np.abs(node.split - x[node.split_dim])\n                    min_distance = min_distance - side_distances[node.split_dim] + sd[node.split_dim]\n                else:\n                    sd[node.split_dim] = np.abs(node.split - x[node.split_dim]) ** p\n                    min_distance = min", "answers": ["                    sd[node.split_dim] = np.abs(node.split - x[node.split_dim])"], "all_classes": null, "length": 5233}
{"pred": "\t\tassertEquals(acn, rules.formatGame(game, Locale.ENGLISH));\n\t}\n}\npackage de.schildbach.game.chess;\n\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNull;\nimport static org.junit.Assert.assertTrue;\nimport", "answers": ["\t\tassertEquals(acn, rules.formatGame(game, Locale.ENGLISH));"], "all_classes": null, "length": 4129}
{"pred": "    catch (ReadOnlyException e)\n    {\n      throw new Error(\"internal error - unexpected exception: \" + e);\n    }\n    return null;\n  }\n  /**\n   *  Draw the features of the forward and reverse strands into a Graphics\n   *  object.\n   *  @param g The object to", "answers": ["    catch (InvalidRelationException e){}"], "all_classes": null, "length": 7770}
{"pred": "\t\t\t\t\tstring str = reader.ReadString();\n\t\t\t\t\tType type = Type.GetType(str);\n\t\t\t\t\tif (type!= null)\n\t\t\t\t\t{\n\t\t\t\t\t\tm_arSpellDefense.Add(type);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (version >= 2)\n\t\t\t{\n\t\t\t\tm_FightMode = (FightMode)reader.ReadInt", "answers": ["\t\t\t\t\tstring str = reader.ReadString();"], "all_classes": null, "length": 5717}
{"pred": "\t\t\t\t\t\t\t\tif(newsector!= null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t// Update the sidedefs\n\t\t\t\t\t\t\t\t\tforeach(LinedefSide ls in sectorlines)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif(ls.Front)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tls.Line.Front.SetSector(newsector);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\t\t\t\t\t\tif(newsector == null) return false;"], "all_classes": null, "length": 5677}
{"pred": "        doc = Document.objects.get(locale=document_locale,\n                                   slug=document_slug)\n    except Document.DoesNotExist:\n        doc = None\n    if request.method == 'GET':\n        if not doc:\n            # You can't do anything on this page, so get lost.\n            raise PermissionDenied\n        if not parent_doc.all", "answers": ["        doc = parent_doc.translations.get(locale=document_locale)"], "all_classes": null, "length": 4854}
{"pred": "                lDummyHeights[i] = lNewMaxRows;\n            }\n            \n            // now we'll create new rows and columns\n            if (isTable) {\n                newRows = new ArrayList();\n                for (i=0; i < lTotalRows; i++) {\n                    newRows.Add(new Row(l", "answers": ["                lDummyHeights [i] = lNewMaxRows;"], "all_classes": null, "length": 5053}
{"pred": "\t\t\t\t\t\treferenceNode.AddLinkTo( GetReferenceNode( script ) );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn referenceNode;\n\t\t}\n\t\tprivate ReferenceNode SearchAnimatorStateTransition( Object unityObject )\n\t\t{\n\t\t\tAnimatorStateTransition animatorStateTransition = (AnimatorStateTransition) unityObject;\n\t\t\t", "answers": ["\t\t\t\t\t\treferenceNode.AddLinkTo( GetReferenceNode( script ) );"], "all_classes": null, "length": 4267}
{"pred": "\t\t\t\t\t\tif (trait!= null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tnode.Value.Nodes.Add(new MiniYamlNode(\"-InvulnerabilityMultiplier@EXPERIENCE\", emptyYaml));\n\t\t\t\t\t\t\tnode.Value.Nodes.Remove(trait);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Replace InvulnerabilityUpgrade\n\t\t\t\t\t\ttrait = node.Value.Nodes.FirstOrDefault(n =>", "answers": ["\t\t\t\t\t\tif (trait != null)"], "all_classes": null, "length": 5181}
{"pred": "        return self.__class__(values, key=self._key)\n    __radd__ = __add__\n    def __iadd__(self, other):\n        \"\"\"Update sorted-key list with values from `other`.\n        ``skl.__iadd__(other)`` <==> ``skl += other``\n       ", "answers": ["        return self.__class__(values, key=self._key)"], "all_classes": null, "length": 7674}
{"pred": "        self._flushing = True\n        self._autoflush()\n        self._flushing = False\n    def _is_clean(self):\n        return not self._new and not self._deleted\n    def _is_modified(self, state):\n        return state.is_modified()\n    def _is_modified_for_flush", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "                    else if (this.RequiredRace == Race.Gargoyle)\n                        from.SendLocalizedMessage(1111707); // Only gargoyles can wear this.\n                    else\n                        from.SendMessage(\"Only {0} may use this.\", this.RequiredRace.PluralName);\n                    return false;\n                }\n                else if (!this", "answers": ["                    else if (this.RequiredRace == Race.Gargoyle)"], "all_classes": null, "length": 4125}
{"pred": "new syspalvalue { @class = \"ITTY\", value = 220, name = \"FULLTEXT_THESAURUS_PHRASE_TABLE\" },\n\t\t\t\tnew syspalvalue { @class = \"ITTY\", value = 221, name = \"FULLTEXT_THESAURUS_PHRASE_TABLE\"", "answers": ["\t\t\t\tnew syspalvalue { @class = \"LEOP\", value = 0, name = \"TABLE\" },"], "all_classes": null, "length": 7135}
{"pred": "        if (emails == null) {\n            return;\n        }\n        for (int i = 0; i < emails.length(); i++) {\n            JSONObject email = emails.getJSONObject(i);\n            JSONArray emailTypes = email.optJSONArray(\"type\");\n            ContentValues contentValues;\n            if (emailTypes!= null && emailTypes.length", "answers": ["        if (emails == null) {"], "all_classes": null, "length": 4282}
{"pred": "            if (Diff.Count > 0)\n            {\n                result[\"diff\"] = Diff;\n            }\n            if (CheckMode)\n                result[\"skipped\"] = true;\n            if (DebugMode)\n                result[\"debug\"] = true;\n            if (Verbosity > 0)\n                result[\"msg\"]", "answers": ["            if (Diff.Count > 0 && DiffMode)"], "all_classes": null, "length": 4201}
{"pred": "\t\t\tblock = new byte[allowableBlockSize + 2];\n\t\t}\n\t}\n} \n```\nThe code is a BZip2 compression stream implementation in C#. The code is quite complex and has many methods and variables. The code is also quite long and has many comments. The code is a good example", "answers": ["\t\t\tint n = BZip2Constants.baseBlockSize * blockSize100k;"], "all_classes": null, "length": 5391}
{"pred": "                        int x = args[1] + (Camera.CurrentPosition.X & 7);\n                        int y = args[2] + ScreenTop;\n                        for (int i = _blastObjectQueuePos - 1; i >= 0; i--)\n                        {\n                            var eo = _blastObjectQueue[i];\n", "answers": ["                        var a = Actors[args[1]];"], "all_classes": null, "length": 4518}
{"pred": "                    if (iFile!= null)\n                        iFile.close();\n                }\n            }\n            catch (final ObjectStoreException ex)\n            {\n                ex.printStackTrace();\n                throw ex;\n            }\n            catch (final Exception ex)\n            {\n                ex.printStackTrace();\n                throw new ObjectStoreException(ex.toString(), ex);\n            }\n", "answers": ["                    if (iFile != null)"], "all_classes": null, "length": 4288}
{"pred": "\t\t\ttrackError = Math.max( trackError, trackSegmentError ) ;\n\t\t}\n\t\n\t\treturn trackError ;\n\t}\n\t/**\n\t * Calculates the distance between two points.\n\t *\n\t * @param first \t1st point.\n\t * @param second \t2nd point.\n\t *\n", "answers": ["\t\t\tif (trackSegmentError > trackError)"], "all_classes": null, "length": 5623}
{"pred": "\t\t\t\t\"    {0}\" +\n\t\t\t\t\"    Function Something(<A(), B()> ByVal value As Object, <C(A1:=false, A2:=true), D()> ByRef __exception As Integer) As Integer{0}\" +\n\t\t\t\t\"End Interface{0}\", NewLine), code);\n", "answers": ["\t\t\t\t\"    {0}\" +"], "all_classes": null, "length": 5620}
{"pred": "                    CollisionObjects = new[] { CollisionObjectTypes.Champions, CollisionObjectTypes.YasuoWall },\n                });\n            #endregion Jhin\n            #region Jinx\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Jinx\",\n                    SpellName = \"JinxQ\",\n                   ", "answers": ["                    ExtraMissileNames = new[] { \"JhinRShotMis4\" },"], "all_classes": null, "length": 4463}
{"pred": "                            m_House.Delete();\n                            newHouse.MoveToWorld(m_House.Location, m_House.Map);\n                            m_From.SendGump(new HousePlacementListGump(new HousePlacementTool(), m_From, m_Entries));\n                        }\n                    }\n                }\n            }\n        }\n    }\n    public class PreviewHouse : Base", "answers": ["                            if (m_House.MovingCrate != null)"], "all_classes": null, "length": 5532}
{"pred": "\t\tplot = new Plot();\n\t\tplot.setFrameSize(400, 300);\n\t\tplot.setLimits(0, 10, 0, 10);\n\t\tplot.addText(\"Plot\", 10, 10);\n\t\tplot.add(Plot.LINE);\n\t\tplot.show();\n\t", "answers": ["\t\tString title = getFirstString();"], "all_classes": null, "length": 5653}
{"pred": "                    widgetName = xbmc.getInfoLabel( widgetName )\n                if widgetName == \"\":\n                    widgetName = LANGUAGE(32053)\n                if self.currentWindow.getProperty( \"useWidgetNameAsLabel\" ) == \"true\" and widgetID == \"\":\n                    self._set_label( listitem, widgetName )\n                    self", "answers": ["                        widgetTempName = xbmc.getInfoLabel(widgetName)"], "all_classes": null, "length": 6955}
{"pred": "        return encodeBytesToBytes( source, 0, source.length, NO_OPTIONS );\n    }   // end encodeBytesToBytes\n    \n    /**\n     * Similar to {@link #encodeBytes(byte[], int, int)} but returns\n     * a byte array instead of instantiating a String. This is more efficient", "answers": ["        byte[] encoded = null;"], "all_classes": null, "length": 5023}
{"pred": "            mnem[ishr] = \"ishr\";\n            mnem[lshr] = \"lshr\";\n            mnem[iushr] = \"iushr\";\n            mnem[lushr] = \"lushr\";\n            mnem[iand] = \"iand\";\n            mnem[land", "answers": ["            mnem[ishr] = \"ishr\";"], "all_classes": null, "length": 6113}
{"pred": "def _get_selinux_context(self, path, context=None):\n    if not HAVE_SELINUX or not self.selinux_enabled():\n        return context\n    try:\n        ret = selinux.matchpathcon(self._to_filesystem_str(path), 0)\n    except OSError:\n        return context\n    if ret[", "answers": ["            umask = os.umask(0)"], "all_classes": null, "length": 7132}
{"pred": "\t\t\t\t\tdo {\n\t\t\t\t\t\tMenus [selected].Current = (Menus [selected].Current+1) % Menus [selected].Children.Length;\n\t\t\t\t\t} while (Menus [selected].Children [Menus [selected].Current] == null);\n\t\t\t\t\tif (Menus [selected].Children [Menus [selected].Current].", "answers": ["\t\t\t\t\tforeach (var mi in Menus [selected].Children){"], "all_classes": null, "length": 7643}
{"pred": "        if (lastScanOffset + pixelStride > data.length)\n        {\n            throw new RasterFormatException(\"Data buffer has not enough capacity\");\n        }\n    }\n    /**\n     * Returns the number of bands in the Raster.\n     */\n    public int getNumBands() {\n        return sampleModel.getNumB", "answers": ["        int lastPixelOffset = (width - 1) * pixelStride;"], "all_classes": null, "length": 4323}
{"pred": "```\ndef get_shared_meminfo(self):\n```\nShould be:\n```\ndef get_shared_meminfo(self, connect_uri=None):\n```\nExplanation:\nThe function `get_shared_meminfo` is a method of the class `VM` and it is used to get the shared memory information of the VM. The function", "answers": ["        shm = int(open(filename).read().split()[2])"], "all_classes": null, "length": 7764}
{"pred": "g.parser.add_argument('exclude_metadata', type=strict_bool, location='args', default=True)\n```\nThe final answer is: \n```\ng.parser.add_argument('exclude_metadata', type=strict_bool, location='args', default=True)\n``` \nThis line of code is already present in the given code snippet", "answers": ["    exclude_types = args.get('exclude_types')"], "all_classes": null, "length": 4956}
{"pred": "class CourseEnrollmentAudit(models.Model):\n    \"\"\"\n    This model is used to track the history of enrollments for a user in a course.\n    \"\"\"\n    #... (rest of the code remains the same)\n```\nThe final answer is: \n```\nclass CourseEnrollmentAudit(models.Model):\n    \"\"\"\n   ", "answers": ["    objects = CourseEnrollmentManager()"], "all_classes": null, "length": 4276}
{"pred": "        system_id = self.get_system_id(system)\n        if not system_id:\n            continue\n        self.client.system.removeCustomValues(self.session,\n                                              system_id,\n                                              keys)\n####################\ndef help_system_listcustominfo(self):\n    print('system_listcustominfo: List the custom info for a system')\n    print", "answers": ["        system_id = self.get_system_id(system)"], "all_classes": null, "length": 5050}
{"pred": "        'types': ('general-music','sequential-music',),\n    },\n    'xNotesOn': {\n        'name': 'SequentialMusic',\n        'type': 'ly:prob?',\n        'types': ('general-music','sequential-music',),\n    },\n    'xNotesUp':", "answers": ["        'types': ('general-music', 'sequential-music',),"], "all_classes": null, "length": 4888}
{"pred": "\t\t\t\t.Append (base.ToString ())\n\t\t\t\t.ToString ();\n\t\t}\n\t\t\n#endregion\n\t}\n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n} \n}", "answers": ["\t\t\t\t.Append (base.ToString ()).ToString ();"], "all_classes": null, "length": 5367}
{"pred": "                chr.IsColliding = false;\n            }\n            foreach (OdePrim prim in _prims)\n            {\n                // Reset the collision values to false\n                // since we don't know if we're colliding yet\n                prim.IsColliding = false;\n            }\n            // We need to lock the", "answers": ["                if (chr.Shell == IntPtr.Zero || chr.Body == IntPtr.Zero)"], "all_classes": null, "length": 6278}
{"pred": "        for t in ts:\n            t.start()\n    else:\n        ts = [RetrievalWorker(recs_queue, insert_queue, correct_queue, finished_queue, failed_ids, task_stats, suspend_wait_queue, suspend_resume_queue, main_syn_queue, number_threads, force_reupload = force_reupload)]\n       ", "answers": ["        update_t = StatusUpdater(total_recs, finished_queue)"], "all_classes": null, "length": 6540}
{"pred": "        digits=dp.get_precision('Product Price'), default=_default_price_unit)\n    quantity = fields.Float(string='Quantity', digits=dp.get_precision('Product Unit of Measure'),\n        required=True, default=1.0)\n    discount = fields.Float(string='Discount (%)', digits=dp.get_precision('Discount'),\n", "answers": ["        digits= dp.get_precision('Product Price'),"], "all_classes": null, "length": 4978}
{"pred": "def _get_parameters(self, *parameter_names):\n    \"\"\"Return a ParameterSpace object containing the values of the given\n    parameters for all cells in the population.\"\"\"\n    if isinstance(self.celltype, standardmodels.StandardCellType):\n        if any(name in self.celltype.computed_parameters() for name in parameter_names):\n", "answers": ["        data = self.get_data(variables, gather, clear, annotations)"], "all_classes": null, "length": 5678}
{"pred": "                return -value.doubleValue();\n            }\n        };\n    }\n    /**\n     * Creates a boolean negation expression.\n     *\n     * @param operand\n     */\n    public static UnaryExpression not(Expression operand) {\n        return new UnaryExpression(operand) {\n            @Override\n            public String getOperator() {\n", "answers": ["                Class<? extends Number> type = value.getClass();"], "all_classes": null, "length": 5044}
{"pred": "            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Lucian\",\n                    SpellName = \"LucianR\",\n                    Slot = SpellSlot.R,\n                    Type = SkillShotType.SkillshotMissileLine,\n                    Delay = 500,\n                    Range = 1400,\n                    Radius =", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "                    \"   NEW: \" + nodeUpdate);\n        }\n        return true;\n    }\n    \n    @Override\n    public void deleteNode(Long nodeId)\n    {\n        deleteNode(nodeId, null);\n    }\n    \n    @Override\n    public void deleteNode(Long nodeId, Long txnId)\n    {\n        delete", "answers": ["                    \"   NEW: \" + nodeUpdate);"], "all_classes": null, "length": 6068}
{"pred": "      if (isMainAxisRow) {\n        // If we're laying out the main axis, we need to compute the cross axis\n        // size for each item. We do this by calling the layout algorithm\n        // recursively for each item.\n        float childCrossDim;\n        float childCrossMeasureMode;\n", "answers": ["      for (i = startOfLineIndex; i < endOfLineIndex; ++i) {"], "all_classes": null, "length": 4941}
{"pred": "\t\t\t\tyAxis.DrawGrid( g, this, scaleFactor, shiftPos );\n\t\t\t\tshiftPos += yAxis._tmpSpace;\n\t\t\t}\n\t\t\tshiftPos = 0.0f;\n\t\t\tforeach ( Y2Axis yAxis in _y2AxisList )\n\t\t\t{\n\t\t\t\tyAxis.DrawGrid( g,", "answers": ["\t\t\t\tyAxis.DrawGrid( g, this, scaleFactor, shiftPos );"], "all_classes": null, "length": 4173}
{"pred": "            if (info < 0)\n                throw new ILArgumentException(\"qr: an error occoured during decomposition\"); \n            return ret; \n        }\n        /// <summary>\n        /// QR decomposition, returning Q and R\n        /// </summary>\n        /// <param name=\"A\">general input matrix A of", "answers": ["            if (info < 0)"], "all_classes": null, "length": 4728}
{"pred": "                if (c!= null) {\n                    c.setFont(getFont());\n                    c.setForeground(getForeground());\n                }\n            }\n        }\n    }\n} \n``` \nPlease complete the code given above. \nThe code is a part of the Java Swing library and is related to the JEditorPane class. The code seems to", "answers": ["                if ((c != null)"], "all_classes": null, "length": 9124}
{"pred": "\t\t\t\tif (c == '\\n') {\n\t\t\t\t\tadvance_line ();\n\t\t\t\t\tcomments_seen = false;\n\t\t\t\t\tgoto Next line of code;\n\t\t\t\t}\n\t\t\t\tif (c == '\\r') {\n\t\t\t\t\tif (peek_char () == '\\n') {\n\t\t\t\t\t\tputback_char = -1;\n\t\t\t\t\t}\n\t\t\t\t\t", "answers": ["\t\t\t\tswitch (c) {"], "all_classes": null, "length": 8996}
{"pred": "        for dep in self.__deps:\n            if DEBUG['pkgck']:\n                print(\"Processing dependency: {}\".format(dep.recipe.getName()))\n            # check if dependency is already provided\n            if dep.recipe in self.__provideDeps:\n                if DEBUG['pkgck']:\n                    print(\"Dependency {} is already provided\".format", "answers": ["        depStates = { n : s.copy() for (n,s) in states.items() }"], "all_classes": null, "length": 8648}
{"pred": "            xmlWriter.WriteAttributeString(\"ResizeWidth\", ResizingPanel.GetResizeWidth(pane).ToString());\n            xmlWriter.WriteAttributeString(\"ResizeHeight\", ResizingPanel.GetResizeHeight(pane).ToString());\n            xmlWriter.WriteAttributeString(\"EffectiveSize\", new SizeConverter().ConvertToInvariantString(ResizingPanel", "answers": ["            if (pane.Items.Count > 1)"], "all_classes": null, "length": 8608}
{"pred": "                        &nbsp;(<span class=\"warning\">extra: %(diff)s</span>)<br />\n                        &nbsp;&nbsp;&nbsp;- configuration file \\\"websearch_external_collections_config.py\\\" has %(number_file)s collections\n                        <br /><br /><a href=\"%(site_url)s/admin/websearch/websearch", "answers": ["                        &nbsp;(<span class=\"warning\">extra: %(diff)s</span>)<br />"], "all_classes": null, "length": 11089}
{"pred": "def _extract(node, name, index = 0):\n    \"\"\"Returns the text of the first child of a node with the given name.\n    If the node has no children with the given name, returns None.\n    If the index is specified, returns the text of the child at that index.\n    \"\"\"\n   ", "answers": ["        if type(text) == int:"], "all_classes": null, "length": 9909}
{"pred": "            if (result!= RESULT.OK)\n            {\n                return result;\n            }\n            if (sound == null)\n            {\n                soundnew = new Sound();\n                soundnew.setRaw(soundraw);\n                sound = soundnew;\n            }\n            else\n            {\n                sound.setRaw(soundraw);\n            }\n            return", "answers": ["            if (result != RESULT.OK)"], "all_classes": null, "length": 14097}
{"pred": "                            desc = escape(desc)\n                        output.write(\"      <field name='%s' type='%s' info='%s'/>\\n\" % (field[1], field[0], desc))\n                except:\n                    pass\n                output.write(\"    </struct>\\n\")\n            else:\n                output.write(\"", "answers": ["                            desc = escape(desc)"], "all_classes": null, "length": 8020}
{"pred": "            inputSlice[0], inputSlice[1], masterNum)\n      # Update the permanence values\n      masterValidPermanence += rfPermChanges\n      # Update the connected synapses\n      masterValidConnected = masterValidPermanence.whereGreaterEqual(\n          0, self._coincRF", "answers": ["                    columnNum // self.coincidencesShape[1],"], "all_classes": null, "length": 8992}
{"pred": "        check_nodes = [self.new_node_uuid, self.target_node_uuid]\n      else:\n        raise errors.ProgrammerError(\"Unknown mode '%s'\" % self.mode)\n    if self.disks:\n      self.disks = dict(self.disks)\n    else:\n      self.disks = dict((idx, {}) for", "answers": ["        check_nodes = [self.new_node_uuid, self.other_node_uuid]"], "all_classes": null, "length": 8172}
{"pred": "    complt += '\\t\\t\\t\\t\\t' + optionPrefix + vmap['optName'] +'&& ret=0 \\n'\n    complt += '\\t\\t\\t\\t\\t' + optionPrefix + vmap['optName'] + '=' + vmap['optDefault'] +'&& ret", "answers": ["        complt += '\\t\\t\\t\\t\\t-\"'"], "all_classes": null, "length": 8122}
{"pred": "            }\n        }\n        [CommandProperty(AccessLevel.GameMaster)]\n        public int ControlSlots\n        {\n            get { return m_iControlSlots; }\n            set\n            {\n                m_iControlSlots = value;\n                if (m_ControlMaster!= null)\n                {\n                    m_ControlMaster.Followers +=", "answers": ["                if (m_ControlMaster != null)"], "all_classes": null, "length": 9893}
{"pred": "        if (parent!= null) {\n            contains = parent.visibleBoundsContains(x, y);\n        }\n        return contains;\n    }\n    /**\n     * Returns true if the given absolute coordinate is contained inside the visible bounds\n     * of the component.  This differs from {@link #contains(int, int) }", "answers": ["        if (contains) {"], "all_classes": null, "length": 10298}
{"pred": "                            if (bmp_mono[n1] == 0)\n                                hits1++;\n                        }\n                        if (y + r < image_height)\n                        {\n                            int n2 = ((y + r) * image_width) + x;\n                            if (bmp_mono[n2] == 0)\n                                hits1++;\n                       ", "answers": ["                            side1 += bmp_mono[n1];"], "all_classes": null, "length": 8006}
{"pred": "\t\t\t z = new double[2];\n\t\t\t z[0] = Math.sqrt(3.0) - 2.0;\n\t\t\t z[1] = Math.sqrt(3.0) - 2.0;\n\t\t\t break;\n\t\t default:\n\t\t\t z = new double[1];\n\t\t\t z[0", "answers": ["\t\t\t z = new double[3];"], "all_classes": null, "length": 9193}
{"pred": "\t\t// First, check for reserved SQL in the input row r...\n\t\tdatabaseMeta.quoteReservedWords(fields);\n\t\tString quotedTk = tk!= null? databaseMeta.quoteField(tk) : null;\n\t\t\n\t\t// First, check for reserved SQL in the input row r...\n\t\tdatabaseMeta.quoteReserved", "answers": ["        RowMetaInterface tabFields = getTableFields(tableName);"], "all_classes": null, "length": 9895}
{"pred": "\t\t\tbonusFeats[3] = new String[] {\"TRACK\"};\n\t\t\tspecial.get(4).add(\"Favored Enemy: \" + allFE.get(feIndex) + \" +3\");\n\t\t\tallFE.remove(feIndex); // this way we don't get it again\n\t\t\tbonusFeats[", "answers": ["\t\t\tfeIndex = rand.nextInt(allFE.size());"], "all_classes": null, "length": 8696}
{"pred": "        \"\"\"\n        \n        self.SetToolTipString(\"\")\n        self._tip_item = None\n        self.StopPreviewTimer()\n        self.SetHoverItem(None)\n        self.SetPressedItem(None)\n        self.RefreshOverflowState()\n    def OnSetCursor(self, event):\n        \"\"\"\n        Handles the ``wx.EVT_SET_CURSOR`` event for", "answers": ["        Handles the ``wx.EVT_LEAVE_WINDOW`` event for L{AuiToolBar}."], "all_classes": null, "length": 11431}
{"pred": "            mute = (m!= 0);\n            return result;\n        }\n        public RESULT setUserData        (IntPtr userdata)\n        {\n            return FMOD_EventCategory_SetUserData(eventcategoryraw, userdata);\n        }\n        public RESULT getUserData        (ref IntPtr userdata)\n        {\n            return FMOD_EventCategory_GetUserData", "answers": ["            mute = (m != 0);"], "all_classes": null, "length": 9240}
{"pred": "public class StewartExtLibrarySimonGlenisPtjScript : StewartVarLibraryPtjBaseScript\n{\n\tprotected override bool DoShelving { get { return true; } }\n\tprotected override int QuestId { get { return 519437; } }\n\tprotected override string LQuestDescription { get { return L(\"", "answers": ["\tprotected override int QuestId { get { return 519436; } }"], "all_classes": null, "length": 9147}
{"pred": "            try{ ois.close(); } catch( Exception e ){EncogLogging.log(e);}\n        }   // end finally\n        \n        return obj;\n    }   // end decodeToObject\n    \n    /**\n     * Attempts to decode Base64 data and deserialize a Java\n     * Object within. Returns <tt>null</tt", "answers": ["            try{ ois.close();  } catch( Exception e ){EncogLogging.log(e);}"], "all_classes": null, "length": 8136}
{"pred": "                if e.nodeType == e.ELEMENT_NODE and e.localName == \"layout\":\n                    self.layoutNode = e\n                    break\n            # Check the XLF is valid\n            self.schemaCheck = self.checkSchema()\n            self.mediaCheck = self.checkMedia()\n            self.scheduleCheck = self.checkSchedule()\n           ", "answers": ["                if e.nodeType == e.ELEMENT_NODE and e.localName == \"layout\":"], "all_classes": null, "length": 8661}
{"pred": "            numBits--;\n            uint numBytes = numBits >> 3;\n            if((numBits & 0x7)!= 0)\n                numBytes++;\n            uint[] data = new uint[numBytes];\n            uint[] data2 = new uint[numBytes];\n            uint[] data3 = new uint[num", "answers": ["                numBits = (numBits >> 1) + 1;"], "all_classes": null, "length": 8360}
{"pred": "        if cdata is None:\n            return\n        idx, = cdata\n    elif isinstance(node.op, AdvancedSubtensor1):\n        cdata = node.op.get_constant_idx(node.inputs, allow_partial=True,\n                                         only_process_constants=True)\n        if cdata is None:\n            return\n        idx, =", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": "                   is_const=True)\n    ## attribute.h (module 'core'): bool ns3::AttributeAccessor::Get(ns3::ObjectBase const * object, std::string name, ns3::AttributeValue & attribute) const [member function]\n    cls.add_method('Get', \n                   'bool', \n                   [param", "answers": ["                   is_const=True, is_virtual=True, is_pure_virtual=True)"], "all_classes": null, "length": 10722}
{"pred": "                    Node m = body.getNode(0);\n                    if (m instanceof Node.TemplateText) {\n                        templateTextOptimization = true;\n                    }\n                }\n                if (!templateTextOptimization) {\n                    out.printin(\"String \");\n                    out.print(varName);\n                    out.print(\" = \");\n                    out.print(\"((", "answers": ["                    Node bodyElement = body.getNode(0);"], "all_classes": null, "length": 9144}
{"pred": "\t\t\t\tcase Msg.WM_KEYUP:\n\t\t\t\tcase Msg.WM_SYSKEYUP:\n\t\t\t\t\tPreviewKeyDownEventArgs e = new PreviewKeyDownEventArgs ((Keys)msg.WParam.ToInt32 () | XplatUI.State.ModifierKeys);\n\t\t\t\t\tOnPreviewKeyDown (e);\n\t\t\t\t\treturn PreProcessControlState.MessageNeeded;\n\t\t\t\tcase", "answers": ["\t\t\t\t\tif (PreProcessMessage (ref msg))"], "all_classes": null, "length": 9784}
{"pred": "        if os.path.exists(md_file_path) is False:\n            raise RuntimeError('Pre-processed file {0} does not exist.'.format(md_file_path))\n        # load\n        mantidsimple.LoadMDFile(InputFile=md_file_path,\n                                OutputWorkspace=output_ws_name)\n        return True, None\n   ", "answers": ["        if os.path.exists(md_file_path) is False:"], "all_classes": null, "length": 9108}
{"pred": "            package = None\n    return package\ndef _import_module(name, globals, fromlist, level):\n    \"\"\"Import a module and return it.\n    This function is the core of __import__() and import_module().\n    \"\"\"\n    _sanity_check(name, None, level)\n    if level > 0", "answers": ["            package = package.rpartition('.')[0]"], "all_classes": null, "length": 8094}
{"pred": "                var methodGroup = (BoundMethodGroup)expression;\n                var resolution = this.ResolveMethodGroup(methodGroup, analyzedArguments: null, isMethodGroupConversion: false);\n                if (resolution.HasAnyErrors)\n                {\n                    diagnostics.AddRange(resolution.Diagnostics);\n                }\n                else\n                {\n                    var delegateType =", "answers": ["                var methodGroup = (BoundMethodGroup)expression;"], "all_classes": null, "length": 8696}
{"pred": "            search_reg_str = search_terms.replace(' ', r'\\b\\w*\\b')\n        # Make the regular expression not greedy.\n        search_reg_str = r'%s)*?' % search_reg_str\n        # Make the regular expression not greedy.\n        search_reg_str = r'%s)*?' % search_str", "answers": ["            search_reg_str = '\\\\b%s\\\\b' % search_terms.replace(' ',"], "all_classes": null, "length": 11879}
{"pred": "                FvImageSectionObj.FvName = self.__Token\n            Obj.SectionList.append(FvImageSectionObj)\n            \n        elif SectionName == \"GUID\":\n            GuidSectionObj = GuidSection.GuidSection()\n            if self.__IsKeyword(\"GUID\"):\n                pass\n            if self.__IsToken( \"{", "answers": ["                if not self.__IsKeyword(\"FV\"):"], "all_classes": null, "length": 10845}
{"pred": "      headers_phase = PBXHeadersBuildPhase()\n      self.AppendBuildPhase(headers_phase)\n    return headers_phase\n  def ResourcesPhase(self):\n    resources_phase = self.GetBuildPhaseByType(PBXResourcesBuildPhase)\n    if resources_phase is None:\n      resources_phase = PBXResourcesBuildPhase()\n      self", "answers": ["      headers_phase = PBXHeadersBuildPhase()"], "all_classes": null, "length": 11459}
{"pred": "    post = {'node_ids[{}]'.format(i): tn for i, tn in enumerate(x)}\n    # Fetch\n    resp = remote_instance.fetch(url, post=post)\n    # Format is [[ID, x, y, z],...]\n    df = pd.DataFrame(resp,\n                      columns=['node_id',", "answers": ["    post = {'node_ids[{}]'.format(i): n for i, n in enumerate(x)}"], "all_classes": null, "length": 14106}
{"pred": "                        if (decimalPos >= 0) {\n                            throw new IllegalArgumentException(\"Multiple decimal separators in pattern \\\"\" +\n                                pattern + '\"');\n                        }\n                        decimalPos = digitLeftCount + zeroDigitCount + digitRightCount;\n                        useExponentialNotation = true;\n                        minExponentDigits = zeroDigitCount;\n", "answers": ["                        if (useExponentialNotation) {"], "all_classes": null, "length": 11534}
{"pred": "        BeginBatchUndo(self, String cmdName) -> bool\n        \"\"\"\n        return _richtext.RichTextCtrl_BeginBatchUndo(*args, **kwargs)\n    def EndBatchUndo(*args, **kwargs):\n        \"\"\"\n        EndBatchUndo(self) -> bool\n        \"\"\"\n        return _richtext.Rich", "answers": ["        BeginBatchUndo(self, String cmdName) -> bool"], "all_classes": null, "length": 9452}
{"pred": "  exec /usr/bin/lighttpd -f %(lighttpdConfig)s\n  \"\"\" % {'bashrc': os.path.join( self.instancePath, 'bashrc' ),\n         'lighttpdConfig': os.path.join( self.linkedRootPath, 'Web', 'etc', 'lighttpd", "answers": ["  exec lighttpdSvc.sh < /dev/null"], "all_classes": null, "length": 8611}
{"pred": "    if (tractor.getY() - target.getY() == -2) {\n      my = -1;\n    }\n    if (tractor.getY() - target.getY() == 2) {\n      my = 1;\n    }\n    if (mx == 0 && my == 0) {\n      result = new", "answers": ["    if (tractor.getY() - target.getY() == -2) {"], "all_classes": null, "length": 8405}
{"pred": "            if module.params['ticket']:\n                vm_service = vms_service.vm_service(ret['id'])\n                graphics_consoles_service = vm_service.graphics_consoles_service()\n                graphics_console = graphics_consoles_service.list()[0]\n                console_service = graphics_consoles_service.console_service(graphics_console.id)\n                ticket = console", "answers": ["        elif state == 'suspended':"], "all_classes": null, "length": 8276}
{"pred": "        m = ModeFactory.getMode(\"Channel_queries\", \"filter_child_subscriptions\");\n        DataResult dr = m.execute(params);\n        Iterator i = dr.iterator();\n        while (i.hasNext()) {\n            Map row = (Map) i.next();\n            Long sid = (Long) row.get(\"sid\");\n            Channel", "answers": ["        List<Map> subDr = Collections.EMPTY_LIST;"], "all_classes": null, "length": 10246}
{"pred": "            for (int i = 0; i < libs.size(); i++) {\n                NativeLibrary nl = libs.elementAt(i);\n                if (nl.name.equals(name)) {\n                    nl.loaded = true;\n                    return true;\n                }\n            }\n            NativeLibrary nl = new NativeLibrary(fromClass, name, isB", "answers": ["            int size = libs.size();"], "all_classes": null, "length": 8562}
{"pred": "            state.s1 = s0;\n            state.s2 = s1;\n            state.magicv = hqrndmagic;\n        }\n        /*************************************************************************\n        HQRNDState initialization with seed values\n          -- ALGLIB --\n             Copyright 02.12.2009 by Bochkanov Sergey\n       ", "answers": ["            hqrndseed(s0, s1, state, _params);"], "all_classes": null, "length": 18518}
{"pred": "                hr = (float) radii.getTopRightHorizontalRadius();\n                vr = (float) radii.getTopRightVerticalRadius();\n                // 1 - Top Right:     X - HR, Y + 0,      X, Y,      X + 0, Y + VR\n                dx0", "answers": ["                hr = (float) radii.getTopRightHorizontalRadius();"], "all_classes": null, "length": 9945}
{"pred": "        group.add_option(\"-q\", \"--quiet\", dest=\"quiet\", action=\"store_true\",\n                help=_(\"quiet mode\"), metavar='[quiet]')\n        group.add_option(\"-v\", \"--verbose\", dest=\"verbose\", action=\"store_true\",\n                help=_(\"verbose mode\"), metavar='[verbose]')\n        group.add_option", "answers": ["        group.add_option(\"\", \"--rpmverbosity\", default=None,"], "all_classes": null, "length": 8933}
{"pred": "            for (int i = 0; i < retryCount; i++) {\n                try {\n                    // mount the data in the repository.\n                    mountData(dataFile, dataPrefix, values, defaultData,\n                              registerDataNames, datafilePath, fileEditable);\n                    successful = true;\n                    datafileModified =", "answers": ["            while (!successful && retryCount-- > 0) try {"], "all_classes": null, "length": 10896}
{"pred": "                    }\n                }\n                moduleBeingBuilt.AddDebugDocument(MakeDebugSourceDocumentForChecksumDirective(normalizedPath, checkSumText, guid));\n            }\n        }\n        private static bool CheckSumMatches(string checkSumText, string sourceHash)\n        {\n            return checkSumText == sourceHash;\n        }\n        private", "answers": ["                        if (guid == existingDoc.SourceHashKind)"], "all_classes": null, "length": 8489}
{"pred": "                    while self.tok[0]!= ')':\n                        if self.tok[0] == 'TYPE':\n                            params.append((self.tok[1], self.NextToken()))\n                        else:\n                            params.append((None, self.NextToken()))\n                        if self.tok[0]!= ',':\n                            break\n", "answers": ["                    if self.tok[0] != ')':"], "all_classes": null, "length": 10276}
{"pred": "#-----------------------------------------------------------------------------\n@registry.register\nclass DragAndDropResponse(LoncapaResponse):\n    \"\"\"\n    Drag and drop response type.\n    \"\"\"\n    human_name = _('Drag and Drop')\n    tags = ['draganddroppanel']\n    allowed_inputfields = ['draganddropinput']\n    def __init__(self", "answers": ["        options_value = json_d.get('options', [])"], "all_classes": null, "length": 13691}
{"pred": "          pMem.n = sqlite3Strlen30( pMem.z );\n        }\n        pMem.type = SQLITE_TEXT;\n        pMem.enc = SQLITE_UTF8;\n        if ( p.pResultSet[i_pMem] == null )\n        {\n          p.pResultSet[i_pMem] = sqlite3Malloc( p.p", "answers": ["          Debug.Assert( pMem.z != null );"], "all_classes": null, "length": 8052}
{"pred": "def _fail(self, req, status):\n    '''\n    Return a failure page with the specified HTTP status code.\n    @param req: Apache Request Object\n    @type req: Apache Request Object\n    @param status: HTTP status code\n    @type status: int\n    @return: a full page", "answers": ["        json_data = json.loads(str(form['jsondata']))"], "all_classes": null, "length": 9234}
{"pred": "                disk_type = expected_disk_spec['type'].lower()\n                if disk_type not in ['thin', 'eagerzeroedthick', 'thick']:\n                    self.module.fail_json(msg=\"Invalid disk type '%s'.\"\n                                              \" Valid options are ['thin', 'eagerzeroedthick', '", "answers": ["                disk_type = expected_disk_spec.get('type', '').lower()"], "all_classes": null, "length": 9014}
{"pred": "\t\t\treturn names [(int) ot] [1];\n\t\t}\n\t\tpublic override string GetSignatureForError ()\n\t\t{\n\t\t\treturn base.GetSignatureForError () + \" operator \" + GetName (OperatorType);\n\t\t}\n\t\tpublic override string GetSignatureForDocumentation ()\n\t\t{\n\t\t\treturn base.GetSignature", "answers": ["\t\t\treturn names [(int) ot] [1];"], "all_classes": null, "length": 8622}
{"pred": "                this.childBranches.Clear();\n                this.RefreshChildren();\n            }\n            /// <summary>\n            /// Collapse this branch\n            /// </summary>\n            public virtual void Collapse() {\n                this.IsExpanded = false;\n                this.ClearCachedInfo();\n            }\n            /// <summary>\n            /// Collapse all branches underneath this", "answers": ["                this.Children = new ArrayList();"], "all_classes": null, "length": 8049}
{"pred": "class stock_partial_move(osv.osv):\n    _name = \"stock.partial.move\"\n    _description = \"Partial Move\"\n    _columns = {\n        'name': fields.char('Reference', size=64, select=True),\n        'picking_id': fields.many2one('stock.picking', '", "answers": ["        if acc_src == acc_valuation:"], "all_classes": null, "length": 9425}
{"pred": "    out : array of datetime64[D]\n        An array with the same shape as ``dates``, containing the adjusted\n        dates.\n    See Also\n    --------\n    is_busday : Returns a boolean array indicating valid days.\n    busday_count : Counts how many valid days are in a half-open date range.\n", "answers": ["    out : array of datetime64[D]"], "all_classes": null, "length": 23278}
{"pred": "                subsets = dim_coord_subset()\n            else:\n                subsets = [slice(None, None)]\n        else:\n            subsets = [slice(None, None)]\n        return subsets\n    def _intersect_modulus(self, coord, minimum, maximum,\n                           min_inclusive=True, max_inclusive=True,\n                           ignore_bounds=False", "answers": ["                subsets = dim_coord_subset()"], "all_classes": null, "length": 8031}
{"pred": "this.region = region;\n}\n/**\n * Sets the receiver's tool tip text to the argument, which\n * may be null indicating that the default tool tip for the\n * control should be restored.\n *\n * @param string the new tool tip text (or null)\n *\n * @exception IllegalArgumentException <ul>\n *   ", "answers": ["\tlong /*int*/ hRegion = 0;"], "all_classes": null, "length": 16705}
{"pred": "                    if paper in autoclaim_successful_recs:\n                        autoclaim_successful_recs.remove(paper)\n                    elif paper in autoclaim_unsuccessful_recs:\n                        autoclaim_unsuccessful_recs.remove(paper)\n                autoclaim_data['hidden'] = False\n                autoclaim_data['num", "answers": ["                    operation_parts = {'pid': person_id,"], "all_classes": null, "length": 8290}
{"pred": "            u\"User %s (%s) opted in to receiving emails from course %s\",\n            user.username,\n            user.email,\n            course_key\n        )\n        track.views.server_track(request, \"change-email1-settings\", {\"receive_emails\": \"yes\", \"course\": course_key.to_deprecated_string()}, page", "answers": ["            u\"User %s (%s) opted in to receive emails from course %s\","], "all_classes": null, "length": 8301}
{"pred": "class CGUnionConversionStruct(CGThing):\n    def __init__(self, type, descriptorProvider):\n        assert not type.nullable()\n        assert not type.hasNullableType\n        CGThing.__init__(self)\n        self.type = type\n        self.descriptorProvider = descriptorProvider\n    def from_jsval(self):\n", "answers": ["        if len(arrayObjectMemberTypes) > 0:"], "all_classes": null, "length": 12254}
{"pred": "class Suppress(TokenConverter):\n    \"\"\"Converter to suppress the output of a given parse expression.\"\"\"\n    def __init__( self, expr ):\n        super(Suppress,self).__init__( expr )\n        self.saveAsList = False\n    def postParse( self, instring, loc, tokenlist ):\n        return []\n", "answers": ["                    tokenlist[ikey] = _ParseResultsWithOffset(dictvalue,i)"], "all_classes": null, "length": 11936}
{"pred": "```python\ndef CheckCStyleCast(filename, linenum, line, raw_line, cast_type, pattern, error):\n  \"\"\"Checks for a C-style cast by looking for the pattern.\n  Args:\n    filename: The name of the current file.\n    linenum: The number of the line to check.\n", "answers": ["    if matched_zero and matched_zero.group(1) != '0':"], "all_classes": null, "length": 20316}
{"pred": "def UploadSeparatePatches(ui, repo, issue, patchset, data, options):\n\t#... (rest of the code remains the same)\n``` \nPlease note that the code is quite long and complex, so I'll only provide the next line of code which is:\n```python\ndef UploadSeparate", "answers": ["          if after == NULL_HASH:"], "all_classes": null, "length": 10689}
{"pred": "            url = _get_subfield_value(fft, 'a')\n            if url:\n                # Let's discover the name of the document\n                docname = _get_subfield_value(fft, 'n')\n                if not docname:\n                    docname = file_strip_ext(url)\n                # Let's discover", "answers": ["            url = field_get_subfield_values(fft, 'a')"], "all_classes": null, "length": 8249}
{"pred": "        int[] ret = new int[ifds.length];\n        int counter = 0;\n        for (int i : ifds) {\n            if ((ifdFlags & (1 << i))!= 0) {\n                ret[counter++] = i;\n            }\n        }\n        if (counter == 0", "answers": ["        ArrayList<Integer> l = new ArrayList<>();"], "all_classes": null, "length": 9563}
{"pred": "            c = new double[m];\n            i1_ = (n-1) - (0);\n            for(i_=0; i_<=m-n;i_++)\n            {\n                c[i_] = b[i_+i1_];\n            }\n            if( m-n+1<=m-1 )\n", "answers": ["            c = new double[m];"], "all_classes": null, "length": 10316}
{"pred": "            \"\\x1FF2\\x1F7C\\x03B9\", /* 1FF2; 1F7C 03B9; Case map */\n            \"\\x1FF3\\x03C9\\x03B9\", /* 1FF3; 03C9 03B9", "answers": ["            \"\\x1FF2\\x1F7C\\x03B9\", /* 1FF2; 1F7C 03B9; Case map */"], "all_classes": null, "length": 14273}
{"pred": "        try {\n            imagepipe.drawImage(this, bImg, op, x, y);\n        } catch (InvalidPipeException e) {\n            try {\n                revalidateAll();\n                imagepipe.drawImage(this, bImg, op, x, y);\n            } catch (InvalidPipeException e2) {\n                //", "answers": ["        if (bImg == null) {"], "all_classes": null, "length": 14028}
{"pred": "      char[] pkgName = CharOperation.subarray(fileName, 0, pkgEnd);\n      char[][] compoundName = CharOperation.splitOn('/', pkgName);\n      return JavaCore.createPackageFragment(CharOperation.toStrings(compoundName));\n    }\n  }\n  public static IPackageFragment getPackageFragment(char[] fileName,", "answers": ["      Path path = new Path(new String(fileName, 0, pkgEnd));"], "all_classes": null, "length": 9133}
{"pred": "def parse_build_macros(filename, names, overrides=None, properties=None): \n    \"\"\"Parse a qmake compatible file of build system macros and convert it to a \n    dictionary.  A macro is a name/value pair.  The dictionary is returned or \n    None if any of the overrides was invalid. \n   ", "answers": ["                if adding and rhs != \"\":"], "all_classes": null, "length": 8273}
{"pred": "                if end_line == t[2][0]:\n                    # same line\n                    previous[3] = (end_line, end + len(text))\n                else:\n                    # new line\n                    logical.append(previous)\n                    previous = (t[2][0], 0, t[2][1], t", "answers": ["                start_line, start = t[2]"], "all_classes": null, "length": 8040}
{"pred": "    def parse_poly(self, filename):\n        poly = None\n        try:\n            poly = Polynomials(filename)\n        except PolynomialParseException as e:\n            if str(e)!= \"No polynomials found\":\n                self.logger.warn(\"Invalid polyselect file '%s': %s\",\n                                  filename, e)\n                return", "answers": ["        with open(filename, \"r\") as inputfile:"], "all_classes": null, "length": 9404}
{"pred": "\t\t\t\tif (mediaEncoderItems.Length!= 3)\n\t\t\t\t{\n\t\t\t\t\tthrow new ArgumentOutOfRangeException(String.Format(CultureInfo.CurrentCulture, \"GallerySetting.RetrieveGallerySettingsFromDataStore cannot parse the media encoder settings for property {0}. Encountered invalid string: '{1}'\", property.Name, mediaEncStr));\n\t\t\t\t}\n\t\t\t", "answers": ["\t\t\t\tif (mediaEncoderItems.Length != 3)"], "all_classes": null, "length": 11381}
{"pred": "            for k in self.splitKeySet.intersection(tree2.splitKeySet):\n                #print '%s - %s' % (self.splitKeyHash[k].br.len, tree2.splitKeyHash[k].br.len)\n                theSum += abs(self.splitKeyHash[k].br.len - tree2.splitKeyHash", "answers": ["            for k in self.splitKeySet.intersection(tree2.splitKeySet):"], "all_classes": null, "length": 10347}
{"pred": "def _SliceIterator(cube, dims_index, dim_to_slice, ordered):\n    \"\"\"\n    An iterator of subcubes given the coordinates or dimension indices\n    desired to be present in each subcube.\n    Args:\n    * cube (Cube):\n        The cube from which to generate the subcubes.\n    *", "answers": ["                kwargs = dict(kwargs)"], "all_classes": null, "length": 11922}
{"pred": "def _listen(\n        cls, event_key, retval=False, **kw):\n    fn = event_key._listen_fn\n    if not retval:\n        def wrap(*arg, **kw):\n            if not retval:\n                query = arg[0]\n                fn(*arg, **kw)\n                return query\n           ", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": "                setMargins(a.getDimensionPixelOffset(MARGIN, DEFAULT_MARGIN),\n                        a.getDimensionPixelOffset(LEFT_MARGIN, DEFAULT_MARGIN),\n                        a.getDimensionPixelOffset(RIGHT_MARGIN, DEFAULT_MARGIN),\n                        a.getDimensionPixelOffset(BOTTOM_MARGIN, DEFAULT_MARGIN));\n            } finally {\n                a.recycle();\n            }\n       ", "answers": ["                int margin = a.getDimensionPixelSize(MARGIN, DEFAULT_MARGIN);"], "all_classes": null, "length": 9007}
{"pred": "        if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())\n            SibTr.entry(tc, \"getUuid\");\n        return _uuid;\n    }\n    /**\n     * Returns the unique id of this connection.\n     *\n     * @return SIBUuid12 of the connection\n     */\n   ", "answers": ["        if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())"], "all_classes": null, "length": 9441}
{"pred": "                return new SynthesizedIntrinsicOperatorSymbol(leftType, OperatorFacts.BinaryOperatorNameFromOperatorKind(op), rightType, returnType, isChecked);\n            }\n            return new SynthesizedIntrinsicOperatorSymbol(leftType, OperatorFacts.BinaryOperatorNameFromOperatorKind(op), rightType, returnType, isChecked);\n        }\n", "answers": ["                if ((object)leftType == null)"], "all_classes": null, "length": 15198}
{"pred": "        self.invoke('beforeEvaluate', expression=expression, locals=locals)\n        try:\n            result = self.execute(expression, locals)\n        except MetaError, e:\n            # If a MetaError occurs, then we need to propagate the\n            # contexts.\n            raise MetaError(e.contexts, e.exc)\n", "answers": ["        if expression in ('1', 'True'): return True"], "all_classes": null, "length": 8731}
{"pred": "      for (int j = 0; j < dsize; j++) {\n        labels[dataIndex][j] = classIndex.indexOf(document.get(j).label());\n        data[dataIndex][j] = new int[windowSize][];\n        for (int k = 0, fSize = document.get(j", "answers": ["      if (featureVals != null)"], "all_classes": null, "length": 8316}
{"pred": "        /// <summary>\n        /// </summary>\n        internal uint pad0; // internal padding, must be 0\n    };\n    // subfield record for nested type\n    /// <summary>\n    /// </summary>\n    internal struct LeafNestType\n    {\n        // internal ushort leaf;      //", "answers": ["        internal string name; // length prefixed name of method"], "all_classes": null, "length": 9110}
{"pred": "            if (GL.GetString(StringName.Version).StartsWith(\"GL ES\"))\n                contextProfile = _CONTEXT_ES_PROFILE_BIT;\n            // MAJOR & MINOR only introduced in GL {,ES} 3.0\n            GL.GetInteger(GetPName.MajorVersion, out majorVersion);\n            GL.GetInteger", "answers": ["            if (GL.GetString(StringName.Version).StartsWith(\"GL ES\"))"], "all_classes": null, "length": 8378}
{"pred": "```python\ndef get_format_from_http_response(response):\n    \"\"\"\n    Given an HTTP response, try to guess the extension of the file.\n    @param response: the HTTP response.\n    @type response: urllib2.HTTPResponse\n    @return: the guessed extension.\n    @rtype: string\n    \"\"\"\n   ", "answers": ["    return (0, CFG_WEBACCESS_WARNING_MSGS[0])"], "all_classes": null, "length": 11744}
{"pred": "class UDFLBAddr(object):\n    \"\"\"A class representing a UDF Logical Block Address (ECMA-167, Part 4, 14.13).\"\"\"\n    __slots__ = ('_initialized', 'extent_location', 'block_num', 'offset')\n    FMT = '<LL'\n    def __", "answers": ["        self.impl_id = UDFEntityID()"], "all_classes": null, "length": 10644}
{"pred": "```\n    def _wrap_applied_output(self, keys, values, not_indexed_same=False):\n        from pandas.core.index import _all_indexes_same\n        if len(keys) == 0:\n            # XXX\n            return DataFrame({})\n        key_names = self.grouper.names\n        if isinstance(values[", "answers": ["                            result = concat(values, keys=key_index,"], "all_classes": null, "length": 9883}
{"pred": "            case 'L':\n                flags |= LITERAL;\n                break;\n            default:\n                throw error(\"Unknown inline modifier\");\n            }\n            ch = next();\n            if (ch == ':')\n                break;\n            else\n                unread();\n        }\n    }\n    /**\n     * Parses a closure and returns the node that", "answers": ["            case '-': // subFlag then fall through"], "all_classes": null, "length": 10915}
{"pred": "        final VMInstanceVO vm = _vmDao.findByUuid(vmUuid);\n        if (vm == null) {\n            if (s_logger.isDebugEnabled()) {\n                s_logger.debug(\"Unable to find the vm \" + vmUuid);\n            }\n            throw new CloudRuntimeException(\"Unable to find a virtual machine with id \" +", "answers": ["        final VMInstanceVO vm = _vmDao.findByUuid(vmUuid);"], "all_classes": null, "length": 8853}
{"pred": "        # gradient to integrate is: g_i = N_i - N_i \\sum_{n=1}^N W_{ni}\n        #                              = N_i - N_i \\sum_{n=1}^N exp(f_i-u_i) / \\sum_{k=1} N_k exp(f", "answers": ["        W_nk = self._computeWeights(recalc_denom=True)"], "all_classes": null, "length": 12510}
{"pred": "class FTPShellTestsMixin(object):\n    \"\"\"\n    Generic tests for the C{IFTPShell} interface.\n    \"\"\"\n    def setUp(self):\n        \"\"\"\n        Create a FTP shell and a filesystem root.\n        \"\"\"\n        self.filesystemRoot = filepath.FilePath(self.mktemp())\n        self.filesystemRoot.createDirectory()\n", "answers": ["        d = self.shell.stat(('ned',), ('size', 'directory'))"], "all_classes": null, "length": 8415}
{"pred": "                if( b < 0 ) {\n                    break;\n                }   // end if: end of stream\n                dest[ off + i ] = (byte)b;\n            }   // end for: each byte read\n            \n            return i;\n        }   // end read\n        \n        /**\n         * Calls {@link", "answers": ["                if( b >= 0 ) {"], "all_classes": null, "length": 9989}
{"pred": "            if (b == null)  return a;\n            return new ToolkitEventMulticaster(a, b);\n        }\n        static AWTEventListener remove(AWTEventListener a,\n                                       AWTEventListener b) {\n            if (a == null)  return b;\n            if (b == null)  return a", "answers": ["            if (b == null)  return a;"], "all_classes": null, "length": 10923}
{"pred": "\t\t\t\t\t\t\t\tresults.Sort( AccountComparer.Instance );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif ( results.Count == 1 )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tAccount a = (Account)results[0];\n\t\t\t\t\t\t\t\tfrom.SendGump( new AdminGump( from, AdminGumpPage.AccountDetails_Information, 0, null, \"One", "answers": ["\t\t\t\t\t\t\t\tresults.Sort( AccountComparer.Instance );"], "all_classes": null, "length": 9034}
{"pred": "            if (result!= RESULT.OK)\n            {\n                return result;\n            }\n            soundnew = new Sound();\n            soundnew.setRaw(soundraw);\n            sound = soundnew;\n            return result;\n        }\n        public RESULT createStream           (string name_or_data, MODE mode, ref CREATESOUNDEXINFO", "answers": ["            if (result != RESULT.OK)"], "all_classes": null, "length": 14660}
{"pred": "                tbl_ix = data[base] & 255;\n            int len = bs2i(base+1, 2);\n            base += 3;\n            int huffbits[] = new int[len];\n            int huffval[] = new int[len];\n            int huffbits_ix = 0;\n", "answers": ["                tbl_ix = data[base] & 255;"], "all_classes": null, "length": 16751}
{"pred": "                    this.AddLabel(x2 + 30, 215, 55, a.Text(200233));  // \"Deathball\"\n                    this.AddButton(x2, 215, 0xFAB, 0xFAD, 405, GumpButtonType.Reply, 0);\n                    // add the", "answers": ["                    this.AddLabel(x2 + 30, 215, 55, a.Text(200233));  // \"DeathBall\""], "all_classes": null, "length": 8017}
{"pred": "            TemplateRow = TemplateDT.NewRowTyped(false);\n            TemplateRow.PartnerKey = AFamilyPartnerKey;\n            RequiredColumns = new StringCollection();\n            RequiredColumns.Add(PPersonTable.GetPartnerKeyDBName());\n            RequiredColumns.Add(PPersonTable.GetSiteKeyDBName());\n            RequiredColumns.Add(", "answers": ["            TemplateRow = TemplateDT.NewRowTyped(false);"], "all_classes": null, "length": 8754}
{"pred": "\t\tfinal LameInternalFlags gfc = gfp.internal_flags;\n\t\tif (gfc!= null) {\n\t\t\tif (gfc.ATH!= null)\n\t\t\t\tgfc.ATH.free();\n\t\t\tif (gfc.PSY!= null)\n\t\t\t\tgfc.PSY.free();\n\t\t\tif (gfc.rg", "answers": ["\t\tif (gfp != null && gfp.class_id == LAME_ID) {"], "all_classes": null, "length": 8018}
{"pred": "                if (AllSubmissionsOK == false)\n                {\n                    TLogging.LogAtLevel(9,\n                        Messages.BuildMessageFromVerificationResult(\"TPartnerEditUIConnector.SubmitChangesPersonnelData AVerificationResult: \",\n                            AVerificationResult));\n                }\n            }\n            else\n            {\n                TLogging.LogAtLevel", "answers": ["                if (AllSubmissionsOK == false)"], "all_classes": null, "length": 8128}
{"pred": "```python\ndef getTestSkeleton(self, test):\n    \"\"\" Return the skeleton for the given test \"\"\"\n    # get the skeleton name from the test\n    skeleton = test.skeleton\n    # if the skeleton is not found, use the default\n    if not skeleton:\n        skeleton = self.pref.getSkeleton()\n", "answers": ["                    elif name == \"requires\":"], "all_classes": null, "length": 9136}
