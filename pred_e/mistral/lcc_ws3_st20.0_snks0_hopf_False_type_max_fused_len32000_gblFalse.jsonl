{"pred": "\t\t\traspodelaTableModel.addPrimerak(primerak);\n\t\t\thandleSetPreostalo();\n\t\t\thandleLoadPrimerak();\n\t\t\tbrojPrimTxtFld.requestFocus();\n\t\t} catch (Raspodela", "answers": ["\t\t\tString invKnj = invKnjPanel.getCode();"], "all_classes": null, "length": 451}
{"pred": "               SubCriteria[\"GroupID\"] = new SearchCondition<String>(\"GroupID\");\n              }\n              return (ISearchCondition<String>)SubCriteria[\"GroupID\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"UserID", "answers": ["                 SubCriteria[\"GroupID\"] = new SearchCondition<String>(\"GroupID\");"], "all_classes": null, "length": 475}
{"pred": "\t\taliases.Add (\"gb2312\", \"gb2312\");\n\t\taliases.Add (\"gbk\", \"gb2312\");\n\t\taliases.Add (\"gb_china\", \"gb2312\");\n\t\taliases.", "answers": ["\t\taliases.Add (\"GBK\", \"gb2312\");"], "all_classes": null, "length": 545}
{"pred": "# TODO(jasonpr): Implement this method.\ndef _parse_negated_character_class(source):\n    \"\"\"Parse a negated character class expression, like '[^abc]'.\n    \"\"\"\n    pass\n# TODO(jasonpr): Implement this method.\ndef _parse", "answers": ["        if _parse_verbatim(source, '[:%s:]' % class_name):"], "all_classes": null, "length": 850}
{"pred": "#print(suma)\n#print(mmx)\n#print(total)\n#print(np.argmax(mmx))\n#print(np.argmax(total))\n#print(np.argmax(suma))\n#print(np.argmax(sum", "answers": ["check = numbers[5][123]"], "all_classes": null, "length": 502}
{"pred": "       sendBean(\"B\", 1, 1L);\n        sendBean(\"A\", null, null);\n        assertFalse(listener.isInvoked());\n        sendBean(\"A\", 1, 1L);\n        assertEquals(1L, listener.assertOneGetNewAndReset", "answers": ["        sendBean(\"A\", null, null);"], "all_classes": null, "length": 756}
{"pred": "               item.setExpanded(true);\n                item.setGrayed(false);\n                item.setSelected(true);\n                return;\n            }\n            if (item.getItemCount() > 0) {\n                restoreSelection(selectionText, item.", "answers": ["                tree.setSelection(new TreeItem[] { item });"], "all_classes": null, "length": 1800}
{"pred": "       topPanel.revalidate();\n        topPanel.repaint();\n    }\n}", "answers": ["        if (nilCard != null) {"], "all_classes": null, "length": 511}
{"pred": "\t\t\tsqrtAspect = (float) Math.sqrt((double) w / h);\n\t\t}\n\t}\n\tprivate void loadBitmap() throws IOException {\n\t\tif (bitmap != null)\n\t\t\tbitmap.recycle();\n\t\tInputStream is = new FileInputStream", "answers": ["\t\t\tfloat r = (w+h)/2f;"], "all_classes": null, "length": 1042}
{"pred": "       self.__repeat = (delay, interval)\n\nI'm trying to add the functionality of setting the repeat delay and interval for the keys using the _set_repeat function. I've added the code snippet below the comment but it's not working. I'm not sure what I'", "answers": ["            self.__tick_id = gobject.timeout_add(10, self._tick_cb)"], "all_classes": null, "length": 703}
{"pred": "# Run tests\ntest_paths = {\"/\": {\"tests_path\": os.path.join(os.getcwd(), \"tests\")}}\nproduct = \"firefox\"\nkwargs = {\n    \"test_paths\": test_paths,\n    \"product\": product,\n    \"", "answers": ["    handler = handlers.LogLevelFilter(logged_critical, \"CRITICAL\")"], "all_classes": null, "length": 1196}
{"pred": "   def getState(self):\n        \"\"\" Method to get the current state of the wavemeter.\n        @return str: state of the wavemeter (running, idle, deactivated)\n        \"\"\"\n        # check the status of the wavemeter\n        if self._wavem", "answers": ["        if self.getState() == 'idle':"], "all_classes": null, "length": 885}
{"pred": "       List<String> mustStatusNames = Arrays.asList(\n            PresenceStatus.AVAILABLE.getStatusName(),\n            PresenceStatus.AWAY.getStatusName(),\n            PresenceStatus.BUSY.getStatusName(),\n            PresenceStatus.CHATTING", "answers": ["        List<String> requiredStatusNames ="], "all_classes": null, "length": 678}
{"pred": "                           await cmd.ExecuteArmed(this, null);\n                        }\n                    });\n                }\n            }\n            poll.Options = options;\n            ActivePoll = poll;\n            pollTimer.Interval = PollTimeout * 1000;\n            pollTimer", "answers": ["                            await cmd.ExecuteArmed(this, null);"], "all_classes": null, "length": 3344}
{"pred": "\t\t\tthis.label1.Location = new System.Drawing.Point(6, 12);\n\t\t\tthis.label1.Name = \"label1\";\n\t\t\tthis.label1.Size = new System.Drawing.Size(148, 18);", "answers": ["\t\t\tthis.label1.Location = new System.Drawing.Point(6, 51);"], "all_classes": null, "length": 1316}
{"pred": "\t\t\t\tif (assembly == null && !throwOnMissing) {\n\t\t\t\t\tassembly = BuildManager.GetCompiledType (name).Assembly;\n\t\t\t\t\tif (assembly != null) {\n\t\t\t\t\t\tassemblyCache.Add (name, assembly", "answers": ["\t\t\t\tif (assembly == null) {"], "all_classes": null, "length": 1336}
{"pred": "# Initialize the module\nmodule = AnsibleModule(argument_spec=ce_argument_spec, supports_check_mode=True)\n# Initialize the LinkStatus object\nlink_status = LinkStatus(ce_argument_spec)\n# Check input params\nlink_status.check_params", "answers": ["        if self.interface == 'all':"], "all_classes": null, "length": 1718}
{"pred": "   for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      if (!Character.isDigit(c) && c != ',') return false;\n    }\n    return true;\n  }\n  public", "answers": ["    for (int i = 0; i < s.length(); i++)"], "all_classes": null, "length": 939}
{"pred": "\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t\t/// <summary>\n\t\t/// Records a staff member deleting an auction\n\t\t/// </summary>\n\t\t///", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "                           sead_partnn_l = find_neighbours(nodemap, c_sead, hub_threshld, avoid_l, blok_superErode_neighbors);\n                        }\n                        if (sead_partnn_", "answers": ["                            if (c_sead == start || c_sead == stop) {"], "all_classes": null, "length": 1426}
{"pred": "\t\t\tthis.Size = new System.Drawing.Size(320, 261);\n\t\t\tthis.ResumeLayout(false);\n\t\t\tthis.PerformLayout();\n\t\t}\n\t\t#endregion\n\t\tprivate System.Windows.Forms.", "answers": ["\t\t\tthis.Size = new System.Drawing.Size(371, 300);"], "all_classes": null, "length": 825}
{"pred": "# behavior = {\n#     'tour': tourlist,\n#     'observations': observations,\n#     }\n\n    behavior = {\n        'tour': [tourIntro, tourStart, tourEnd],\n        'observations': observations,\n        }\n\n", "answers": ["    behavior_list = [ checkOnTour(tourlist, o,"], "all_classes": null, "length": 609}
{"pred": "       self.write_page(addressbookpage, head, body, output_file, sio, FULLCLEAR)\n\n    def get_gender(self, handles):\n        \"\"\"\n        @param: handles -- list of handles\n        @return: (males, females, unknown", "answers": ["        footer = self.write_footer(None)"], "all_classes": null, "length": 960}
{"pred": "   self.progress(\"Checking altitude\")\n    self.wait_for_alt(alt_min=m.alt, timeout=10)\n    self.hover()\n    self.progress(\"Takeoff\")\n    self.takeoff(alt_min=m.alt+1", "answers": ["            if abs(m.relative_alt) > max_relalt_mm:"], "all_classes": null, "length": 577}
{"pred": "\t\t\t\t\t\t\tif (strings[0] == \"GlobalSettings\")\n\t\t\t\t\t\t\t\torderManager.LobbyInfo.GlobalSettings = Session.GlobalSettings.Deserialize(node.Value);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t", "answers": ["\t\t\t\t\t\t\tif (strings[0] == \"GlobalSettings\")"], "all_classes": null, "length": 591}
{"pred": "\t\t\t\tSystem.arraycopy(src, srcOffset, buf, 0, byteCount);\n\t\t\t\tbufferedPacket.setPayload(buf);\n\t\t\t\tstate = SocketReadState.READ_PACKET;\n\t\t\t\treturn bufferedPacket;\n", "answers": ["\t\t\t\tfor (int i = 0; i < byteCount; i++) {"], "all_classes": null, "length": 783}
{"pred": "       // Create toolbar\n        if (opiRuntimeToolBarDelegate == null)\n        {\n            opiRuntimeToolBarDelegate = new OPIRuntimeToolBarDelegate(this);\n            getSite().setActionBars(new IActionBars() {\n                @Override\n              ", "answers": ["        if (opiRuntimeToolBarDelegate != null)"], "all_classes": null, "length": 813}
{"pred": "           if (launcher != null && launcher.isPopupTrigger(e)) {\n                launcher.showPopup(this, e);\n            }\n        }\n    }\n}", "answers": ["            if (launcher != null && !e.isPopupTrigger()) {"], "all_classes": null, "length": 933}
{"pred": "   def test_clean_name_two_word_surnames_with_hyphen(self):\n        names = [\n            (\"EDE-COOPER \\nPalmer\", \"Palmer Ede-Cooper\"),\n            (\"VAN-DULKEN \\nRichard", "answers": ["            (\"O`NEAL \\nCarol Joy\", \"Carol Joy O'Neal\"),"], "all_classes": null, "length": 919}
{"pred": "           sort_by, sort_order = sort\n            if sort_by not in ['uploadDate', 'displayname']:\n                raise ValueError('Invalid sort_by value: %s' % sort_by)\n            if sort_order not in [ModuleStoreEnum.SortOrder.asc", "answers": ["            if sort[0] == 'uploadDate':"], "all_classes": null, "length": 1853}
{"pred": "           }\n            object IEnumerator.Current => Current;\n            public void Dispose() { }\n            public bool MoveNext()\n            {\n                if (list.IsReadOnly)\n                    throw new InvalidOperationException(\"Synclists can only be modified at the server\");\n", "answers": ["                index = -1;"], "all_classes": null, "length": 1053}
{"pred": "# Create a new repository instance.\nrepo = unionrepository(ui, path, parentpath)\n# Open the repository.\nrepo.open()\n# Close the repository.\nrepo.close()\n# Print a message.\nprint(_('Created a new union repository at %s') % repo.", "answers": ["                parentpath = parentpath[len(cwd):]"], "all_classes": null, "length": 795}
{"pred": "       record = logging.LogRecord(name, msg, level, fn, lno, *args, **kwargs)\n        return record\nclass StructuredFormatter(logging.Formatter):\n    \"\"\"A formatter that handles structured data passed in 'extra'.\"\"\"\n    def __init__(self, *", "answers": ["        if sys.version_info[0] == 2:"], "all_classes": null, "length": 897}
{"pred": "                               m.Mana -= 20;\n                            }\n                            else\n                            {\n                                m.SendMessage(\"You have reached the skill cap for that skill\");\n                            }\n                        }\n                        else\n                        m.SendMessage(\"You", "answers": ["                                m.Mana -= 20;"], "all_classes": null, "length": 569}
{"pred": "def models_exist(model, data, queryset=None):\n    \"\"\"\n    Check whether the models defined by @data exist in the @queryset.\n    \"\"\"\n    if hasattr(data, 'hashes'):\n        data = hashes_data(data)\n    if not", "answers": ["            for k, v in hash_.iteritems():"], "all_classes": null, "length": 546}
{"pred": "           return page_not_authorized(req=req, referer=\"/edit\",\n                                       text=auth_message, navtrail=navtrail)\n        recid = argd['recid']\n        ticket = perform_request_newticket(recid)\n        return", "answers": ["            return page_not_authorized(req=req, referer=\"/edit\","], "all_classes": null, "length": 756}
{"pred": "'''\n# This is a placeholder for the code that should be added\n# to implement the logic for the 'use_tty' option.\n# The code below is just a comment.\n#\n# if options.get('use_tty'):\n#     ssh_args += ['-tt']", "answers": ["        - {key: usetty, section: ssh_connection}"], "all_classes": null, "length": 968}
{"pred": "\t\tdataString += \"WARDLIST\";\n\t\tdataString += ims.dto.NASMessageCodes.MESSAGESEPARATOR;\n\t\tdataString += \"1\";\n\t\tdataString += ims.dto.NASMessageCodes.MESSAGESEPARATOR;\n", "answers": ["\t\tWardlistRecord data = (WardlistRecord)DataCollection.get(0);"], "all_classes": null, "length": 1476}
{"pred": "       record_add_field(rec, '300', subfields=[('a', page_count)])\n        record_add_field(rec, '490', subfields=[('a', journal)])\n        record_add_field(rec, '090',", "answers": ["            record_add_field(rec, '300', subfields=[('a', page_count)])"], "all_classes": null, "length": 1283}
{"pred": "               assertEquals(A.getQuick(c, r), B.getQuick(r, c));\n            }\n        }\n    }\n    public void testViewRow() {\n        IntMatrix1D row = A.viewRow(NROWS / 2);\n        assertEquals(", "answers": ["                assertEquals(A.getQuick(r, NCOLUMNS - 1 - c), B.getQuick(r, c));"], "all_classes": null, "length": 1319}
{"pred": "# Send Unit Data\nclass ENIPSendUnitData(BaseSendPacket):\n    \"\"\"Send Unit Data Command Field\"\"\"\n    name = \"ENIPSendUnitData\"\n    fields_desc = [\n        LEShortField(\"protocolVersion\", 1),\n        LEShortField(\"options\", ", "answers": ["                 lambda pkt: pkt.commandId == 0x6f),"], "all_classes": null, "length": 625}
{"pred": "\t\tGridEnvelope gridEnvelope = reader.readGridGeometry();\n\t\t\n\t\t// Extracting the CRS from the GeoTIFF file\n\t\tCoordinateReferenceSystem crs = CRS.decode(reader.getCoordinateReferenceSystem());\n\t\t\n\t\t", "answers": ["\t\tfinal CoordinateReferenceSystem crs = reader.getCrs();"], "all_classes": null, "length": 805}
{"pred": "           ((Creature) e).setCanDespawn(false);\n        }\n        return e;\n    }\n}\n\n// I want to add a new creature called \"GhastlyGhoul\" which is a variant of the ghast.\n// It should be a flying", "answers": ["            Creature c = (Creature) e;"], "all_classes": null, "length": 386}
{"pred": "\t\t\tushort* line = (ushort*)bd.Scan0;\n\t\t\tint delta = bd.Stride >> 1;\n\t\t\tfor( int y = 0; y < height; ++y, line += delta )\n\t\t\t{\n\t\t", "answers": ["\t\t\tushort* line = (ushort*)bd.Scan0;"], "all_classes": null, "length": 1243}
{"pred": "                   if (house == null)\n                        house = BaseHouse.FindHouseAt(new Point3D(m.X, m.Y + 1, 127), m.Map, 16);\n                    if (house != null)\n                        bonus", "answers": ["                    if (house == null)"], "all_classes": null, "length": 585}
{"pred": "Console.WriteLine(\"Display Set Name: {0}\", displaySet.Name);\nConsole.WriteLine(\"Display Set Description: {0}\", displaySet.Description);\nConsole.WriteLine(\"Display Set Series: {0}\", string.Join(\", \", displaySet.Series.Select(s => s.SeriesDescription).", "answers": ["\t\t\t\t\t\tConsole.WriteLine(\" > {0}\", displaySet.Descriptor.Description);"], "all_classes": null, "length": 803}
{"pred": "# This is a stub for the function that will be implemented in the next exercise.\n# It should return the TimestampFile object for the given file name.\ndef read_file(filename):\n\"\"\"\nRead the timestamp data for a file.\n:param filename: The name of the file to read", "answers": ["    exts = supported_extensions()"], "all_classes": null, "length": 653}
{"pred": "\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\t\tif (cgn.depth < 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// find the parent cell\n\t\t\t\t\t\t\t", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "\t\t\t    case 189: // - key\n\t\t\t\t    if (down ) {\n                        if (CAPS)\n                            Program.keyH_ENT = (Program.keyH_ENT & (~8));\n                        else\n                        {\n                ", "answers": ["\t\t\t    case 189: // -/_ key"], "all_classes": null, "length": 1748}
{"pred": "out_list += [weights_dmat_all[index]]\nout_comment += ['Distortion matrix weights']\nout_units += ['']\nresults.write(np.array(out_list), names=out_names, comment=out_comment,\n              units=out_units", "answers": ["        out_list += [weights_dmat_all[index]]"], "all_classes": null, "length": 1374}
{"pred": "lines = obj.splitlines()\nreturn list(load(lines, mapping, implementation, strict))", "answers": ["    obj = obj.lstrip(\"\\ufeff\")"], "all_classes": null, "length": 676}
{"pred": "\t\tif (orig == null || !orig.exists() || orig.length() == 0)\n\t\t\treturn;\n\t\tString newUuid = mDbHelper.getBookUuid(newId);\n\t\tcopyFileToCoverImageIfMissing(orig, newU", "answers": ["\t\tif (orig == null || !orig.exists() || orig.length() == 0)"], "all_classes": null, "length": 866}
{"pred": "           strength += opponent.getValue().getScore().get(0);\n        }\n        tableStrengthScore.setPlayer(player);\n        tableStrengthScore.setScore(FXCollections.observableArrayList(\n                new IntegerProperty(strength)));\n        this.scoreTable", "answers": ["            for (PlayerScore scoreTable : this.scoreTable) {"], "all_classes": null, "length": 1212}
{"pred": "   def test_public_mode_off(self, temp_dir, common_obj):\n        web = web_obj(temp_dir, common_obj, \"receive\")\n        web.settings.set(\"general\", \"public\", False)\n        with web.app.test_", "answers": ["            res = c.get(\"/\")"], "all_classes": null, "length": 919}
{"pred": "           nsClientService = mLocalBinder.getService();\n        }\n    };\n    public void addToLog(EventNSClientNewLog event) {\n        listLog.add(event);\n        if (listLog.size() > 10) listLog.remove(0", "answers": ["                nsClientService = mLocalBinder.getServiceInstance();"], "all_classes": null, "length": 516}
{"pred": "=====================\n\n# Now build the _ssl and _hashlib extensions.\n#\n# Note: the _ssl extension is built with the OpenSSL library,\n# so we need to set the OpenSSL library directory in the environment.\n#\n# Note: the _hashlib extension is built", "answers": ["            if arch == \"amd64\":"], "all_classes": null, "length": 982}
{"pred": "\t}\n\t\n\tvoid UpdateUpgradeStatCost(int id, int length){\n\t\tfor(int j=0; j<towerList[index].upgradeStat.Length; j++){\n\t\t\tint[] tempCostList=towerList[index].upgradeStat", "answers": ["\t\tfor(int i=0; i<length; i++){"], "all_classes": null, "length": 3890}
{"pred": "\t\t\t\tAddRes( index, typeof( Turquoise ), 1032691, 1, 1044240 );\n\t\t\t\tAddRecipe( index, 34 );\n\t\t\t\tSetNeededExpansion( index,", "answers": ["\t\t\t\tAddRes( index, typeof( BrilliantAmber ), 1032697, 1, 1044240 );"], "all_classes": null, "length": 3677}
{"pred": "```python\nself.test_simpleentry()\n```\nThis line of code is calling the `test_simpleentry` method defined in the `TestProp2PO` class. This method tests that a simple properties entry converts properly to a po entry.\n\nThe `TestProp2PO", "answers": ["        options = self.help_check(options, \"-P, --pot\")"], "all_classes": null, "length": 1336}
{"pred": "\t\t\tsw.WriteLine (\"\\t\\t// TODO: Add member declarations for signals here.\");\n\t\t\tsw.WriteLine ();\n\t\t\tsw.WriteLine (\"\\t}\");\n\t\t\tsw.WriteLine ();\n\t\t\tGenerateImplementorIface (gen_info);", "answers": ["\t\t\tforeach (Signal sig in sigs.Values) {"], "all_classes": null, "length": 1298}
{"pred": "   module = AnsibleModule(\n        argument_spec=fields,\n        supports_check_mode=False,\n        required_together=[],\n        mutually_exclusive=[],\n        required_one_of=[],\n        validate_plugins=True\n    )\n   ", "answers": ["    module = AnsibleModule(argument_spec=fields,"], "all_classes": null, "length": 1009}
{"pred": "   node.setLeaf(leaf);\n  }\n  public void setPresentableTextContainer(Element presentableTextContainer) {\n    this.presentableTextContainer = presentableTextContainer;\n  }\n  public void setInfoTextContainer(Element infoTextContainer) {\n    this", "answers": ["    if (node instanceof MutableNode) {"], "all_classes": null, "length": 568}
{"pred": "           return prevChildren.Take(StartPagingTreshold)\n                .Concat(Enumerable.Range(0, (previousChildren.Length - StartPagingTreshold + PageSize - 1) / PageSize)\n                    .Select(i => childFactory(query.Parent, (", "answers": ["            var page = prevChildren.Take(StartPagingTreshold).ToList();"], "all_classes": null, "length": 781}
{"pred": "   def testTCPShortWriteWithTrailingData(self):\n        \"\"\"\n        TCP: Short write to client with trailing data\n        \"\"\"\n        name = 'short-write-trailing-data.tcp-short.tests.powerdns.com.'\n        query = dns.message", "answers": ["        soaResponse = dns.message.make_response(query)"], "all_classes": null, "length": 648}
{"pred": "       if (kind == null) {\n            throw new IllegalArgumentException(\"Unknown JFlex token id: \" + javaccKind);\n        }\n        return kind;\n    }\n    public TokenCategory getCategory() {\n        return category;\n    }\n    public int getJav", "answers": ["        if (kind == null) {"], "all_classes": null, "length": 524}
{"pred": "           return FindControl(DescriptionID);\n        }\n        public Control GetLabelForTitle()\n        {\n            return FindControl(TitleID);\n        }\n        public Control GetLabelForPercentage()\n        {\n            return FindControl(PercentageControlID);\n        }\n       ", "answers": ["            return this.FindControlRecursive(DescriptionControlID) as Label;"], "all_classes": null, "length": 450}
{"pred": "       url = '%s://%s%s?%s' % (self.protocol, host, path, urllib.urlencode(query_args))\n        else:\n            url = '%s://%s%s' % (self.protocol, host, path)\n        return", "answers": ["            path += '?' + query_args"], "all_classes": null, "length": 1198}
{"pred": "\t\t\t\tcanvas.drawBitmap(tiles[i].getBitmap(), left, top, null);\n\t\t\t}\n\t\t}\n\t}\n\tprivate float getPosX(LatLonPos pos, double scale){\n\t\treturn (pos.getLon() +", "answers": ["\t\t\t\tRectF destRect = new RectF(left, top, right, bottom);"], "all_classes": null, "length": 1184}
{"pred": "           HueInfo = new Dictionary<DyeType, Tuple<int, int>>();\n            HueInfo.Add(DyeType.WindAzul, new Tuple<int, int>(0x3B2, 0x3B2));\n            HueInfo.", "answers": ["            HueInfo = new Dictionary<DyeType, Tuple<int, int>>();"], "all_classes": null, "length": 535}
{"pred": "               this.gwtCertificatesService.deleteEntry(selected.getKeystoreName(), selected.getAlias(),\n                        c -> {\n                            if (c.isError()) {\n                                this.alertDialog.show(MSGS.error(), MSGS.certificate", "answers": ["                final Modal modal = new Modal();"], "all_classes": null, "length": 698}
{"pred": "\t\t\t\"    {0}\" +\n\t\t\t\"    Public Class SomeClass{0}\" +\n\t\t\t\"        {0}\" +\n\t\t\t\"        Private Sub SomeMethod(Of T As  {{System.IComparable, System.ICloneable, New}}, S", "answers": ["\t\t\t\t\"    {0}\" +"], "all_classes": null, "length": 1270}
{"pred": "\nclass MemoryContainer(Container):\n    \"\"\"A simple in-memory container.\n    \n    This container is threadsafe and does not support expiration.\n    \n    \"\"\"\n    \n    def __init__(self, namespace):\n        Container.__init__(self, namespace)\n        self.", "answers": ["            if os.access(self.file + os.extsep + ext, os.F_OK):"], "all_classes": null, "length": 1142}
{"pred": "       return \"ImageIcon[\" + (filename != null ? filename : location) + \"]\";\n    }\n    /**\n     * Returns the filename or URL of the image.\n     *\n     * @return the filename or URL of the image\n     */\n    public String getFilename() {", "answers": ["        if (description != null) {"], "all_classes": null, "length": 1934}
{"pred": "# return self.formatted_plugin_list()\n# What should be the next line of code?\n# The next line of code should return the formatted list of plugins,\n# either active or all, depending on the argument passed to the method.\n# If active_only is True, it", "answers": ["            all_plugins = self._bot.plugin_manager.get_all_plugin_names()"], "all_classes": null, "length": 833}
{"pred": "   module = AnsibleModule(\n        argument_spec=fields,\n        supports_check_mode=True\n    )\n    fos = FortiOSHandler(module)\n    is_error, status, diff = fortios_system(module.params, fos)\n    if not", "answers": ["                \"vdom\": {\"required\": False, \"type\": \"str\"}"], "all_classes": null, "length": 1164}
{"pred": "           throw new IOException();\n        }\n        fileDecoder = savedDecoder;\n    }\n    private Object open(String name) throws IOException {\n        // TODO: Implement the open method\n        throw new IOException();\n    }\n    private static Object clone(Object obj) {\n        // TODO", "answers": ["            throw new IOException();"], "all_classes": null, "length": 880}
{"pred": "\t\t\t\treturn originalObject != null;\n\t\t\tcase ActivitydiagramPackage.TRACED_ACTIVITY__TRACE_SEQUENCE:\n\t\t\t\treturn traceSequence != null && !traceSequence.isEmpty();\n\t\t}\n\t\treturn super.eIsSet(", "answers": ["\t\t\t\treturn originalObject != null;"], "all_classes": null, "length": 533}
{"pred": "\t\tnew InterfaceUpdater(db, imported).execute();\n\t\tnew SnmpInterfaceUpdater(db, imported).execute();\n\t\treturn Collections.emptyList();\n\t}\n}\n\n// TODO: implement update method for OnmsMonitoredService\n// TODO: implement", "answers": ["\t\tList<Event> events = new LinkedList<Event>();"], "all_classes": null, "length": 888}
{"pred": "   if state == 'present':\n        changed = publication.create(tables, params, owner)\n    elif state == 'absent':\n        changed = publication.drop(cascade=cascade)\n    # If module.check_mode=True, just return True:\n    if module", "answers": ["    if state == 'present':"], "all_classes": null, "length": 2176}
{"pred": "\t\t\tint version = reader.ReadInt();\n\t\t}\n\t}\n}", "answers": ["\t\t\tint version = reader.ReadInt();"], "all_classes": null, "length": 737}
{"pred": "   def get_reconstruction_cost(self, updates, pre_sigmoid_nv):\n        \"\"\"Approximation to the reconstruction error\n        Note that this function requires the pre-sigmoid activation as\n        input.  To understand why this is so you need to understand a\n       ", "answers": ["        of log(sigmoid(..)) and will not apply the wanted"], "all_classes": null, "length": 1545}
{"pred": "           return new TripChain(Person);\n        }\n        #endregion ITripChain Members\n    }\n}", "answers": ["            ITripChain chain = (ITripChain)MemberwiseClone();"], "all_classes": null, "length": 798}
{"pred": "       super(edge.getX() + edge.getWidth() - 20,\n                edge.getY() + edge.getHeight() - 20,\n                40, 40, false, new String[] {\"role\", \"ordering\"});\n        role =", "answers": ["        role = new FigRole();"], "all_classes": null, "length": 2539}
{"pred": "                   LogManager.GetCurrentClassLogger().Error(\"Error initializing performance counter target: {0}\", ex.Message);\n                }\n            }\n        }\n    }\n}\n#endif", "answers": ["                    if (LogManager.ThrowExceptions) throw ex;"], "all_classes": null, "length": 849}
{"pred": "           name,checksum = checksums.get(block=False)\n            assert os.path.isfile( pjoin( cfg.webdav_backend_directory, name) )\n            with open(pjoin( cfg.webdav_backend_directory, name), \"rb", "answers": ["            name, checksum = checksums.get(block=False)"], "all_classes": null, "length": 599}
{"pred": "   self.stack_count = stac + pseudop.stack_effect()\n    self.labels = {}\n    self.compiler = compiler\n    self.stack_count = 0\n    return self\ndef __init__(self, compiler):\n    self = StackCounter(compiler)\n", "answers": ["        dest = args[0]"], "all_classes": null, "length": 655}
{"pred": "\n\t\t\tif file_len > 0:\n\t\t\t\tresult.append(self.data[ofs:ofs+len])\n\t\t\t\tlen = 0\n\t\t\t\tofs += len\n\t\t\t\tcontinue\n\t\t\telse:\n\t\t\t", "answers": ["\t\t\t\tresult += [DATA_ORIGINAL] * mem_len"], "all_classes": null, "length": 1032}
{"pred": "\t\t\tString macroName = value.substring(startIndex + 2, value.indexOf(\"}\", startIndex));\n\t\t\tString macroValue = macroHandler.getMacroValue(macroName);\n\t\t\tif (macroValue == null) {\n\t\t\t\tthrow", "answers": ["\t\t\tStringBuffer result = new StringBuffer();"], "all_classes": null, "length": 3860}
{"pred": "     elements.add(new ASN1Boolean(false));\n    }\n    elements.add(new ASN1Boolean(includeAuthZEntry));\n    if ((attributes != null) && ! attributes.isEmpty())\n    {\n      final ArrayList<ASN1Element> attrs = new ArrayList", "answers": ["      elements.add(new ASN1Boolean(TYPE_INCLUDE_AUTHN_ENTRY, false));"], "all_classes": null, "length": 1468}
{"pred": "\t\tif(beans == null)\n\t\t\treturn coll;\n\t\tfor(int i = 0; i < beans.length; i++)\n\t\t{\n\t\t\tcoll.add(beans[i].buildVo());\n\t\t}\n\t\treturn coll;\n", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 773}
{"pred": "\t\t\treturn EmptyIterator.getInstance();\n\t\t}\n\t}\n}\n\nI'm trying to add a method to get previously connected devices by reading the SharedPreferences. However, I'm getting an error that the method getAll() is not defined for the SharedPreferences class", "answers": ["\t\t\treturn new EmptyIterator<String>();"], "all_classes": null, "length": 526}
{"pred": "           StreamSerializerDelegate responseStreamWriter;\n            if (this.ContentTypeSerializers.TryGetValue(contentType, out responseStreamWriter) ||\n                this.ContentTypeSerializers.TryGetValue(ContentType.GetRealContentType(contentType), out responseStreamWriter))\n           ", "answers": ["            var serializer = GetResponseSerializer(contentType);"], "all_classes": null, "length": 488}
{"pred": "           launchUrl(createUrl(CallNumber.ToString(), ContactTypes.Account, CallNumber.ToString()));\n        }\n    }\n    public void ShowCaseRecord(Guid CaseNumber)\n    {\n        if (serviceProxy == null)\n            throw new ApplicationException(LocalizedResourceManager.", "answers": ["            string CallNumberGuid = CallNumber.ToString();"], "all_classes": null, "length": 648}
{"pred": "       width = Integer.parseInt(text.substring(nextToken + 6));\n    }\n}", "answers": ["        text = text.substring(nextToken + 7);"], "all_classes": null, "length": 772}
{"pred": "     }\n    }\n  }\n}\nThe code above is incomplete. The next line of code is missing. It should be something like:\ni2 = i1 + i16;\nThis line of code is used to update the index i2, which is used to access elements of", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "               int index = constraintEntry.indexOf(':');\n                String keyAlgorithm = null;\n                String constraint = null;\n                if (index > 0) {\n                    keyAlgorithm = constraintEntry.substring(0, index);\n                    constraint = constraintEntry.substring", "answers": ["                if (debug != null) {"], "all_classes": null, "length": 983}
{"pred": "     ProxyInfo proxyInfo = (ProxyInfo) proxyCell.getUserObject();\n      UnitInfo unitInfo =\n         (UnitInfo) deviceCell.getChild(proxyInfo.getUnitNumber()).getUserObject();\n      int sourcePortIndex = proxyCell.getPortCount() - ", "answers": ["      ProxyInfo proxy_info = (ProxyInfo) proxyCell.getUserObject();"], "all_classes": null, "length": 2936}
{"pred": "               object obj = this.ViewState[\"SubmitText\"];\n                return (obj == null) ? true : (bool)obj;\n            }\n            set\n            {\n                this.ViewState[\"SubmitText\"] = value;\n            }\n        }\n        /// <summary", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "\n# Create a new TrackCollection and add some tracks to it.\ncollection = TrackCollection()\ncollection.add(TrackFile('test1.mp3', 'Artist1', 'Album1', 1, 1, 2000))\ncollection.add(TrackFile('", "answers": ["                for song in self.collection[artist][album]:"], "all_classes": null, "length": 826}
{"pred": "       SecurityManager sm = System.getSecurityManager();\n        if (sm != null)\n            sm.checkPermission(SecurityConstants.GET_CLASSLOADER_PERMISSION);\n    }\n    /**\n     * Checks that the given function does not map a module to the platform\n    ", "answers": ["        SecurityManager sm = System.getSecurityManager();"], "all_classes": null, "length": 3987}
{"pred": "\t\t\t\tSetOrderStatus(order, OrderStatus.Complete, true);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tSetOrderStatus(order, OrderStatus.Processing, false);\n\t\t\t}\n\t\t}\n\t\t/// <", "answers": ["\t\t\t\torder.ShippingStatusId = (int)ShippingStatus.Delivered;"], "all_classes": null, "length": 5265}
{"pred": "       AutoNumberingScheme autoNumberingScheme = new AutoNumberingScheme();\n        autoNumberingScheme.initialize();\n        autoNumberingScheme.setName(schemeName);\n        autoNumberingScheme.setClassName(schemeClassName);\n        autoNumberingScheme.setFormatName(formatName", "answers": ["        AutoNumberingScheme ans = new AutoNumberingScheme();"], "all_classes": null, "length": 5629}
{"pred": "\t\t\tAssert.That (Read<int> ().SingleOrDefault (), Is.EqualTo (0));\n\t\t}\n\t\t[Test]\n\t\tpublic void SingleOrDefault_SourceWithOneElement_ReturnsSingleElement ()\n\t\t{\n\t\t\tvar source = Read", "answers": ["\t\t\tvar source = Read<int> ();"], "all_classes": null, "length": 5586}
{"pred": "\t\t\t\t\tArrayList<String> valuesList = new ArrayList<String>();\n\t\t\t\t\tArrayList<String> domainsList = new ArrayList<String>();\n\t\t\t\t\tfor (int i = 0; i < tempValues.length; i++) {\n\t\t\t\t", "answers": ["\t\t\t\t\tArrayList<String> valuesList = new ArrayList<String>();"], "all_classes": null, "length": 4724}
{"pred": "       return self._conf_helper('sp', options)\n    def _create_devs(self):\n        self.crdg = scpiDevice(getstr='CRDG?', str_type=float)\n        self.enabled_list = MemoryDevice(['A', 'B", "answers": ["        if dev_obj == self.fetch:"], "all_classes": null, "length": 4119}
{"pred": "   if (!success) {\n      throw new RunnerException(_(\"Upload failed\"));\n    }\n    // upload the data\n    //\n    uploader = new FileUploader();\n    success = uploader.uploadUsingPreferences(dataFolder,\n                                               suggestedClassName,\n                                ", "answers": ["    return success ? suggestedClassName : null;"], "all_classes": null, "length": 6878}
{"pred": "           Workplane().box(1,1,1).edges().fillet(0.1)\n        \"\"\"\n        solidRef = self.findSolid()\n        edges = self.edges()\n        if len(edges) < 1:\n            raise ValueError(\"Fillet requires at least", "answers": ["            s = Workplane().box(1,1,1).faces(\"+Z\").edges().fillet(0.1)"], "all_classes": null, "length": 4053}
{"pred": "       self.dmpProcessFIFOPacket()\n\nclass MPU6050_DMP(MPU6050):\n    dmpMemory = MPU6050.dmpMemory\n    dmpConfig = MPU6050.dmpConfig\n", "answers": ["            fifoCount = self.getFIFOCount()"], "all_classes": null, "length": 6204}
{"pred": "\tfor name in names['names']:\n\t\titem = frappe.get_doc(\"Item\", name)\n\t\tpdf = get_pdf(item, \"Item\", \"item_pdf\")\n\t\tpdfkit.from_buffer(pdf, \"item_%s.pdf\"", "answers": ["\t\tnames = names['names']"], "all_classes": null, "length": 4346}
{"pred": "\t\t\t\twhile (itHistory.hasNext()) {\n\t\t\t\t\tFLRHistory history = (FLRHistory) itHistory.next();\n\t\t\t\t\tObject[] oZeile = new Object[ProjektReportFac.REPORT_PROJEKT_", "answers": ["\t\t\t\twhile (itHistory.hasNext()) {"], "all_classes": null, "length": 4200}
{"pred": "               list.Add(1073493); // Not part of a set\n            }\n        }\n        public override void GetProperties(List<string> list)\n        {\n            base.GetProperties(list);\n            if (OwnerName != null)\n               ", "answers": ["                list.Add(1072378); // <br>Only when full set is present:\t\t\t\t"], "all_classes": null, "length": 6963}
{"pred": "        sb.append(\"u\");\n         sb.append((char) ('a' + (d - 10)));\n      }\n      int e = (c >> 8) & 0xf;\n      if (e < 10) {\n         sb.append((char)", "answers": ["         sb.append((char) ('a' + d - 10));"], "all_classes": null, "length": 4005}
{"pred": "\t\t\tswitch (type)\n\t\t\t{\n\t\t\t\tcase PacketTypes.PlayerInfo:\n\t\t\t\t\tGetDataHandlers.OnPlayerInfo(e);\n\t\t\t\t\tbreak;\n\t\t\t\tcase PacketTypes.PlayerChat:\n", "answers": ["\t\t\tvar player = Players[e.Msg.whoAmI];"], "all_classes": null, "length": 4973}
{"pred": "       if (organizationId == null) {\n            throw new ApiException(\"Missing the required parameter 'organizationId' when calling listOrganizationPublicTransportStops(Async)\");\n        }\n        \n        // create path and map variables\n        String localVarPath = \"/organizations/{organization", "answers": ["        if (organizationId == null) {"], "all_classes": null, "length": 5074}
{"pred": "           X           -   array[0..N-1] - array of quadrature nodes,\n                            in ascending order.\n            W           -   array[0..N-1] - array of quadrature weights.\n          -- ALGLIB --\n             Copyright 12.0", "answers": ["            X           -   array[0..N-1] - array of quadrature nodes,"], "all_classes": null, "length": 4527}
{"pred": "           'deleting_user', parent, category_queue[0],\n            fields={'display_name': 'test_subtree_%s' % len(category_queue)},\n        )\n        self.create_subtree_for_deletion(node, category_queue[", "answers": ["            'deleting_user', parent.version_agnostic(), category_queue[0]"], "all_classes": null, "length": 4289}
{"pred": "                                       + \"10^\" + Math.abs(i));\n                                }\n                                else {\n                                    if (this.expTickLabelsFlag) {\n                                        //create \"1e#\"-type label\n                                        tickLabel = (((i", "answers": ["                                            + \"10^\" + Math.abs(i));"], "all_classes": null, "length": 4434}
{"pred": "               .map(PushedAsset::getIdentifier)\n                .collect(Collectors.toList());\n        assertEquals(newBundlePushedAssets, list(htmlPageAsset.getIdentifier()));\n    }\n    /**\n     * Method to Test: {@link DependencyBund", "answers": ["                .map(pushedAsset -> pushedAsset.getEnvironmentId())"], "all_classes": null, "length": 6390}
{"pred": "       String nodeId = createTextFile(getMyNodeId(), \"testFile\" + RUNID + \".txt\", content).getId();\n        // Create shared link with 'include=path'\n        Map<String, String> body = new HashMap<>();\n        body.put(\"nodeId\",", "answers": ["        String fileName1 = \"fileOne_\" + RUNID + \".txt\";"], "all_classes": null, "length": 4714}
{"pred": "           if (obj instanceof Number) {\n                return true;\n            }\n        } catch (NumberFormatException e) {\n            // expected\n        }\n        return false;\n    }\n    @Test\n    public void testIsLong() {\n        assertFalse(\"isLong(", "answers": ["            if (obj == null) {"], "all_classes": null, "length": 4128}
{"pred": "                               if (grapple.DockUid != part.Uid)\n                                {\n                                    Syntax.Warning(part, \"Part not attached or grappled by parent grappling part: \" + grapple);\n                                    Syntax.Warning(grapple,", "answers": ["                                if (grapple.DockUid != part.Uid)"], "all_classes": null, "length": 4169}
{"pred": "       if replace:\n            self.unlink(cr, uid, [self.read(cr, uid, [self._get_id(cr, uid, model, xml_id)], ['id'])[0]['id']])\n        if xml_id:\n            self._update(", "answers": ["            ir_values_obj = pooler.get_pool(cr.dbname).get('ir.values')"], "all_classes": null, "length": 4578}
{"pred": "           return actionTL.getVolatile() == SYNCHRONIZE_CODE;\n        }\n        @Uninterruptible(reason = \"Called from uninterruptible code.\", mayBeInlined = true)\n        public static void setSynchronizeCode() {\n            actionTL.", "answers": ["            return actionTL.getVolatile() == SYNCHRONIZE_CODE;"], "all_classes": null, "length": 4390}
{"pred": "\t\t\tlong size = lgetxattr (path, name, value, 0);\n\t\t\tif (size <= 0)\n\t\t\t\treturn size;\n\t\t\tvalue = new byte [size];\n\t\t\treturn lgetxattr (path, name,", "answers": ["\t\t\tlong size = lgetxattr (path, name, value, 0);"], "all_classes": null, "length": 6868}
{"pred": "\t\t\t\tsuper(id, path, width, height);\n\t\t\t}\n\t\t}\n\t\tprivate Images()\n\t\t{\n\t\t\tAlert = new ImageHelper(102101, \"/ims/images/icons/alert.gif\", new Integer(", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "       byte[] ALPHABET = getAlphabet( options );\n        byte[] encoded = new byte[getEncodedLengthWithoutPadding(len)];\n        int index = 0;\n        int i = 0;\n        int j = 0;\n        int inBuff = ", "answers": ["        if( source == null ){"], "all_classes": null, "length": 5175}
{"pred": "\t\t\t\tnew ColumnInfo (\"IsCaseSensitive\", typeof(bool)),\n\t\t\t\tnew ColumnInfo (\"IsFixedLength\", typeof(bool)),\n\t\t\t\tnew ColumnInfo (\"IsNullable\", typeof(bool)),\n\t\t\t\tnew ColumnInfo (\"IsReadOnly\", typeof(", "answers": ["\t\t\t\tnew ColumnInfo (\"IsCaseSensitive\", typeof(bool)),"], "all_classes": null, "length": 4122}
{"pred": "\t\t\t\tu3 = u1;\n\t\t\t\tu1 = q[0];\n\t\t\t\tv3 = v3.Subtract(q[1]);\n\t\t\t\tv1 = v1.Subtract(u1.Multiply(q[1", "answers": ["\t\t\t\tBigInteger tn = u1.Subtract(v1.Multiply(q[0]));"], "all_classes": null, "length": 5148}
{"pred": "\t\t\t\tif (_abi_info == null) {\n\t\t\t\t\t_abi_info = new GLib.AbiStruct (\"GstMessage\", typeof (Message), new IntPtr[] {\n\t\t\t\t\t\t\tnew IntPtr (0),\n\t\t\t\t", "answers": ["\t\t\t\tif (_abi_info == null)"], "all_classes": null, "length": 4205}
{"pred": "               if (name.endsWith(\".xmi\")) {\n                    Configuration.setString(\n                            PersistenceManager.KEY_PROJECT_NAME_EXTENSION,\n                            \".xmi\");\n                } else {\n                    Configuration.setString(\n                            Pers", "answers": ["                if (!name.endsWith(\".\" + filter.getExtension())) {"], "all_classes": null, "length": 5940}
{"pred": "               5: SortableHeader('Outline', False, '', 'col-center'),\n                6: SortableHeader('Script', False, '', 'col-center'),\n                7: SortableHeader('Slide', False, '', 'col-center'),\n                8: SortableHeader('Video", "answers": ["                5: SortableHeader('Outline', False, '', 'col-center'),"], "all_classes": null, "length": 4072}
{"pred": "           string[][] ss11 = new string[][] { s111, s112 };\n            string[] s121 = new string[] { \"hello\"};\n            string[][] ss12 = new string[][] { s121 };\n            string[][]", "answers": ["            string[][] ss11 = new string[][] { s111, s112 };"], "all_classes": null, "length": 4165}
{"pred": "=====================\n    return ValidationError(\n        message=opts.error_messages['unique'],\n        code='unique',\n        params=params\n    )\n    # A unique_together constraint\n    else:\n        field_names = [six.text_type(capfirst", "answers": ["            field = opts.get_field(unique_check[0])"], "all_classes": null, "length": 4513}
{"pred": "# write parameter values\nparamout = open(\"list_param.out\",\"w\")\n#~ for key, value in sorted(paramtestdic.iteritems()):\n#~ paramout.write(\"%-3s \\t %.5f\\n\" % (key,value))\n#", "answers": ["            for key, value in sorted(paramtestdic.iteritems()):"], "all_classes": null, "length": 4363}
{"pred": "# This is a placeholder for the actual implementation of the\n# checksum verification.\n# The actual implementation will be done in the changegroup\n# unpacker.\n#\n# The following code is a placeholder for the actual implementation\n# of the checksum verification.\n#\n# The actual implementation", "answers": ["    while len(h) == 20:"], "all_classes": null, "length": 4561}
{"pred": "       if(contentPaneStyle.getBorder() != null) {\n            prefWidth = Math.max(contentPaneStyle.getBorder().getMinimumWidth(), prefWidth);\n            prefHeight = Math.max(contentPaneStyle.getBorder().getMinimumHeight(), prefHeight);\n       ", "answers": ["        prefWidth = Math.min(prefWidth, width);"], "all_classes": null, "length": 6347}
{"pred": "=====================\n\nclass Workflows:\n    \"\"\"Workflow container class\"\"\"\n    cell2dialog = {}  # Stores active chart dialogs\n\n    def __init__(self, main_window):\n        self.main_window = main_window\n\n    @contextmanager\n", "answers": ["        cas = literal_eval(cas_data_str)"], "all_classes": null, "length": 5088}
{"pred": "\t\t\t\t\tpixel = cursor_mask.GetPixel (x, y);\n\t\t\t\t\tif (pixel == mask_pixel) {\n\t\t\t\t\t\tcursor_bits [y * (width / 8) + x / 8] |= (byte)(1 <<", "answers": ["\t\t\t\t\tpixel = cursor_bitmap.GetPixel(x, y);"], "all_classes": null, "length": 6831}
{"pred": "\t\t\tfor(int i=0;i<listWebSchedOpNums.Count;i++) {\n\t\t\t\tOperatory operatory=Operatories.GetOperatory(listWebSchedOpNums[i]);\n\t\t\t\tDateTime dateLastAppointment=", "answers": ["\t\t\tList<DateTime> listUniqueDays=new List<DateTime>();"], "all_classes": null, "length": 4064}
{"pred": "       rc = sqlite3Collate( pColl, pMem1.z, pMem1.n, pMem2.z, pMem2.n );\n        return rc;\n      }\n      /* If one value is a blob and the other is a string, the blob is greater", "answers": ["        pMem1.enc == SQLITE_UTF16LE || pMem1.enc == SQLITE_UTF16BE );"], "all_classes": null, "length": 5688}
{"pred": "                       data.PowerRegenFlatModifier[i] = packet.ReadSingle(\"PowerRegenFlatModifier\", indexes, i);\n                    }\n                    if (changesMask[130 + i])\n                    {\n                        data.PowerRegenInterruptedFl", "answers": ["                        data.MaxPower[i] = packet.ReadInt32(\"MaxPower\", indexes, i);"], "all_classes": null, "length": 4140}
{"pred": "       seq = seqs[nidx]\n        seqarr = np.array(list(seq))\n        # enter each SNP \n        for snp in self.locsnps[:, 1]:\n            # in case multiple consens were merged in step 6 of this sample\n           ", "answers": ["        seq = self.seqs[nidx]"], "all_classes": null, "length": 7755}
{"pred": "           Index index = indexByTagAndClass[tag][allClasses.indexOf(classRef)];\n            if (index == null) {\n                index = new Index(tagName(tag)+\"/\"+classRef.stringValue(), new Entry[0]);\n                indexByTagAnd", "answers": ["            Index[] perClassIndexes = indexByTagAndClass[tag];"], "all_classes": null, "length": 5112}
{"pred": "           this.quoteLabel.Size = new System.Drawing.Size(126, 13);\n            this.quoteLabel.TabIndex = 1;\n            this.quoteLabel.Text = \"\\\"\";\n            this.quoteLabel.TextAlign = System.Drawing.ContentAlignment.", "answers": ["            this.quoteLabel.Size = new System.Drawing.Size(46, 16);"], "all_classes": null, "length": 4569}
{"pred": "           data['rrule_type'] = rrule_type[rule._freq - 1]\n            data['interval'] = rule._interval\n            data['count'] = rule._count\n            data['end_type'] = rule._until\n            if rule._until:\n                data", "answers": ["            data['rrule_type'] = rrule_type[rule._freq]"], "all_classes": null, "length": 4433}
{"pred": "               // Copy the decoded row to the output stream\n                fout.Write(curr, 0, bytesPerRow);\n                // Copy the decoded row to the previous row\n                Array.Copy(curr, 0, prior, 0, bytesPerRow);\n", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "     get { return DefaultInstance; }\n    }\n    \n    protected override ReportRefundRequest ThisMessage {\n      get { return this; }\n    }\n    \n    public static pbd::MessageDescriptor Descriptor {\n      get { return global::bnet.protocol.exchange_", "answers": ["      get { return DefaultInstance; }"], "all_classes": null, "length": 5791}
{"pred": "                       AApAnalAttribRow AnalAttribRow = MainDs.AApAnalAttrib.NewRowTyped();\n                        AnalAttribRow.LedgerNumber = MainDs.AApDocument[0].LedgerNumber;\n                        AnalAttribRow.BatchNumber = MainDs", "answers": ["                        AApDocumentDetailRow DetailRow = (AApDocumentDetailRow)rv.Row;"], "all_classes": null, "length": 5677}
{"pred": "\t\t\t\tif (Owner is PlayerMobile)\n\t\t\t\t{\n\t\t\t\t\tPlayerMobile pm = Owner as PlayerMobile;\n\t\t\t\t\tif (pm.CanCarryItems)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (", "answers": ["\t\t\t\tif (RewardItem != null)"], "all_classes": null, "length": 4101}
{"pred": "\t            return lastItemIndex - firstItemIndex + 1;\n\t        }\n\t    }\n\t    public bool ContainsKey(TKey key)\n\t    {\n\t        int index = global::System.Array.BinarySearch(items, key, this);\n\t        return", "answers": ["\t            return lastItemIndex - firstItemIndex + 1;"], "all_classes": null, "length": 5727}
{"pred": "               ArgumentPanel.AutoSize = false;\n                ArgumentPanel.Size = new Size(100, 22);\n                ArgumentPanel.BackColor = System.Drawing.Color.Transparent;\n                ArgumentPanel.Tag = CommonTagString.ARGUMENTPANEL", "answers": ["                if (AControlLabel != null)"], "all_classes": null, "length": 7766}
{"pred": "\t\t\treturn Unique(target, null);\n\t\t}\n\t\t/// <summary>\n\t\t/// Returns a new list containing only the unique elements of the target collection, preserving the order.\n\t\t/// The specified <see cref=\"IEqualityComparer{T}\"/>", "answers": ["\t\t\treturn Unique(target, null);"], "all_classes": null, "length": 4367}
{"pred": "# Define a function to print the dynamic section.\ndef print_dyn(dyn):\n    print(\"Dynamic section:\")\n    for i in range(dyn.shdr.size // dyn.shdr.entsize):\n        d = dyn.get_entry(i)\n        print(\"", "answers": ["DT_PPC64_OPD    = (DT_LOPROC + 1)"], "all_classes": null, "length": 6803}
{"pred": "               html.WriteLine(\"      table { width: 100%; }\");\n                html.WriteLine(\"      </style>\");\n                html.WriteLine(\"      <link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"styles.css\\\" />\");\n                html.WriteLine", "answers": ["                html.WriteLine(\"      table { width: 100%; }\");"], "all_classes": null, "length": 5413}
{"pred": "\t\t\tWriteReport(buff);\n\t\t\tif(!mReadDone.WaitOne(1000, false))\n\t\t\t\tthrow new WiimoteException(\"Error reading data from Wiimote...is it connected?\");\n\t\t\tArray.Copy(mReadBuff", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "                   sd[node.split_dim] = np.abs(node.split - x[node.split_dim])\n                    min_distance = min_distance - side_distances[node.split_dim] + sd[node.split_dim]\n                else:\n", "answers": ["                    sd[node.split_dim] = np.abs(node.split - x[node.split_dim])"], "all_classes": null, "length": 5233}
{"pred": "\t\tassertEquals(acn, rules.formatGame(game, Locale.ENGLISH));\n\t}\n\t@Test\n\tpublic void knightFirst2()\n\t{\n\t\tString acn = \"1. Nf3\";\n\t\tGame game = game(null,", "answers": ["\t\tassertEquals(acn, rules.formatGame(game, Locale.ENGLISH));"], "all_classes": null, "length": 4129}
{"pred": "   catch(InvalidRelationException e)\n    {\n      return null;\n    }\n    catch(NullPointerException e)\n    {\n      return null;\n    }\n    return null;\n  }\n  /**\n   *  Draw the base selection rectangle.\n   **", "answers": ["    catch (InvalidRelationException e){}"], "all_classes": null, "length": 7770}
{"pred": "\t\t\t\t\tstring str = reader.ReadString();\n\t\t\t\t\tType type = Type.GetType(str);\n\t\t\t\t\tif (type != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tm_arSpellDefense.Add(", "answers": ["\t\t\t\t\tstring str = reader.ReadString();"], "all_classes": null, "length": 5717}
{"pred": "\t\t\t\t\t\t\t\tif(newsector != null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t// Add the new sector to the map\n\t\t\t\t\t\t\t\t\tGeneral.Map.Map.AddSector(", "answers": ["\t\t\t\t\t\t\t\tif(newsector == null) return false;"], "all_classes": null, "length": 5677}
{"pred": "       doc = Document.objects.get(locale=document_locale,\n                                   slug=document_slug,\n                                   parent=parent_doc)\n    except Document.DoesNotExist:\n        # If the translation already exists, redirect to it.\n        if Document.", "answers": ["        doc = parent_doc.translations.get(locale=document_locale)"], "all_classes": null, "length": 4854}
{"pred": "               lDummyHeights[i] = lNewMaxRows;\n            }\n            \n            // now we'll create a new table with the new dimensions\n            lNewWidths = new float[lTotalColumns];\n            for (j=0; j < lTotalColumns;", "answers": ["                lDummyHeights [i] = lNewMaxRows;"], "all_classes": null, "length": 5053}
{"pred": "\t\t\t\t\t\treferenceNode.AddLinkTo( GetReferenceNode( script ) );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn referenceNode;\n\t\t}\n\t\tprivate ReferenceNode SearchBlendTree( Object unityObject )\n\t\t{\n\t", "answers": ["\t\t\t\t\t\treferenceNode.AddLinkTo( GetReferenceNode( script ) );"], "all_classes": null, "length": 4267}
{"pred": "\t\t\t\t\t\tif (trait != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tnode.Value.Nodes.Add(new MiniYamlNode(\"InvulnerabilityUpgrade@EXPERIENCE\", new MiniYaml(\"\")));\n\t\t\t", "answers": ["\t\t\t\t\t\tif (trait != null)"], "all_classes": null, "length": 5181}
{"pred": "\ndef test_sorted_list():\n    \"\"\"Test sorted list implementation.\"\"\"\n    sl = SortedList([1, 2, 3, 4, 5])\n    print(sl)\n    sl.add(6)\n    print(sl)\n    sl.update", "answers": ["        return self.__class__(values, key=self._key)"], "all_classes": null, "length": 7674}
{"pred": "# The following code is used to implement the \"identity map\" feature of the ORM.\n# It is used to ensure that when an object is loaded from the database, it is\n# not reloaded again, and that all subsequent operations on the object are\n# performed against the same database state.\n", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "                   else if (this.RequiredRace == Race.Gargoyle)\n                        from.SendLocalizedMessage(1111707); // Only gargoyles can wear this.\n                    else\n                        from.SendMessage(\"Only {0} may use this", "answers": ["                    else if (this.RequiredRace == Race.Gargoyle)"], "all_classes": null, "length": 4125}
{"pred": "\t\t\t\t// TODO: Add more values here\n\t\t\t\treturn new List<syspalvalue>(new[]\n\t\t\t\t{\n\t\t\t\t\tnew syspalvalue { @class = \"ASPS\", value = 1, name = \"SAFE_ACCESS\" },", "answers": ["\t\t\t\tnew syspalvalue { @class = \"LEOP\", value = 0, name = \"TABLE\" },"], "all_classes": null, "length": 7135}
{"pred": "       if (emails == null) {\n            return;\n        }\n        for (int i = 0; i < emails.length(); i++) {\n            JSONObject email = emails.getJSONObject(i);\n            JSONArray emailTypes = email.optJSONArray(\"type\");", "answers": ["        if (emails == null) {"], "all_classes": null, "length": 4282}
{"pred": "           return ToJson(result);\n        }\n        private void CleanupFiles(object sender, EventArgs e)\n        {\n            foreach (string file in cleanupFiles)\n                if (File.Exists(file))\n                    File.Delete(file);\n        }\n        private", "answers": ["            if (Diff.Count > 0 && DiffMode)"], "all_classes": null, "length": 4201}
{"pred": "\t\t\tblock = new byte[last + BZip2Constants.NUM_OVERSHOOT_BYTES + 2];\n\t\t\tquadrant = new int[last + BZip2Constants.NUM_OVERSHOOT_BYTES + 1];\n\t", "answers": ["\t\t\tint n = BZip2Constants.baseBlockSize * blockSize100k;"], "all_classes": null, "length": 5391}
{"pred": "                       int x = args[1] + (Camera.CurrentPosition.X & 7);\n                        int y = args[2] + ScreenTop;\n                        for (int i = 0; i < _actors.Length; i++)\n                        {\n                            var", "answers": ["                        var a = Actors[args[1]];"], "all_classes": null, "length": 4518}
{"pred": "                   iFile.close();\n                }\n            }\n            catch (final ObjectStoreException ex)\n            {\n                ex.printStackTrace();\n                throw ex;\n            }\n            catch (final Exception ex)\n            {\n                ex.printStackTrace();\n               ", "answers": ["                    if (iFile != null)"], "all_classes": null, "length": 4288}
{"pred": "\t\t\ttrackError += trackSegmentError ;\n\t\t}\n\t\treturn trackError ;\n\t}\n\t/**\n\t * Finds a simpler track path with the minimum possible amount of linear sub-segments for which none of the discarded track points is more than <b>accuracy", "answers": ["\t\t\tif (trackSegmentError > trackError)"], "all_classes": null, "length": 5623}
{"pred": "\t\t\t\t\"    <A(), System.ParamArrayAttribute()>  _{0}\" +\n\t\t\t\t\"    Function Something(<C(A1:=false, A2:=true), D()> ByVal value As Object, <E()> ByRef __exception As", "answers": ["\t\t\t\t\"    {0}\" +"], "all_classes": null, "length": 5620}
{"pred": "                   CollisionObjects = new[] { CollisionObjectTypes.Champions, CollisionObjectTypes.YasuoWall },\n                });\n            #endregion Jhin\n            #region Jinx\n            Spells.Add(\n                new SpellData\n                {\n                   ", "answers": ["                    ExtraMissileNames = new[] { \"JhinRShotMis4\" },"], "all_classes": null, "length": 4463}
{"pred": "                           newHouse.MoveToWorld(m_House.Location, m_From.Map);\n                            m_House.Delete();\n                            m_From.SendMessage(\"Your house has been replaced with a new one.\");\n                        }\n                    }\n               ", "answers": ["                            if (m_House.MovingCrate != null)"], "all_classes": null, "length": 5532}
{"pred": "\t\tplotID++;\n\t\tplot = new Plot(plotID, getFirstString(), getLastString(), getFirstArg(), getLastArg());\n\t\tplot.setVisible(false);\n\t\tIJ.getInstance().setPlot(plot);\n\t}\n\tvoid addTo", "answers": ["\t\tString title = getFirstString();"], "all_classes": null, "length": 5653}
{"pred": "           if widgetName:\n                keyboard = xbmc.Keyboard( widgetName, xbmc.getLocalizedString(528), False )\n                keyboard.doModal()\n                if ( keyboard.isConfirmed() ):\n                    widgetName = keyboard.getText()", "answers": ["                        widgetTempName = xbmc.getInfoLabel(widgetName)"], "all_classes": null, "length": 6955}
{"pred": "       return encodeBytesToBytes( source, 0, source.length, NO_OPTIONS );\n    }\n    \n    /**\n     * Encodes a byte array into Base64 notation.\n     * <p>\n     * Example options:<pre>\n     *   GZ", "answers": ["        byte[] encoded = null;"], "all_classes": null, "length": 5023}
{"pred": "           mnem[ishr] = \"ishr\";\n            mnem[lshr] = \"lshr\";\n            mnem[iushr] = \"iushr\";\n            mnem[lushr] = \"lushr\";\n            mnem[iand", "answers": ["            mnem[ishr] = \"ishr\";"], "all_classes": null, "length": 6113}
{"pred": "=====================\n\ndef main():\n    '''\n    This is the entry point for the module.  It is responsible for\n    parsing the arguments, setting up the module, and then invoking\n    the module's logic.\n    '''\n    argument_spec = dict(\n       ", "answers": ["            umask = os.umask(0)"], "all_classes": null, "length": 7132}
{"pred": "\t\t\t\t\tfor (int i = 0; i < Menus [selected].Children.Length; i++){\n\t\t\t\t\t\tMenuItem m = Menus [selected].Children [i];\n\t\t\t\t\t\tif (m == null)\n\t\t\t\t\t", "answers": ["\t\t\t\t\tforeach (var mi in Menus [selected].Children){"], "all_classes": null, "length": 7643}
{"pred": "       if (lastScanOffset + pixelStride > data.length) {\n            // integer overflow\n            throw new RasterFormatException(\"Incorrect data size: \"\n                    + data.length);\n        }\n    }\n}", "answers": ["        int lastPixelOffset = (width - 1) * pixelStride;"], "all_classes": null, "length": 4323}
{"pred": "   def get_used_mem(self):\n        \"\"\"\n        Return the amount of memory used by the VM.\n        :return: amount of memory used by the VM (MB)\n        \"\"\"\n        if self.is_dead():\n            logging.error(\"Could not get memory usage from", "answers": ["        shm = int(open(filename).read().split()[2])"], "all_classes": null, "length": 7764}
{"pred": "   # TODO(emfree): This is a hack to allow the client to specify the\n    # maximum number of messages to return in a single request.\n    # This is necessary for the client to be able to handle the\n    # response, but it's not a good solution.\n    #", "answers": ["    exclude_types = args.get('exclude_types')"], "all_classes": null, "length": 4956}
{"pred": "   # This field is used to store the last time the enrollment was updated.\n    # We'll use this to determine if the enrollment needs to be updated when\n    # a user visits a course.\n    last_updated = models.DateTimeField(auto_now=True, db_", "answers": ["    objects = CourseEnrollmentManager()"], "all_classes": null, "length": 4276}
{"pred": "   system_id = self.get_system_id(system)\n    if not system_id:\n        continue\n    self.client.system.removeCustomValues(self.session,\n                                          system_id,\n                                          keys)\n####################\ndef help_system", "answers": ["        system_id = self.get_system_id(system)"], "all_classes": null, "length": 5050}
{"pred": "# Define a function that takes a list of music and returns a list of the first\n# n elements of each music.\ndef take(musics, n):\n    return [music[:n] for music in musics]\n\n# Define a function that takes a list of music and returns a", "answers": ["        'types': ('general-music', 'sequential-music',),"], "all_classes": null, "length": 4888}
{"pred": "\t\t\t\t.Append (string.Join (\"\\n\", Text))\n\t\t\t\t.ToString ();\n\t\t}\n\t\t\n\t\t/// <summary>\n\t\t///    Renders the current instance, encoded in a specified\n\t\t///    ID3v2 version.", "answers": ["\t\t\t\t.Append (base.ToString ()).ToString ();"], "all_classes": null, "length": 5367}
{"pred": "               chr.IsColliding = false;\n                // We only need to test the character against the active prims\n                foreach (OdePrim prim in _activeprims)\n                {\n                    if (chr.IsColliding || prim.IsColliding)\n                ", "answers": ["                if (chr.Shell == IntPtr.Zero || chr.Body == IntPtr.Zero)"], "all_classes": null, "length": 6278}
{"pred": "   for t in ts:\n        t.start()\n    # spawn status updater\n    status_updater = StatusUpdater(total_recs, finished_queue)\n    status_updater.start()\n    # wait for all threads to finish\n    if number_threads >", "answers": ["        update_t = StatusUpdater(total_recs, finished_queue)"], "all_classes": null, "length": 6540}
{"pred": "   @api.one\n    @api.depends('price_unit', 'discount', 'invoice_line_tax_id', 'quantity',\n        'product_id', 'invoice_id.partner_id', 'invoice_id.currency_id')\n", "answers": ["        digits= dp.get_precision('Product Price'),"], "all_classes": null, "length": 4978}
{"pred": "\nclass _PopulationAssemblyClass(type):\n    \"\"\"\n    Metaclass for Population and Assembly classes.\n    \"\"\"\n    _assembly_class = None\n    def __new__(cls, name, bases, attrs):\n        if not hasattr(cls, '_assembly_class'):", "answers": ["        data = self.get_data(variables, gather, clear, annotations)"], "all_classes": null, "length": 5678}
{"pred": "               return -value;\n            }\n        };\n    }\n    /**\n     * Creates a boolean negation expression.\n     *\n     * @param operand\n     */\n    public static UnaryExpression not(Expression operand) {\n        return new UnaryExpression(operand)", "answers": ["                Class<? extends Number> type = value.getClass();"], "all_classes": null, "length": 5044}
{"pred": "               });\n            #endregion Lucian\n            #region Lulu\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Lulu\",\n                    SpellName = \"LuluPix\",\n                    Slot = Spell", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "                   \"   NEW: \" + nodeUpdate);\n        }\n        return true;\n    }\n    \n    @Override\n    public void deleteNode(Long nodeId)\n    {\n        Node node = getNodeNotNull(nodeId, true);\n        deleteNodeImpl(nodeId", "answers": ["                    \"   NEW: \" + nodeUpdate);"], "all_classes": null, "length": 6068}
{"pred": "     // Set the dimensions of the line.\n      if (performLayout) {\n        node.layout.measuredDimensions[DIMENSION_WIDTH] = mainDim;\n        node.layout.measuredDimensions[DIMENSION_HEIGHT] = Math.max", "answers": ["      for (i = startOfLineIndex; i < endOfLineIndex; ++i) {"], "all_classes": null, "length": 4941}
{"pred": "\t\t\t\tyAxis.DrawGrid( g, this, scaleFactor, shiftPos );\n\t\t\t\tshiftPos += yAxis._tmpSpace;\n\t\t\t}\n\t\t\tforeach ( Y2Axis y2Axis in _y2AxisList )\n\t\t\t{\n", "answers": ["\t\t\t\tyAxis.DrawGrid( g, this, scaleFactor, shiftPos );"], "all_classes": null, "length": 4173}
{"pred": "           if (info < 0)\n                throw new ILArgumentException(\"qr: an error occoured during decomposition\"); \n            return ret; \n        }\n        /// <summary>\n        /// QR decomposition, returning Q and R\n        /// </summary>\n        /// <", "answers": ["            if (info < 0)"], "all_classes": null, "length": 4728}
{"pred": "               if (c instanceof JTextComponent) {\n                    JTextComponent jtc = (JTextComponent) c;\n                    jtc.setFont(getFont());\n                }\n                super.setPropertiesFromAttributes();\n            }\n        }\n        /**\n        ", "answers": ["                if ((c != null)"], "all_classes": null, "length": 9124}
{"pred": "\t\t\t\tif (c == '\\n') {\n\t\t\t\t\tadvance_line ();\n\t\t\t\t\tif (tokens_seen) {\n\t\t\t\t\t\ttokens_seen = false;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t", "answers": ["\t\t\t\tswitch (c) {"], "all_classes": null, "length": 8996}
{"pred": "   for dep in self.__deps:\n        dep = dep.refDeref(stack, depTools, depSandbox, self.__pathFormatter)\n        if dep.isValid():\n            if dep.isCheckoutStep():\n                checkoutDeps.append(dep)", "answers": ["        depStates = { n : s.copy() for (n,s) in states.items() }"], "all_classes": null, "length": 8648}
{"pred": "           xmlWriter.WriteAttributeString(\"ID\", pane.ID.ToString());\n            xmlWriter.WriteAttributeString(\"EffectiveSize\", new SizeConverter().ConvertToInvariantString(ResizingPanel.GetEffectiveSize(pane)));\n            foreach (DocumentContent content in pane.Items", "answers": ["            if (pane.Items.Count > 1)"], "all_classes": null, "length": 8608}
{"pred": "                       &nbsp;&nbsp;&nbsp;- configuration file \\\"websearch_external_collections_config.py\\\" has %(number_file)s collections\n                        <br /><br /><a href=\"%(site_url)s/admin/websearch/websearchadmin.", "answers": ["                        &nbsp;(<span class=\"warning\">extra: %(diff)s</span>)<br />"], "all_classes": null, "length": 11089}
{"pred": "======================\n\ndef _extract(node, tag, index = 0):\n    \"\"\"Returns the value of the tagged node's attribute or text.\"\"\"\n    if index:\n        return node.getElementsByTagName(tag)[index].firstChild.data\n    else:\n", "answers": ["        if type(text) == int:"], "all_classes": null, "length": 9909}
{"pred": "           if (result != RESULT.OK)\n            {\n                return result;\n            }\n            if (sound == null)\n            {\n                soundnew = new Sound();\n                soundnew.setRaw(soundraw);\n                sound = soundnew;\n           ", "answers": ["            if (result != RESULT.OK)"], "all_classes": null, "length": 14097}
{"pred": "                           desc = escape(desc)\n                        output.write(\"          <field name='%s' type='%s' info='%s'/>\\n\" % (\n                                     field[0], field[1], desc))\n                except:\n                    pass\n           ", "answers": ["                            desc = escape(desc)"], "all_classes": null, "length": 8020}
{"pred": "                     inputSlice[0], inputSlice[1], masterNum)\n      # Adapt the permanences based on the input\n      # TODO: This is a bottleneck. Can we parallelize this?\n      for i in xrange(len(rfActiveInput)):\n        rfActive", "answers": ["                    columnNum // self.coincidencesShape[1],"], "all_classes": null, "length": 8992}
{"pred": "=====================\n\ndef _CheckNodeOnline(lu, node_uuid):\n  \"\"\"Check if a node is online.\n  \"\"\"\n  node_info = lu.rpc.call_node_info(node_uuid, [])\n  if node_info.fail_msg:", "answers": ["        check_nodes = [self.new_node_uuid, self.other_node_uuid]"], "all_classes": null, "length": 8172}
{"pred": "   if isBoolean(vmap, 'action'):\n        complt += '\\t\\t\\t\\t\\t\"--{} {}\"'.format(optionPrefix, vmap['opt']).format(**vmap)\n        if hasDescription(vmap):\n            complt += '", "answers": ["        complt += '\\t\\t\\t\\t\\t-\"'"], "all_classes": null, "length": 8122}
{"pred": "           }\n        }\n        [CommandProperty(AccessLevel.GameMaster)]\n        public int ControlSlots { get { return m_iControlSlots; } set { m_iControlSlots = value; } }\n        [CommandProperty(AccessLevel.GameMaster)]\n        public", "answers": ["                if (m_ControlMaster != null)"], "all_classes": null, "length": 9893}
{"pred": "       if (getParent() != null) {\n            Component parent = getParent();\n            if (!parent.isVisible()) {\n                contains = false;\n            } else {\n                Point p = new Point(x, y);\n                parent.translatePoint(p);\n", "answers": ["        if (contains) {"], "all_classes": null, "length": 10298}
{"pred": "                           if (bmp_mono[n1] > 0)\n                            {\n                                side1 += (float)(x - x1);\n                                hits1++;\n                            }\n                        }\n                        if (y + r < image_height)", "answers": ["                            side1 += bmp_mono[n1];"], "all_classes": null, "length": 8006}
{"pred": "\t\t\t z = new double[3];\n\t\t\t z[0] = 1.0 / 12.0;\n\t\t\t z[1] = 1.0 / 4.0;\n\t\t\t z[2] = 1.0 / ", "answers": ["\t\t\t z = new double[3];"], "all_classes": null, "length": 9193}
{"pred": "\t\t// First, check for reserved SQL in the input row r...\n\t\tdatabaseMeta.quoteReservedWords(fields);\n\t\tString quotedTk = tk != null ? databaseMeta.quoteField(tk) : null;\n\t\tString quotedPk = pk !=", "answers": ["        RowMetaInterface tabFields = getTableFields(tableName);"], "all_classes": null, "length": 9895}
{"pred": "\t\t\tbonusFeats[3] = new String[] {\"IMPROVED NATURAL ARMOR\"};\n\t\t\tspecial.get(4).add(\"Evasion\");\n\t\t\tbonusFeats[4] = new String[] {\"TRACK\"};\n\t\t\t", "answers": ["\t\t\tfeIndex = rand.nextInt(allFE.size());"], "all_classes": null, "length": 8696}
{"pred": "Handles the ``wx.EVT_LEAVE_WINDOW`` event for L{AuiToolBar}.\n:param `event`: a `wx.MouseEvent` event to be processed.        \n\"\"\"\n        \n        self.SetHoverItem(None)\n        self.", "answers": ["        Handles the ``wx.EVT_LEAVE_WINDOW`` event for L{AuiToolBar}."], "all_classes": null, "length": 11431}
{"pred": "           mute = (m != 0);\n            return result;\n        }\n        public RESULT setReverbProperties(ref REVERB_PROPERTIES props)\n        {\n            return FMOD_EventCategory_SetReverbProperties(eventcategoryraw, ref props);", "answers": ["            mute = (m != 0);"], "all_classes": null, "length": 9240}
{"pred": "\tprotected override int QuestId { get { return 519436; } }\n\tprotected override string LQuestDescription { get { return L(\"Walter from the general store and Austeyn from the bank haven't returned their [Borrowed Book from the Library]. Can you please", "answers": ["\tprotected override int QuestId { get { return 519436; } }"], "all_classes": null, "length": 9147}
{"pred": "           try{ ois.close(); } catch( Exception e ){EncogLogging.log(e);}\n        }   // end finally\n        \n        return obj;\n    }   // end decodeToObject\n    \n    \n    \n/* ********  I N P U T  ", "answers": ["            try{ ois.close();  } catch( Exception e ){EncogLogging.log(e);}"], "all_classes": null, "length": 8136}
{"pred": "           if e.nodeType == e.ELEMENT_NODE and e.localName == \"layout\":\n                self.layoutNode = e\n                break\n            else:\n                self.builtWithNoXLF = True\n                log.log(0,\"error\",_", "answers": ["                if e.nodeType == e.ELEMENT_NODE and e.localName == \"layout\":"], "all_classes": null, "length": 8661}
{"pred": "           if((numBits & 0x3F) < 0x20)    // less than 32 bits\n            {\n                //Console.WriteLine(\"sqrt of \" + this.ToString() + \" = \" + this.sqrtHelper(numBits));\n                return this", "answers": ["                numBits = (numBits >> 1) + 1;"], "all_classes": null, "length": 8360}
{"pred": "       idx = node.op.idx_list\n        if isinstance(idx, (tuple, list)):\n            idx = idx[0]\n        if isinstance(idx, slice):\n            idx = idx.indices(node.inputs[0].shape)\n        if all(isinstance(i", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": "```python\n## attribute.h (module 'core'): bool ns3::AttributeAccessor::Set(ns3::ObjectBase * object, ns3::AttributeValue const & attribute) [member function]\ncls.add_method('Set', \n               'bool',\n               [param('ns", "answers": ["                   is_const=True, is_virtual=True, is_pure_virtual=True)"], "all_classes": null, "length": 10722}
{"pred": "                   Node child = body.getNode(0);\n                    if (child instanceof Node.TemplateText) {\n                        templateTextOptimization = true;\n                    }\n                }\n                if (templateTextOptimization) {\n                    out.printin(var", "answers": ["                    Node bodyElement = body.getNode(0);"], "all_classes": null, "length": 9144}
{"pred": "\t\t\t\t\tif (e.Handled)\n\t\t\t\t\t\treturn PreProcessControlState.MessageHandled;\n\t\t\t\t\t\t\n\t\t\t\t\t// If we're not the focused control, we can't handle the key\n\t\t\t\t", "answers": ["\t\t\t\t\tif (PreProcessMessage (ref msg))"], "all_classes": null, "length": 9784}
{"pred": "       if os.path.exists(md_file_path) is False:\n            raise RuntimeError('Pre-processed MD file {0} does not exist.'.format(md_file_path))\n        # load\n        try:\n            md_ws = mantidsimple.", "answers": ["        if os.path.exists(md_file_path) is False:"], "all_classes": null, "length": 9108}
{"pred": "import importlib.abc\nimport importlib.machinery\nimport importlib.util\nimport sys\nimport os\nimport _winreg\nimport _thread\nimport _io\nimport _warnings\nimport _codecs\nimport _abc\nimport _weakref\nimport _functools\n", "answers": ["            package = package.rpartition('.')[0]"], "all_classes": null, "length": 8094}
{"pred": "               GenerateImplicitConversionError(diagnostics, syntax, conversion, expression, targetType, expression.MethodGroup.Method);\n                return;\n            }\n            if (expression.Kind == BoundKind.DynamicObjectInitializerMember)\n            {\n                GenerateImplicitCon", "answers": ["                var methodGroup = (BoundMethodGroup)expression;"], "all_classes": null, "length": 8696}
{"pred": "   search_regx = self.search_terms_to_regex(search_terms, case_sensitive,\n                                            word_bound=r'\\b', extra_space=' ')\n    # This is the same as the above, but it also matches words that have\n   ", "answers": ["            search_reg_str = '\\\\b%s\\\\b' % search_terms.replace(' ',"], "all_classes": null, "length": 11879}
{"pred": "           FvName = self.__Token\n            FvObj = None\n            if self.__IsToken( \"{\"):\n                FvObj = Fv.FV()\n                self.__GetDefineStatements(FvObj)\n                self.__GetBlockStatement(Fv", "answers": ["                if not self.__IsKeyword(\"FV\"):"], "all_classes": null, "length": 10845}
{"pred": " def SourcesPhase(self):\n    sources_phase = self.GetBuildPhaseByType(PBXSourcesBuildPhase)\n    if sources_phase is None:\n      raise ValueError, 'No sources build phase for target %s' % self.Name()\n    return sources_phase\n", "answers": ["      headers_phase = PBXHeadersBuildPhase()"], "all_classes": null, "length": 11459}
{"pred": "   node_data = remote_instance.fetch(url, post={'node_ids': x})\n\n    # Generate DataFrame\n    df = pd.DataFrame(node_data, columns=['node_id', 'x', 'y', 'z'])\n    # Sort if requested\n", "answers": ["    post = {'node_ids[{}]'.format(i): n for i, n in enumerate(x)}"], "all_classes": null, "length": 14106}
{"pred": "                       if (decimalPos >= 0) {\n                            throw new IllegalArgumentException(\"Decimal separator and exponent separator \" +\n                                \"cannot appear together in pattern \\\"\" + pattern + '\"');\n                        }\n                        useExponentialNotation = true;\n                ", "answers": ["                        if (useExponentialNotation) {"], "all_classes": null, "length": 11534}
{"pred": "       BeginBatchUndo(self)\n        Starts a batch undo operation. All following changes will be undoable\n        as a single operation.\n        \"\"\"\n        return _richtext.RichTextCtrl_BeginBatchUndo(*args, **kwargs)\n    def EndBatchUndo", "answers": ["        BeginBatchUndo(self, String cmdName) -> bool"], "all_classes": null, "length": 9452}
{"pred": " exec /usr/sbin/lighthttpd -f -p 80 -n -d /var/www/html\n  \"\"\" % { 'bashrc': os.path.join( self.instancePath, 'bashrc' ) } )\n        fd.close()", "answers": ["  exec lighttpdSvc.sh < /dev/null"], "all_classes": null, "length": 8611}
{"pred": "   if (tractor.getY() - target.getY() == -2) {\n      my = -1;\n    }\n    if (tractor.getY() - target.getY() == 2) {\n      my = 1;\n    }\n    if", "answers": ["    if (tractor.getY() - target.getY() == -2) {"], "all_classes": null, "length": 8405}
{"pred": "       elif state == 'suspended':\n            ret = vms_module.create(\n                entity=vm,\n                result_state=otypes.VmStatus.SUSPENDED if vm is None else None,\n                clone=module.params['clone'],\n", "answers": ["        elif state == 'suspended':"], "all_classes": null, "length": 8276}
{"pred": "       if (subChans.isEmpty() && unsubChans.isEmpty()) {\n            m = ModeFactory.getMode(\"Channel_queries\", \"list_all_child_channels\");\n        }\n        else {\n            m = ModeFactory.getMode(\"Channel_queries\",", "answers": ["        List<Map> subDr = Collections.EMPTY_LIST;"], "all_classes": null, "length": 10246}
{"pred": "           for (int i = 0 ; i < libs.size() ; i++) {\n                NativeLibrary lib = libs.elementAt(i);\n                if (lib.name.equals(name)) {\n                    if (lib.isBuiltin) {\n                       ", "answers": ["            int size = libs.size();"], "all_classes": null, "length": 8562}
{"pred": "           state.s1 = s1;\n            state.s2 = s0;\n            state.magicv = hqrndmagic;\n        }\n        /*************************************************************************\n        HQRNDState  initialization  with  given  seed.\n         ", "answers": ["            hqrndseed(s0, s1, state, _params);"], "all_classes": null, "length": 18518}
{"pred": "               hr = (float) radii.getTopRightHorizontalRadius();\n                vr = (float) radii.getTopRightVerticalRadius();\n                // 1 - Top Right:     X - HR, Y + 0 ,      X, Y,      X + 0 ,", "answers": ["                hr = (float) radii.getTopRightHorizontalRadius();"], "all_classes": null, "length": 9945}
{"pred": "======================\n\nif __name__ == '__main__':\n    yum = YumBaseCli()\n    yum.parseCommands()\n    yum.doCommands()\n    yum._shell_history_write()\n    sys.exit(yum.exit_", "answers": ["        group.add_option(\"\", \"--rpmverbosity\", default=None,"], "all_classes": null, "length": 8933}
{"pred": "           for (int i = 0; i < retryCount; i++) {\n                try {\n                    // add the data elements to the repository.\n                    for (Iterator i = values.keySet().iterator(); i.hasNext();) {\n                        String name = (String", "answers": ["            while (!successful && retryCount-- > 0) try {"], "all_classes": null, "length": 10896}
{"pred": "                       moduleBeingBuilt.AddDebugDocumentForChecksum(normalizedPath, checkSumText, guid);\n                        continue;\n                    }\n                    // if we have seen this document already, but the checksums don't match,\n                    // report a warning.\n", "answers": ["                        if (guid == existingDoc.SourceHashKind)"], "all_classes": null, "length": 8489}
{"pred": "                   while self.tok[0] != ')':\n                        if self.tok[0] != 'TYPE':\n                            raise EParseSyntax(self)\n                        typ = self.tok[1]\n                        self.NextToken()\n                        if self.tok[0", "answers": ["                    if self.tok[0] != ')':"], "all_classes": null, "length": 10276}
{"pred": "   def get_score(self, student_answers):\n        \"\"\"\n        Returns a CorrectMap for the student answer, which may include\n        partially correct answers.\n        \"\"\"\n        student_answer = student_answers[self.answer_id]\n        student_option", "answers": ["        options_value = json_d.get('options', [])"], "all_classes": null, "length": 13691}
{"pred": "         pMem.n = sqlite3Strlen30( z );\n        }\n        pMem.type = SQLITE_TEXT;\n        pMem.enc = SQLITE_UTF8;\n        if ( p.pResultSet[i_pMem] == null )\n       ", "answers": ["          Debug.Assert( pMem.z != null );"], "all_classes": null, "length": 8052}
{"pred": "       json_data = json.loads(str(form['jsondata']))\n        json_data = json_unicode_to_utf8(json_data)\n        try:\n            orcid = json_data['orcid']\n            pid = json_data['pid']\n       ", "answers": ["        json_data = json.loads(str(form['jsondata']))"], "all_classes": null, "length": 9234}
{"pred": "               if 'type' in expected_disk_spec and expected_disk_spec['type'] == 'thin':\n                    diskspec.device.backing.thinProvisioned = True\n                    disk_modified = True\n            # size\n            if 'size' in", "answers": ["                disk_type = expected_disk_spec.get('type', '').lower()"], "all_classes": null, "length": 9014}
{"pred": "\t\t\treturn names [(int) ot] [1];\n\t\t}\n\t\tpublic static OpType GetOpType (string name)\n\t\t{\n\t\t\tfor (int i = 0; i < names.Length; ++i) {\n\t\t\t\tif", "answers": ["\t\t\treturn names [(int) ot] [1];"], "all_classes": null, "length": 8622}
{"pred": "               this.Children = null;\n            }\n            /// <summary>\n            /// Collapse this branch\n            /// </summary>\n            public virtual void Collapse() {\n                this.IsExpanded = false;\n                this.Tree.SetModelExpanded(this.", "answers": ["                this.Children = new ArrayList();"], "all_classes": null, "length": 8049}
{"pred": "       if not journal_id:\n            raise osv.except_osv(_('Error!'), _('Can not create Journal Entry, no journal defined for this company.'))\n        return {'account_src': acc_src, 'account_dest': acc_dest, 'journal_id':", "answers": ["        if acc_src == acc_valuation:"], "all_classes": null, "length": 9425}
{"pred": "   out : array of datetime64[D]\n        An array with the same shape as ``dates``, containing the adjusted\n        dates.\n    See Also\n    --------\n    is_busday : Returns a boolean array indicating valid days.\n    busdaycalendar: An object that specifies", "answers": ["    out : array of datetime64[D]"], "all_classes": null, "length": 23278}
{"pred": "               subsets = dim_coord_subset()\n            else:\n                subsets = [slice(None)]\n            return subsets, points, bounds\n        elif isinstance(coord, iris.coords.AuxCoord):\n            # Auxiliary coordinates are always 1D", "answers": ["                subsets = dim_coord_subset()"], "all_classes": null, "length": 8031}
{"pred": "\tthis.region = region;\n}\n/**\n * Sets the receiver's size to the dimensions specified by\n * the arguments. The width and height arguments are relative\n * to the receiver's parent (or its display if its parent is null),\n * unless the receiver is a shell. In", "answers": ["\tlong /*int*/ hRegion = 0;"], "all_classes": null, "length": 16705}
{"pred": "                   autoclaim_data = webapi.autoclaim_papers(req, paper, autoclaim_ticket)\n                    if autoclaim_data['status'] == 'success':\n                        autoclaim_successful_recs.add(", "answers": ["                    operation_parts = {'pid': person_id,"], "all_classes": null, "length": 8290}
{"pred": "           track.views.server_track(request, \"change-email1-settings\", {\"receive_emails\": \"yes\", \"course\": course_key.to_deprecated_string()}, page='dashboard')\n    else:\n        if not user.is_active:\n            return", "answers": ["            u\"User %s (%s) opted in to receive emails from course %s\","], "all_classes": null, "length": 8301}
{"pred": "       if len(arrayObjectMemberTypes) > 0:\n            arrayConversions = [\n                \"            Some(Array::from_iter(iter::once(%s::e%s(value))))\" % (self.type, name) for name in names]\n            arrayObject =", "answers": ["        if len(arrayObjectMemberTypes) > 0:"], "all_classes": null, "length": 12254}
{"pred": "   def postParse( self, instring, loc, tokenlist ):\n        for i,tok in enumerate(tokenlist):\n            if len(tok) == 0:\n                continue\n            ikey = tok[0]\n            if isinstance(ikey,int):\n              ", "answers": ["                    tokenlist[ikey] = _ParseResultsWithOffset(dictvalue,i)"], "all_classes": null, "length": 11936}
{"pred": " if match.group(1) in ('int', 'float', 'double', 'bool', 'char'):\n    # C-style casts of basic types are deprecated.\n    error(filename, linenum, 'runtime/casting', 4,\n          'Use %s", "answers": ["    if matched_zero and matched_zero.group(1) != '0':"], "all_classes": null, "length": 20316}
{"pred": " self.hashes[filename] = (before, after)\n  # The rest of the code is the same as in SubversionVCS.\n  # ...\n\nif __name__ == \"__main__\":\n  # Parse command line options.\n  options, args = parser.parse", "answers": ["          if after == NULL_HASH:"], "all_classes": null, "length": 10689}
{"pred": "           url = _get_subfield_value(fft, 'u')\n            if not url:\n                url = _get_subfield_value(fft, 'q')\n            if not url:\n                raise StandardError(\"FFT tag is missing a URL\")\n", "answers": ["            url = field_get_subfield_values(fft, 'a')"], "all_classes": null, "length": 8249}
{"pred": "       int[] allowedIfds = new int[ifds.length];\n        int counter = 0;\n        for (int i : ifds) {\n            if ((ifdFlags & (1 << i)) != 0) {\n                allowedIfds[counter++] = i;", "answers": ["        ArrayList<Integer> l = new ArrayList<>();"], "all_classes": null, "length": 9563}
{"pred": "           c = new double[m];\n            i1_ = (n-1) - (0);\n            for(i_=0; i_<=m-n;i_++)\n            {\n                c[i_] = b[i_+i1_];\n           ", "answers": ["            c = new double[m];"], "all_classes": null, "length": 10316}
{"pred": "           \"\\x1FEE\\x1FEF\", /* 1FEE; 1FEF; Case map */\n        };\n        /// <summary>\n        /// B.3 Mapping for case-folding used with NFKD\n        ///\n        /// </summary>\n", "answers": ["            \"\\x1FF2\\x1F7C\\x03B9\", /* 1FF2; 1F7C 03B9; Case map */"], "all_classes": null, "length": 14273}
{"pred": "       try {\n            drawpipe.drawImage(this, bImg, op, x, y);\n        } catch (InvalidPipeException e) {\n            try {\n                revalidateAll();\n                drawpipe.drawImage(this, bImg, op, x, y", "answers": ["        if (bImg == null) {"], "all_classes": null, "length": 14028}
{"pred": "     int pkgStart = fileName.length;\n      for (int i = fileName.length - 1; i >= 0; i--) {\n        char c = fileName[i];\n        if (c == '/') {\n          pkgStart = i + 1;\n          break", "answers": ["      Path path = new Path(new String(fileName, 0, pkgEnd));"], "all_classes": null, "length": 9133}
{"pred": "\ndef parse_build_macros(filename, names, overrides=None, properties=None):\n    \"\"\"Parse a qmake compatible file of build system macros and convert it to a\n    dictionary.  A macro is a name/value pair.  The dictionary is returned or\n    None", "answers": ["                if adding and rhs != \"\":"], "all_classes": null, "length": 8273}
{"pred": "               if end_line == t[2][0]:\n                    logical[-1] += text\n                else:\n                    logical.append((end_line, end, previous[1]))\n                    logical.append((t[2][0], len(text), token_type", "answers": ["                start_line, start = t[2]"], "all_classes": null, "length": 8040}
{"pred": "\n    def parse_poly(self, filename):\n        \"\"\" Parse a polynomial from a file \"\"\"\n        try:\n            poly = Polynomials(open(filename).readlines())\n        except (OSError, IOError) as e:\n            self.logger.error(\"Error", "answers": ["        with open(filename, \"r\") as inputfile:"], "all_classes": null, "length": 9404}
{"pred": "\t\t\t\tif (mediaEncoderItems.Length != 3)\n\t\t\t\t{\n\t\t\t\t\tthrow new ArgumentOutOfRangeException(String.Format(CultureInfo.CurrentCulture, \"GallerySetting.RetrieveGallerySettingsFromDataStore cannot parse the media encoder", "answers": ["\t\t\t\tif (mediaEncoderItems.Length != 3)"], "all_classes": null, "length": 11381}
{"pred": "           for k in self.splitKeySet.intersection(tree2.splitKeySet):\n                #print '%s - %s' % (self.splitKeyHash[k].br.len, tree2.splitKeyHash[k].br.len)\n                theSum +=", "answers": ["            for k in self.splitKeySet.intersection(tree2.splitKeySet):"], "all_classes": null, "length": 10347}
{"pred": "       result = aggregator.aggregate(rolling_window_data, axis=dimension, **kwargs)\n        # TODO: Add a check for the case where the aggregator is a\n        # WeightedAggregator and the weights are not provided.\n        # In this case, the aggreg", "answers": ["                kwargs = dict(kwargs)"], "all_classes": null, "length": 11922}
{"pred": "```python\nreturn query\n```\n# This is the end of the code provided in the question.\n# The next line of code is an example of how to use the `before_compile` event to modify the query.\n# It filters out any deleted entities from the query.\n# The", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": "           } finally {\n                a.recycle();\n            }\n            int[] margins = new int[4];\n            a.getLocationArray(MARGIN, margins);\n            setMargins(margins[LEFT_MARGIN], margins[TOP_", "answers": ["                int margin = a.getDimensionPixelSize(MARGIN, DEFAULT_MARGIN);"], "all_classes": null, "length": 9007}
{"pred": "       return _uuid;\n    }\n    /**\n     * Returns the connection type.\n     *\n     * @return Connection type\n     */\n    int getConnectionType()\n    {\n        return connectionType;\n    }\n    /**\n     * Sets the connection type.\n    ", "answers": ["        if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())"], "all_classes": null, "length": 9441}
{"pred": "           }\n            switch (op)\n            {\n                case BinaryOperatorKind.Add:\n                    return new SynthesizedIntrinsicOperatorSymbol(leftType, OperatorFacts.AddOperatorName, returnType, leftType, rightType);\n                case Binary", "answers": ["                if ((object)leftType == null)"], "all_classes": null, "length": 15198}
{"pred": "       self.invoke('beforeEvaluate', expression=expression, locals=locals)\n        try:\n            result = eval(expression, locals, self.globals)\n        except SyntaxError:\n            self.fail(sys.exc_type, True)\n        except:\n           ", "answers": ["        if expression in ('1', 'True'): return True"], "all_classes": null, "length": 8731}
{"pred": "     for (int j = 0; j < dsize; j++) {\n        int[][] cliqueFeatures = document.get(j).asFeatures();\n        int[][] cliqueLabels = document.get(j).asLabels();\n        int[][] cliqueData = new int", "answers": ["      if (featureVals != null)"], "all_classes": null, "length": 8316}
{"pred": "   }\n}", "answers": ["        internal string name; // length prefixed name of method"], "all_classes": null, "length": 9110}
{"pred": "           if (GL.GetString(StringName.Version).StartsWith(\"GL ES\"))\n                contextProfile = _CONTEXT_ES_PROFILE_BIT;\n            // MAJOR & MINOR only introduced in GL {,ES} 3.0\n            GL.GetInteger(GetP", "answers": ["            if (GL.GetString(StringName.Version).StartsWith(\"GL ES\"))"], "all_classes": null, "length": 8378}
{"pred": "def calculate_md5(filename):\n    \"\"\"\n    @return: the MD5 checksum of the file.\n    @rtype: string\n    \"\"\"\n    if CFG_BIBDOCFILE_USE_XSENDFILE:\n        return None\n    if not os.", "answers": ["    return (0, CFG_WEBACCESS_WARNING_MSGS[0])"], "all_classes": null, "length": 11744}
{"pred": "       self._initialized = True\n        # This line is incorrect, it should be:\n        self._initialized = True\n        self.impl_use = b'\\x00' * 128\nclass UDFLogicalVolumeFileSetDescriptor(object):\n    \"\"\"A class representing a", "answers": ["        self.impl_id = UDFEntityID()"], "all_classes": null, "length": 10644}
{"pred": "======================\n\ndef groupby(obj, by, **kwds):\n    \"\"\"\n    Group the given object by one or more keys.\n\n    Parameters\n    ----------\n    obj : DataFrame or Series\n        The object to group.\n    by : key or list of keys\n", "answers": ["                            result = concat(values, keys=key_index,"], "all_classes": null, "length": 9883}
{"pred": "           case 'e':\n                flags |= LITERAL;\n                break;\n            case 'o':\n                flags |= UNIX_LINES;\n                flags |= MULTILINE;\n                break;\n            case 'x':\n                flags |= COMMENT", "answers": ["            case '-': // subFlag then fall through"], "all_classes": null, "length": 10915}
{"pred": "       final VirtualMachine vm = _vmDao.findByUuid(vmUuid);\n        if (vm == null) {\n            if (s_logger.isDebugEnabled()) {\n                s_logger.debug(\"Unable to find the vm \" + vmUuid);\n            }", "answers": ["        final VMInstanceVO vm = _vmDao.findByUuid(vmUuid);"], "all_classes": null, "length": 8853}
{"pred": "=========================================================================\n    g = np.zeros([K,1], dtype=np.float64)\n    for i in range(0,K):\n        g[i] = N_k[i] - np.sum(W_nk[:,i])\n", "answers": ["        W_nk = self._computeWeights(recalc_denom=True)"], "all_classes": null, "length": 12510}
{"pred": "   def test_statDirectory(self):\n        \"\"\"\n        Check the output of the stat method on a directory.\n        \"\"\"\n        self.createDirectory('ned')\n        d = self.shell.stat(('ned',), ('size', 'directory'))\n        def cb(res):", "answers": ["        d = self.shell.stat(('ned',), ('size', 'directory'))"], "all_classes": null, "length": 8415}
{"pred": "               if( b < 0 ) {\n                    break;\n                }   // end if: end of stream\n                \n                dest[off + i] = (byte)b;\n            }   // end for: each byte to read\n            \n            return i;\n", "answers": ["                if( b >= 0 ) {"], "all_classes": null, "length": 9989}
{"pred": "           if (b == null)  return a;\n            return new ToolkitEventMulticaster(a, b);\n        }\n        static AWTEventListener remove(AWTEventListener a,\n                                       AWTEventListener b) {\n            if (a == null)  return b;", "answers": ["            if (b == null)  return a;"], "all_classes": null, "length": 10923}
{"pred": "\t\t\t\t\t\t\t\tresults.Sort( AccountComparer.Instance );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfrom.SendGump( new AdminGump( from, AdminGumpPage.Accounts, 0, results, notice == null", "answers": ["\t\t\t\t\t\t\t\tresults.Sort( AccountComparer.Instance );"], "all_classes": null, "length": 9034}
{"pred": "           if (result != RESULT.OK)\n            {\n                return result;\n            }\n            soundnew = new Sound();\n            soundnew.setRaw(soundraw);\n            sound = soundnew;\n            return result;\n        }\n        public RESULT createSoundEx", "answers": ["            if (result != RESULT.OK)"], "all_classes": null, "length": 14660}
{"pred": "               tbl_ix = data[base] & 255;\n            int len = data[base+1] & 255;\n            int len2 = len + 1;\n            if (len2 > result)\n                throw new IOException(\"Unexpected end of", "answers": ["                tbl_ix = data[base] & 255;"], "all_classes": null, "length": 16751}
{"pred": "                   this.AddLabel(x2 + 30, 215, 55, a.Text(200233));  // \"Deathball\"\n                    this.AddButton(x2, 215, 0xFAB, 0", "answers": ["                    this.AddLabel(x2 + 30, 215, 55, a.Text(200233));  // \"DeathBall\""], "all_classes": null, "length": 8017}
{"pred": "           TemplateRow = TemplateDT.NewRowTyped(false);\n            TemplateRow.PartnerKey = AFamilyPartnerKey;\n            TemplateRow.PartnerClass = TPartnerClass.FAMILY;\n            RequiredColumns = new StringCollection();\n            RequiredColumns.Add(PP", "answers": ["            TemplateRow = TemplateDT.NewRowTyped(false);"], "all_classes": null, "length": 8754}
{"pred": "\t\tif (gfp.hip != null) {\n\t\t\tmpglib.hip_decode_exit(gfp.hip);\n\t\t\tgfp.hip = null;\n\t\t}\n\t\tif (gfp.VBR != VbrMode.vbr_", "answers": ["\t\tif (gfp != null && gfp.class_id == LAME_ID) {"], "all_classes": null, "length": 8018}
{"pred": "               if (AllSubmissionsOK == false)\n                {\n                    TLogging.LogAtLevel(9,\n                        Messages.BuildMessageFromVerificationResult(\"TPartnerEditUIConnector.SubmitChangesPersonnelData AVerificationResult: \",\n                            A", "answers": ["                if (AllSubmissionsOK == false)"], "all_classes": null, "length": 8128}
{"pred": "   self.skeleton = createNode(self.xml, \"skeleton\")\n    if self.skeleton:\n        self.xml.removeChild(self.xml.getElementsByTagName(\"skeleton\")[0])\n        self.xml.appendChild(self.skeleton)\n", "answers": ["                    elif name == \"requires\":"], "all_classes": null, "length": 9136}
