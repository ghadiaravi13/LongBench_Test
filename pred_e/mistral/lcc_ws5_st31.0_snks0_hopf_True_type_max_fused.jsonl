{"pred": "\t\t\trasporediRaspored(primer, primer.getBrojRasporeda()+1, primer.getBrojRasporeda()+1, primer.getBrojRasporeda()+1, primer.getBrojRasporeda()+", "answers": ["\t\t\tString invKnj = invKnjPanel.getCode();"], "all_classes": null, "length": 451}
{"pred": "               SubCriteria[\"GroupBy\"] = new GroupByCriteria();\n              }\n              return (ISearchCriteria)SubCriteria[\"GroupBy\"];\n            }\n        }\n        [EntitySetMapping(\"WorkItem\")]\n        public WorkItemCriteria WorkItem\n        {\n            get\n            {", "answers": ["                 SubCriteria[\"GroupID\"] = new SearchCondition<String>(\"GroupID\");"], "all_classes": null, "length": 475}
{"pred": "\t\taliases.Add (\"alias\", \"Alias\");\n\t\t// Add more aliases here if required.\n\t}\n}\n// The following code is not part of the original code, it is just a test.\nusing System;\nnamespace ConsoleApplication1\n{\n    class Program\n", "answers": ["\t\taliases.Add (\"GBK\", \"gb2312\");"], "all_classes": null, "length": 545}
{"pred": "# TODO(josh): Implement the following methods.\n# def _parse_char_class(self, start):\n# def _parse_char_class_negated(self, start):\n# def _parse_group(self, start):\n# def _parse_group_recurs", "answers": ["        if _parse_verbatim(source, '[:%s:]' % class_name):"], "all_classes": null, "length": 850}
{"pred": "#print(sum(sum(sum(sum(sum(sum(sum(sum(sum(sum(sum(sum(sum(sum(sum(sum(sum(sum(sum(sum(sum(sum(sum(sum(sum(sum(sum(sum(sum(sum(sum", "answers": ["check = numbers[5][123]"], "all_classes": null, "length": 502}
{"pred": "       sendEventBean(new SupportBean(\"A\", 1));\n        sendEventBean(new SupportBean(\"B\", 2));\n        sendEventBean(new SupportBean(\"C\", 3));\n        sendEventBean(new SupportBean(\"D\", 4));\n        sendEventBean", "answers": ["        sendBean(\"A\", null, null);"], "all_classes": null, "length": 756}
{"pred": "               item = item.getParent();\n                item.setSelection(new Point(item.getClientArea().x,\n                        item.getClientArea().y));\n                break;\n            }\n        }\n        lastTreeItem = item;\n    }\n    /*", "answers": ["                tree.setSelection(new TreeItem[] { item });"], "all_classes": null, "length": 1800}
{"pred": "       topComponent.setTitle(Language.get(\"tab.instances\"));\n    }\n}", "answers": ["        if (nilCard != null) {"], "all_classes": null, "length": 511}
{"pred": "\t\t\tif (w > 0 && h > 0) {\n\t\t\t\tfloat aspect = (float) w / (float) h;\n\t\t\t\tfloat bitmapAspect = (float) bitmap.getWidth() / (float) bitmap.getHeight();\n\t\t", "answers": ["\t\t\tfloat r = (w+h)/2f;"], "all_classes": null, "length": 1042}
{"pred": "       self.__repeat_delay = delay\n        self.__repeat_interval = interval\n        self.__repeat_count = count\n        self.__repeat_timer = gobject.timeout_add(delay, self._repeat)\n        self.__repeat = True\n\n        if delay is None:\n           ", "answers": ["            self.__tick_id = gobject.timeout_add(10, self._tick_cb)"], "all_classes": null, "length": 703}
{"pred": "# Run the tests\nif __name__ == \"__main__\":\n    setup_logging()\n    run_tests()\n    teardown_logging()\n# Run the tests\ndef run_tests():\n    \"\"\"\n    Runs the tests.\n    \"\"\"\n    test_runner =", "answers": ["    handler = handlers.LogLevelFilter(logged_critical, \"CRITICAL\")"], "all_classes": null, "length": 1196}
{"pred": "   if self._state != 'idle':\n        self.log.warning('Cannot start measurement while in state {}'.format(self._state))\n        return\n\n# This is the method to start the measurement\ndef start_measurement(self):\n    \"\"\"\n    Starts the measurement.", "answers": ["        if self.getState() == 'idle':"], "all_classes": null, "length": 885}
{"pred": "       List<String> supportedStatuses = new ArrayList<String>(\n            Arrays.asList(\n                Presence.AVAILABLE, Presence.BUSY, Presence.CHAT,\n                Presence.DND, Presence.ERROR, Presence.INVISIB", "answers": ["        List<String> requiredStatusNames ="], "all_classes": null, "length": 678}
{"pred": "                           await cmd.Execute();\n                        }\n                    });\n                }\n            }\n            poll.AddOption(options[0], options[0].Map);\n            poll.AddOption(options[1], options[1].Map);\n            poll.AddOption(options", "answers": ["                            await cmd.ExecuteArmed(this, null);"], "all_classes": null, "length": 3344}
{"pred": "\t\t\tthis.label1 = new System.Windows.Forms.Label();\n\t\t\tthis.label1.Name = \"label1\";\n\t\t\tthis.label1.Size = new System.Drawing.Size(120, 13);\n\t\t\tthis.", "answers": ["\t\t\tthis.label1.Location = new System.Drawing.Point(6, 51);"], "all_classes": null, "length": 1316}
{"pred": "\t\t\t\tif (assembly != null) {\n\t\t\t\t\tassembly = null;\n\t\t\t\t\tGC.Collect ();\n\t\t\t\t}\n\t\t\t\tif (assembly == null && error != null) {\n\t\t\t\t\tif (error is File", "answers": ["\t\t\t\tif (assembly == null) {"], "all_classes": null, "length": 1336}
{"pred": "# Get the interface name from the input parameters\ninterface = self.params['interface']\nif not interface:\n    self.fail_json(msg=\"Interface name is required.\")\nself.param = {'interface': interface}\nself.check_mode = self.params['check_mode']\n", "answers": ["        if self.interface == 'all':"], "all_classes": null, "length": 1718}
{"pred": "   for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      if (!Character.isDigit(c)) {\n        return false;\n      }\n    }\n    return true;\n  }\n}", "answers": ["    for (int i = 0; i < s.length(); i++)"], "all_classes": null, "length": 939}
{"pred": "\t\t\t\t\t\t\t(\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "                           selections = GetNeighbours(nodelist, j, nodelist.size(), 1, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false,", "answers": ["                            if (c_sead == start || c_sead == stop) {"], "all_classes": null, "length": 1426}
{"pred": "\t\t\tthis.Size = new System.Drawing.Size(300, 150);\n\t\t\tthis.ResumeLayout(false);\n\t\t\tthis.PerformLayout();\n\t\t}\n\t\t#endregion\n\t\tprivate System.Windows.Forms.", "answers": ["\t\t\tthis.Size = new System.Drawing.Size(371, 300);"], "all_classes": null, "length": 825}
{"pred": "# behavior = {\n#     'name': 'name',\n#     'category': 'category',\n#     'start': 'start',\n#     'end': 'end',\n#     'duration': 'duration',\n#     'description': 'description',\n#     'location':", "answers": ["    behavior_list = [ checkOnTour(tourlist, o,"], "all_classes": null, "length": 609}
{"pred": "       self.html = address(address='', text=_(\"Statistics page\")) + \\\n                    self.html + \\\n                    self.footer\n        self.html = self.html.replace(FULL_PAGE_TEMPLATE,\n                                      self.html.replace(FULL_", "answers": ["        footer = self.write_footer(None)"], "all_classes": null, "length": 960}
{"pred": "   self.takeoff()\n    self.fly_to_position(0, 0, 10)\n    self.land()\n    self.fly_to_position(0, 0, 1)\n    self.land()\n    self.fly_to_position", "answers": ["            if abs(m.relative_alt) > max_relalt_mm:"], "all_classes": null, "length": 577}
{"pred": "\t\t\t\t\t\t\tif (nodes.Count > 0 && nodes[0] is World)\n\t\t\t\t\t\t\t\t((World)nodes[0]).Game.Rules.SetCVar(\"net_max_units\", nodes.Count.ToString());\n\t\t\t\t", "answers": ["\t\t\t\t\t\t\tif (strings[0] == \"GlobalSettings\")"], "all_classes": null, "length": 591}
{"pred": "\t\t\t\tSystem.arraycopy(src, offset, buf, 0, length);\n\t\t\t\t// reset buffer\n\t\t\t\tbuffer = new byte[length];\n\t\t\t\t// reset buffer pointer\n\t\t\t\tbufferPointer = 0;\n\t\t\t", "answers": ["\t\t\t\tfor (int i = 0; i < byteCount; i++) {"], "all_classes": null, "length": 783}
{"pred": "       // Create and initialize the RCP part\n        // This is done in the constructor of the OPIViewPart\n        // But we need to do it here to make sure the RCP part is initialized\n        // before the OPIViewer is created.\n        // Otherwise the OPIViewer", "answers": ["        if (opiRuntimeToolBarDelegate != null)"], "all_classes": null, "length": 813}
{"pred": "           if (launcher != null && launcher.isPopupTrigger(e)) {\n                launcher.showPopup(this, e);\n            }\n        }\n    }\n}\n```\n\nI want to add a new feature to this class, which is to display a", "answers": ["            if (launcher != null && !e.isPopupTrigger()) {"], "all_classes": null, "length": 933}
{"pred": "   def test_parsing_of_a_single_line_with_multiple_fields(self):\n        line = \"Name,Age,Occupation,Salary John Doe,35,Engineer,50000\"\n        fields = parse_line(line", "answers": ["            (\"O`NEAL \\nCarol Joy\", \"Carol Joy O'Neal\"),"], "all_classes": null, "length": 919}
{"pred": "           sort_key = itemgetter(*sort_key)\n            if isinstance(sort_key, tuple):\n                sort_key = functools.reduce(lambda x, y: lambda x, y: lambda x, y, z: x and y(x, z), [sort", "answers": ["            if sort[0] == 'uploadDate':"], "all_classes": null, "length": 1853}
{"pred": "           }\n            object IEnumerator.Current => Current;\n            T Current => list.GetEnumerator().Current;\n            void Dispose() => ((IEnumerator)list.GetEnumerator()).Dispose();\n            bool MoveNext() => ((IEnumerator)list.GetEnumerator", "answers": ["                index = -1;"], "all_classes": null, "length": 1053}
{"pred": "# return local(ui, path, parent, create=create)\n# or\n# return local(ui, path, parent, create=create)\n# or\n# return local(ui, path, parent, create=create)\n# or\n# return local(ui, path, parent,", "answers": ["                parentpath = parentpath[len(cwd):]"], "all_classes": null, "length": 795}
{"pred": "       record = self.filter(name=self.name, level=level)\n        if record is None:\n            return\n        self.handle(record)\n        self.process(record)\n        self.flush()\n        self.emit(record, **kwargs)\n\n        #", "answers": ["        if sys.version_info[0] == 2:"], "all_classes": null, "length": 897}
{"pred": "                               m.SendMessage(\"You have gained 1 skill point.\");\n                                m.AddSkill(SkillName.Magery, 1.0);\n                                m.AddSkill(SkillName.Meditation, 1.0);\n                               ", "answers": ["                                m.Mana -= 20;"], "all_classes": null, "length": 569}
{"pred": "def step_models_exist(step):\n    \"\"\"\n    Given a model name, check that it exists in the database.\n    \"\"\"\n    model_name = re.search(r'models\\.(.+)\\.', step.name).group(1)\n    model = models.get", "answers": ["            for k, v in hash_.iteritems():"], "all_classes": null, "length": 546}
{"pred": "           return redirect(url_for('biblio.admin.index'))\n        # Create a new ticket\n        ticket = perform_new_ticket(self.request)\n        # Set the ticket number in the session\n        self.session.new_ticket = ticket\n        # Red", "answers": ["            return page_not_authorized(req=req, referer=\"/edit\","], "all_classes": null, "length": 756}
{"pred": "'''\nimport os\nimport sys\nimport re\nimport time\nimport signal\nimport subprocess\nimport socket\nimport select\nimport pty\nimport pwd\nimport termios\nimport fcntl\nimport struct\nimport shlex\nimport re\nimport threading\nimport paramiko\nimport param", "answers": ["        - {key: usetty, section: ssh_connection}"], "all_classes": null, "length": 968}
{"pred": "\t\tfor(int i = 0; i < Data.length; i++)\n\t\t{\n\t\t\tdata += Data[i].encode();\n\t\t}\n\t\t\n\t\treturn data;\n\t}\n\t\n\tprivate void decode()\n\t{\n\t\t", "answers": ["\t\tWardlistRecord data = (WardlistRecord)DataCollection.get(0);"], "all_classes": null, "length": 1476}
{"pred": "       record['pages'] = page_number\n        record['pages_start'] = page_number\n        record['pages_end'] = page_number\n        record['pages_total'] = page_number\n        record['pages_processed'] = page_number\n        record['pages_", "answers": ["            record_add_field(rec, '300', subfields=[('a', page_count)])"], "all_classes": null, "length": 1283}
{"pred": "               assertEquals(A.get(c, r), B.get(r, c));\n            }\n        }\n    }\n    public void testViewColumnMajor() {\n        A = new DenseMatrix(new double[][] { { 1, 2, 3 },", "answers": ["                assertEquals(A.getQuick(r, NCOLUMNS - 1 - c), B.getQuick(r, c));"], "all_classes": null, "length": 1319}
{"pred": "# Send ENV Request\nbind_layers(TCP, ENVRequest, 80)\nclass ENVRequest(Packet):\n    name = \"ENVRequest\"\n    fields_desc = [\n        ByteField(\"version\", 0),\n        ByteField(\"session_handle\", 0", "answers": ["                 lambda pkt: pkt.commandId == 0x6f),"], "all_classes": null, "length": 625}
{"pred": "\t\t// TODO: implement the logic for the harvesting process\n\t\t// ...\n\t\t//\n\t\t//\n\t\t//\n\t\t//\n\t\t//\n\t\t//\n\t\t//\n\t\t//\n\t\t//\n\t\t//\n\t\t//\n\t", "answers": ["\t\tfinal CoordinateReferenceSystem crs = reader.getCrs();"], "all_classes": null, "length": 805}
{"pred": "           ((Creature) e).setBaby();\n        }\n        return (LivingEntity) e;\n    }\n}\n\n// The following code is for the Creature class, which is not shown in the given code snippet.\npublic abstract class Creature extends Entity implements LivingEntity", "answers": ["            Creature c = (Creature) e;"], "all_classes": null, "length": 386}
{"pred": "\t\t\tushort* line = (ushort*)(stream.MapViewOfFile(0, FileMapAccess.ReadWrite) + 0);\n\t\t\tushort* curLine = line;\n\t\t\tushort* endLine = line + (int)(stream.Length /", "answers": ["\t\t\tushort* line = (ushort*)bd.Scan0;"], "all_classes": null, "length": 1243}
{"pred": "                   int range = 6; // default range\n                    if (m_Mobile.Skills[SkillName.Hiding].Value > 100.0)\n                        range = 12; // expert hiders have a longer range\n                    if (m_Mobile", "answers": ["                    if (house == null)"], "all_classes": null, "length": 585}
{"pred": "Console.WriteLine(\"Displaying Displayable: {0}\", displayable);\n\t\t\t\t\tConsole.WriteLine(\"Displaying Displayable: {0}\", displayable);\n\t\t\t\t\tdisplayable.Display();\n\t\t\t\t}\n\t\t\t\tthrow;\n\t\t\t", "answers": ["\t\t\t\t\t\tConsole.WriteLine(\" > {0}\", displaySet.Descriptor.Description);"], "all_classes": null, "length": 803}
{"pred": "# Find the reader for the file\ntry:\n    reader = supported_extensions()[fname.split('.')[-1]]\nexcept KeyError:\n    raise ValueError(\"Unsupported file format: %s\" % fname)\nreturn reader(fname)\n\nThis code snippet is part", "answers": ["    exts = supported_extensions()"], "all_classes": null, "length": 653}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\t    case 189: // -/_ key"], "all_classes": null, "length": 1748}
{"pred": "out += [' '.join(map(str, w)) for w in np.array(weights).T]\n\n# Save the results\nresults = np.hstack((np.ones((len(names), 1)) * np.arange(len(names)),\n                    np.array", "answers": ["        out_list += [weights_dmat_all[index]]"], "all_classes": null, "length": 1374}
{"pred": "lines = obj.splitlines()\nif lines and lines[0].startswith(b\"\\ufeff\"):\n    del lines[0]\nreturn list(Ris.parse(lines))\n# This function parses a RIS file and returns a list of dictionaries\n# representing the", "answers": ["    obj = obj.lstrip(\"\\ufeff\")"], "all_classes": null, "length": 676}
{"pred": "\t\tif (orig == null) {\n\t\t\treturn;\n\t\t}\n\t\t// Get the new file name\n\t\tString newName = mImporter.getImportedFileName(orig.getName());\n\t\t// Copy the file\n\t\tFile newFile = new File", "answers": ["\t\tif (orig == null || !orig.exists() || orig.length() == 0)"], "all_classes": null, "length": 866}
{"pred": "           strength = calculateStrength(player);\n            strength += calculateStrength(opponent);\n            strength / 2;\n            strength += calculateStrength(player)\n                    * calculateStrength(opponent) / 10;\n            strength += calculateStre", "answers": ["            for (PlayerScore scoreTable : this.scoreTable) {"], "all_classes": null, "length": 1212}
{"pred": "   res = c.get(\"/\")\n\nclass TestWeb:\n    def test_homepage(self, client):\n        res = client.get(\"/\")\n        assert res.status_code == 200\n        assert b\"Welcome to the web app!\" in res.data", "answers": ["            res = c.get(\"/\")"], "all_classes": null, "length": 919}
{"pred": "           nsClient = mNsClientFactory.create(mNsClientCallback);\n        }\n    };\n    public void onLogMessage(String message, int level) {\n        if (level >= Config.LOG_LEVEL) {\n            if (Config.LOG_TO_FILE) {\n", "answers": ["                nsClientService = mLocalBinder.getServiceInstance();"], "all_classes": null, "length": 516}
{"pred": "=====================\n\n# Find the Perl executable.\nperl = \"perl.exe\"\nif sys.platform.startswith(\"win\"):\n    # On Windows, the Perl executable is usually in the PATH.\n    try:\n        perl = sh", "answers": ["            if arch == \"amd64\":"], "all_classes": null, "length": 982}
{"pred": "\t\tfor (int i = 0; i < levelCap; i++) {\n\t\t\tif (towerCost[i] > 0) {\n\t\t\t\tif (PlayerMoney >= towerCost[i]) {\n\t\t\t\t\tPlayerMoney -= towerCost", "answers": ["\t\tfor(int i=0; i<length; i++){"], "all_classes": null, "length": 3890}
{"pred": "\t\t\t\tAddComplexRecipe( index, typeof( SingingAxe ), 10731, 10732, 10733, 10734, 10735, 10736, 107", "answers": ["\t\t\t\tAddRes( index, typeof( BrilliantAmber ), 1032697, 1, 1044240 );"], "all_classes": null, "length": 3677}
{"pred": "```python\nself.assertIn(\"usage: translate [options] [files...]\\n\", capsys.out)\n```\nThis line of code checks if the output of the help command contains the usage string.\n\nThe rest of the code in the class `TestPropFile` are tests", "answers": ["        options = self.help_check(options, \"-P, --pot\")"], "all_classes": null, "length": 1336}
{"pred": "\t\t\tGenerateInterfaceMembers (sw);\n\t\t\tsw.WriteLine (\"}\");\n\t\t\tsw.Close ();\n\t\t\tGenerateInterfaceImplementation (sw);\n\t\t\tsw.Close ();\n\t\t\tGenerateClass (sw);\n\t\t\tsw.Close ();\n", "answers": ["\t\t\tforeach (Signal sig in sigs.Values) {"], "all_classes": null, "length": 1298}
{"pred": "   module = AnsibleModule(\n        argument_spec=fields,\n        supports_check_mode=False\n    )\n    fos = FortiOSHandler(api_version='6.0.0')\n    fos.login(data=module.params)\n    is_error", "answers": ["    module = AnsibleModule(argument_spec=fields,"], "all_classes": null, "length": 1009}
{"pred": "   node.setLeaf(leaf);\n  }\n  public void setDomElement(Element domElement) {\n    this.domElement = domElement;\n  }\n  public Element getDomElement() {\n    return domElement;\n  }\n  public void setDomParent(", "answers": ["    if (node instanceof MutableNode) {"], "all_classes": null, "length": 568}
{"pred": "           return Filter(Filter(Filter(Filter(Filter(Filter(Filter(Filter(Filter(Filter(Filter(Filter(Filter(Filter(Filter(Filter(Filter(Filter(Filter(Filter(Filter(Filter(Filter(Filter(Filter(Filter(Filter(Filter(Filter(Filter(Filter(", "answers": ["            var page = prevChildren.Take(StartPagingTreshold).ToList();"], "all_classes": null, "length": 781}
{"pred": "   def test_tcp_keepalive(self):\n        \"\"\"\n        Test TCP keepalive\n        \"\"\"\n        name = \"127.0.0.1\"\n        port = 12345\n        self.log.info(\"Connecting to %s:%", "answers": ["        soaResponse = dns.message.make_response(query)"], "all_classes": null, "length": 648}
{"pred": "       if (kind == null) {\n            throw new IllegalArgumentException(\"Unknown token: \" + javadocName());\n        }\n        return kind;\n    }\n    public TokenKind getKind() {\n        return TokenKind.fromName(javadocName());\n    }\n", "answers": ["        if (kind == null) {"], "all_classes": null, "length": 524}
{"pred": "           return FindControl(DescriptionID);\n        }\n        public string DescriptionID\n        {\n            get { return PerfomanceID + \"_Description\"; }\n        }\n        public Control Description\n        {\n            get { return FindControl(DescriptionID); }\n        }\n        public", "answers": ["            return this.FindControlRecursive(DescriptionControlID) as Label;"], "all_classes": null, "length": 450}
{"pred": "       url = self.generate_url(method, bucket, path, query_args,\n                               expires=expires,\n                               headers=headers,\n                               auth_handler=self.auth_handler,\n                               query_auth=query_auth,\n                               use_", "answers": ["            path += '?' + query_args"], "all_classes": null, "length": 1198}
{"pred": "\t\t\t\tcanvas.drawBitmap(tiles[i], left, top, null);\n\t\t\t\t// draw the tile\n\t\t\t\t// this is a placeholder, you need to replace it with your own code\n\t\t\t\t// to draw the tile on the canvas\n\t", "answers": ["\t\t\t\tRectF destRect = new RectF(left, top, right, bottom);"], "all_classes": null, "length": 1184}
{"pred": "           Hue = 0x232;\n            Hue = 0x233;\n            Hue = 0x234;\n            Hue = 0x235;\n            Hue = 0x236;\n            Hue =", "answers": ["            HueInfo = new Dictionary<DyeType, Tuple<int, int>>();"], "all_classes": null, "length": 535}
{"pred": "               this.alert(new Alert() {{\n                    init() {{\n                        setText(\"Do you really want to delete the selected certificate?\");\n                        setConfirmText(\"Yes\");\n                        setCancelText(\"No\");\n                        setOnConfirm(c -> deleteCertificate(", "answers": ["                final Modal modal = new Modal();"], "all_classes": null, "length": 698}
{"pred": "\t\t\t\"    // TODO: Add constructor logic here\n\t\t\t// TODO: Add other methods to implementation and remove unused ones\n\t\t\t// TODO: Add finalizer only if 'Dispose(bool disposing)' is used below.\n\t\t\t//\n\t\t\t// code for", "answers": ["\t\t\t\t\"    {0}\" +"], "all_classes": null, "length": 1270}
{"pred": "\nclass MemoryFile(object):\n    \"\"\"\n    A simple in-memory file-like object.\n    \"\"\"\n\n    def __init__(self, data=None):\n        self.data = data or ''\n\n    def __getitem__(self, key):\n        return self.", "answers": ["            if os.access(self.file + os.extsep + ext, os.F_OK):"], "all_classes": null, "length": 1142}
{"pred": "       return \"ImageIcon[image=\" + image + \",description=\" + description + ']';\n    }\n    /**\n     * The image associated with this icon.\n     */\n    transient Image image;\n    /**\n     * The description associated with this icon.\n     */\n   ", "answers": ["        if (description != null) {"], "all_classes": null, "length": 1934}
{"pred": "# return self.plugin_manager.getPlugins()\n# or\n# return self.plugin_manager.getPlugins(active=True)\n# or\n# return self.plugin_manager.getPlugins(active=False)\n# or\n# return self.plugin_manager.", "answers": ["            all_plugins = self._bot.plugin_manager.get_all_plugin_names()"], "all_classes": null, "length": 833}
{"pred": "   module = AnsibleModule(\n        argument_spec=fields,\n        supports_check_mode=True\n    )\n    login(data=data, fos=fos)\n    is_error, response = fortios_system(data, fos)\n    if not is_", "answers": ["                \"vdom\": {\"required\": False, \"type\": \"str\"}"], "all_classes": null, "length": 1164}
{"pred": "           throw new IOException(\"mark not set\");\n        }\n        filePosition = ((ResourceInputStream) savedStream).filePosition;\n        savedStream = (ResourceInputStream) savedStream.getInputStream();\n    }\n    private Object clone() throws CloneNotSupportedException {\n        ResourceInputStream r =", "answers": ["            throw new IOException();"], "all_classes": null, "length": 880}
{"pred": "\t\t\t\treturn original != null;\n\t\t\tcase ActivityDiagramsPackage.ACTIVITY_NODE__ORIGINAL:\n\t\t\t\treturn original != null;\n\t\t\tcase ActivityDiagramsPackage.ACTIVITY_NODE__NAME:\n\t\t\t", "answers": ["\t\t\t\treturn originalObject != null;"], "all_classes": null, "length": 533}
{"pred": "\t\tnew InterfaceUpdater().update(db, importedNode);\n\t\t// TODO: update the node's location\n\t\t// TODO: update the node's description\n\t\t// TODO: update the node's parent\n\t\t// TODO: update the node's ifIndex", "answers": ["\t\tList<Event> events = new LinkedList<Event>();"], "all_classes": null, "length": 888}
{"pred": "   if state == 'present':\n        # Add your code here to change the state to present\n        # For example, if you have a managed resource, you can check\n        # if it exists, update it if needed, and then mark the task as succeeded:\n        # if not publication.exists", "answers": ["    if state == 'present':"], "all_classes": null, "length": 2176}
{"pred": "\t\t\tint version = reader.ReadInt();\n\t\t}\n\t}\n}\nanswers": ["\t\t\tint version = reader.ReadInt();"], "all_classes": null, "length": 737}
{"pred": "   of (self.W * self.h)\n    cost = T.sum(T.sqr(T.sub(T.matmul(self.X, self.W), self.y))) / (\n        T.cast(T.as_tensor(self.n), '", "answers": ["        of log(sigmoid(..)) and will not apply the wanted"], "all_classes": null, "length": 1545}
{"pred": "           return new TripChain();\n        }\n    }\n}", "answers": ["            ITripChain chain = (ITripChain)MemberwiseClone();"], "all_classes": null, "length": 798}
{"pred": "       super();\n        // TODO: Add your custom initialization here\n    }\n    /**\n     * Constructor for FigBend.\n     * @param role the role of the FigBend\n     * @param x the x position of the FigBend\n     * @param y the y", "answers": ["        role = new FigRole();"], "all_classes": null, "length": 2539}
{"pred": "                   throw new TargetInvocationException(\"Unable to initialize target\", ex);\n                }\n            }\n        }\n    }\n#endif", "answers": ["                    if (LogManager.ThrowExceptions) throw ex;"], "all_classes": null, "length": 849}
{"pred": "           name, md5 = check_file_against_reference(full_path, reference_path)\n            assert name == reference_name\n            assert md5 == reference_md5\n    except AssertionError:\n        print \"Test failed: %s\" % name\n        sys.", "answers": ["            name, checksum = checksums.get(block=False)"], "all_classes": null, "length": 599}
{"pred": "   self.labels = {}\n    self.stack = []\n    self.stack_size = 0\n    self.stack_limit = 0\n    self.stack_growth = 1024\n    self.stack_offset = 0\n    self.stack_pointer", "answers": ["        dest = args[0]"], "all_classes": null, "length": 655}
{"pred": "\n\t\t\t# Call callbacks\n\t\t\tfor callback in self.callbacks:\n\t\t\t\tcallback(self)\n\n\t\t\t# Return result\n\t\t\treturn result\n\n\tdef is_valid(self):\n\t\t\"\"\"\n\t\tCheck if the EL", "answers": ["\t\t\t\tresult += [DATA_ORIGINAL] * mem_len"], "all_classes": null, "length": 1032}
{"pred": "\t\t\tStringBuilder builder = new StringBuilder();\n\t\t\tString macroName = value.substring(startIndex, startIndex + 2);\n\t\t\tString macroValue = macroName.equals(\"%s\") ? macroArgument : macroMap.get(macroName);\n\t\t\tif", "answers": ["\t\t\tStringBuffer result = new StringBuffer();"], "all_classes": null, "length": 3860}
{"pred": "     elements.add(new ASN1Boolean(false));\n    }\n    elements.add(new ASN1Boolean(true));\n    if (includeOptionalAttributeValues)\n    {\n      elements.add(new ASN1OctetString(new byte[0]));\n    }", "answers": ["      elements.add(new ASN1Boolean(TYPE_INCLUDE_AUTHN_ENTRY, false));"], "all_classes": null, "length": 1468}
{"pred": "\t\tif (beans != null) {\n\t\t\tfor (Object bean : beans) {\n\t\t\t\tcoll.add((ims.nhs.ic.mcs.common.vo.InvoiceSearchResultVo)bean);\n\t\t\t}\n\t\t}\n\t\t", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 773}
{"pred": "\t\t\treturn EmptyIterator.INSTANCE;\n\t\t}\n\t}\n}\n\nI'm trying to add a method to return all the keys in the shared preferences. I've tried to add the following method:\n\npublic Set<String> getAllKeys() {\n\t\t", "answers": ["\t\t\treturn new EmptyIterator<String>();"], "all_classes": null, "length": 526}
{"pred": "           Stream responseStream = httpContext.Response.OutputStream;\n            var serializer = new JsonSerializer();\n            serializer.Serialize(responseStream, response, new JsonSerializerSettings { TypeNameHandling = TypeNameHandling.All });\n            responseStream.Close();\n        }\n        public", "answers": ["            var serializer = GetResponseSerializer(contentType);"], "all_classes": null, "length": 488}
{"pred": "           launchUrl(string.Format(\"https://{0}/main.aspx?id={1}\", ConfigurationManager.AppSettings[\"CRM_URL\"], CallId));\n        }\n    }\n    private Call GetCall(Guid callId)\n    {\n        IOrganizationService service =", "answers": ["            string CallNumberGuid = CallNumber.ToString();"], "all_classes": null, "length": 648}
{"pred": "       text = text.substring(text.indexOf(\"rows\") + 5);\n        int index = text.indexOf(\" \");\n        if (index < 0) {\n            throw new RuntimeException(\"Could not parse rows from text: \" + text);\n        }\n        width = Integer.", "answers": ["        text = text.substring(nextToken + 7);"], "all_classes": null, "length": 772}
{"pred": "     }\n    }\n  }\n}\n\n// Next line of code:\n// iwork(1) = n;\n// info = 0;\n// return;\n}\n\n// iwork(1) = n;\n// info = 0;\n// return;\n", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "               int index = constraint.indexOf(\":\");\n                String key = constraint.substring(0, index);\n                String value = constraint.substring(index + 1);\n                SetConstraint(key, value);\n            }\n        }\n        private void SetConstraint(String", "answers": ["                if (debug != null) {"], "all_classes": null, "length": 983}
{"pred": "     ProxyPort srcPort = (ProxyPort) proxyGraph.getSource(device);\n      ProxyPort destPort = (ProxyPort) proxyGraph.getTarget(device);\n\n      // Get the source and destination ports.\n      // The source port is the port that the device is connected", "answers": ["      ProxyInfo proxy_info = (ProxyInfo) proxyCell.getUserObject();"], "all_classes": null, "length": 2936}
{"pred": "               return this.GetPropertyValue<bool>(\"submitOnChange\", false);\n            }\n            set\n            {\n                this.SetPropertyValue(\"submitOnChange\", value);\n            }\n        }\n        /// <summary>\n        /// Client-side JavaScript Event Handlers\n", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "\n# Create a new TrackCollection\ntrack_collection = TrackCollection()\n\n# Add some tracks to the collection\ntrack_collection.add(Track('The Beatles', 'Hey Jude', 3.45))\ntrack_collection.add(Track('The Rolling Stones', '", "answers": ["                for song in self.collection[artist][album]:"], "all_classes": null, "length": 826}
{"pred": "       if (SecurityManager.getSecurityManager() != null) {\n            SecurityManager sm = SecurityManager.getSecurityManager();\n            sm.checkPermission(new RuntimePermission(\"accessModuleMembers\"));\n        }\n    }\n    /**\n     * Returns the name of the module that this layer belongs", "answers": ["        SecurityManager sm = System.getSecurityManager();"], "all_classes": null, "length": 3987}
{"pred": "\t\t\t\tif (order.ShippingAddress != null && order.ShippingAddress.Country != null)\n\t\t\t\t{\n\t\t\t\t\t// Do something with the shipping address\n\t\t\t\t}\n\t\t\t}\n\t\t\torder.Status = WebOrder", "answers": ["\t\t\t\torder.ShippingStatusId = (int)ShippingStatus.Delivered;"], "all_classes": null, "length": 5265}
{"pred": "       AutoNumberingScheme autoNumberingScheme = new AutoNumberingScheme();\n        autoNumberingScheme.setName(schemeName);\n        autoNumberingScheme.setStartNumber(startNumber);\n        autoNumberingScheme.setIncrement(increment);\n        autoNumberingScheme.", "answers": ["        AutoNumberingScheme ans = new AutoNumberingScheme();"], "all_classes": null, "length": 5629}
{"pred": "\t\t\tAssert.That (source.Sum (), Is.EqualTo (expected));\n\t\t}\n\t\t[Test]\n\t\tpublic void Sum ()\n\t\t{\n\t\t\tint expected = 10;\n\t\t\tint[] source = { 1, 2", "answers": ["\t\t\tvar source = Read<int> ();"], "all_classes": null, "length": 5586}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\t\t\tArrayList<String> valuesList = new ArrayList<String>();"], "all_classes": null, "length": 4724}
{"pred": "       return self._current_config\n    def _current_config(self):\n        \"\"\"\n        Returns the current configuration of the device.\n        \"\"\"\n        return self._config\n    def _set_config(self, config):\n        \"\"\"\n        Sets the configuration of the device.\n", "answers": ["        if dev_obj == self.fetch:"], "all_classes": null, "length": 4119}
{"pred": "   if (!success) {\n      throw new RuntimeException(\"Upload failed.\");\n    }\n    return \"Upload successful.\";\n  }\n  /**\n   * Returns the name of the sketch file.\n   */\n  public String fileName() {\n    return editor.getSketchFile().getName", "answers": ["    return success ? suggestedClassName : null;"], "all_classes": null, "length": 6878}
{"pred": "       c = Workplane(\"XY\").box(5,5,5)\n        c = c.faces(\">Z\").workplane().fillet(0.5)\n        \"\"\"\n        solid = self\n        edges = []\n        for edge in solid.edges:\n            if edge.", "answers": ["            s = Workplane().box(1,1,1).faces(\"+Z\").edges().fillet(0.1)"], "all_classes": null, "length": 4053}
{"pred": "# Initialize the sensor\nself.sensor = MPU6050(0x68)\n# Set the sensor's sampling rate to 100Hz\nself.sensor.setSamplingRate(100)\n# Initialize the I2C bus\nself.i2c", "answers": ["            fifoCount = self.getFIFOCount()"], "all_classes": null, "length": 6204}
{"pred": "\tfor name in names:\n\t\tdoc = frappe.get_doc(\"Item\", name)\n\t\tpdf = get_pdf(doc, \"item-pdf-template\")\n\t\tpdf_bytes = pdf.getvalue()\n\t\tpdf_filename = doc.item_code", "answers": ["\t\tnames = names['names']"], "all_classes": null, "length": 4346}
{"pred": "\t\t\t\tif (it.hasNext()) {\n\t\t\t\t\tObject[] o = (Object[]) it.next();\n\t\t\t\t\tdata[i] = o;\n\t\t\t\t\t// try {\n\t\t\t\t\t// data[i][0]", "answers": ["\t\t\t\twhile (itHistory.hasNext()) {"], "all_classes": null, "length": 4200}
{"pred": "               if (this.Parent is BaseContainer)\n                    ((BaseContainer)this.Parent).InvalidateProperties();\n            }\n        }\n        public override void GetProperties(Mobile from, List<PropertyEntry> properties)\n        {\n            base.GetProperties(from, properties);", "answers": ["                list.Add(1072378); // <br>Only when full set is present:\t\t\t\t"], "all_classes": null, "length": 6963}
{"pred": "        sb.append(\"\\\\u\");\n         sb.append(Character.forDigit((c >> 4) & 0xF, 16));\n         sb.append(Character.forDigit(c & 0xF, 16));\n      }\n   }\n  ", "answers": ["         sb.append((char) ('a' + d - 10));"], "all_classes": null, "length": 4005}
{"pred": "\t\t\tswitch (type)\n\t\t\t{\n\t\t\t\tcase PacketType.Login:\n\t\t\t\t\t// Handle login packets\n\t\t\t\t\tbreak;\n\t\t\t\tcase PacketType.Chat:\n\t\t\t\t\t// Handle chat packets", "answers": ["\t\t\tvar player = Players[e.Msg.whoAmI];"], "all_classes": null, "length": 4973}
{"pred": "       if (stopId == null) {\n            throw new ApiException(400, \"Missing the required parameter 'stopId' when calling ListStopsApi->listStops\");\n        }\n         // create path and map variables\n         String localVarPath = \"/stops/{stopId", "answers": ["        if (organizationId == null) {"], "all_classes": null, "length": 5074}
{"pred": "           X = gsl_integration_gauss_n(N, X);\n       ************************************************************************/\n        public static double[] gsl_integration_gauss_n(int n, double[] x)\n        {\n            double[] result = new double[n];", "answers": ["            X           -   array[0..N-1] - array of quadrature nodes,"], "all_classes": null, "length": 4527}
{"pred": "====================\n\n        self.modulestore, self.course_id = self.create_course_and_modulestore()\n        self.course = self.modulestore.get_course(self.course_id)\n        self.modulestore.save", "answers": ["            'deleting_user', parent.version_agnostic(), category_queue[0]"], "all_classes": null, "length": 4289}
{"pred": "                                       + String.valueOf(Math.abs(\n                                            (int)Math.pow(10,\n                                                getLogBase10(\n                                                    getValue()\n                                                )\n                                            )\n                                        )\n                                ", "answers": ["                                            + \"10^\" + Math.abs(i));"], "all_classes": null, "length": 4434}
{"pred": "       .map(asset -> asset.getFile().getAbsolutePath())\n        .collect(Collectors.toList());\n        assertEquals(1, newSize);\n        assertEquals(1, allNewFiles.size());\n        assertEquals(newSize, allNewFiles.size());\n        assertTrue(", "answers": ["                .map(pushedAsset -> pushedAsset.getEnvironmentId())"], "all_classes": null, "length": 6390}
{"pred": "       String fileName = \"test.txt\";\n        String fileContent = \"This is a test file\";\n        String filePath = \"/tmp/test.txt\";\n        File file = new File(filePath);\n        // create file\n        Files.write(Paths.get(filePath),", "answers": ["        String fileName1 = \"fileOne_\" + RUNID + \".txt\";"], "all_classes": null, "length": 4714}
{"pred": "           if (obj instanceof Number) {\n                Number num = (Number) obj;\n                assertEquals(\"Value of \" + val, num.doubleValue(), NumberUtils.toNumber(val, null).doubleValue());\n            }\n            return true;\n        } catch (NumberFormatException", "answers": ["            if (obj == null) {"], "all_classes": null, "length": 4128}
{"pred": "                               if (part != null)\n                                {\n                                    part.Attach(part.transform);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            return parts;\n        }\n\n        public void", "answers": ["                                if (grapple.DockUid != part.Uid)"], "all_classes": null, "length": 4169}
{"pred": "       if value:\n            if isinstance(value, list):\n                value = ','.join(map(str, value))\n            self.write({'value': value})\n        return value\n\n# This is a custom module to add a new field 'value' to the ir.", "answers": ["            ir_values_obj = pooler.get_pool(cr.dbname).get('ir.values')"], "all_classes": null, "length": 4578}
{"pred": "           return action == Action.SYNCHRONIZE;\n        }\n        /**\n         * The action to be performed.\n         */\n        private static volatile Action action;\n        /**\n         * The action to be performed.\n         */\n        public enum Action {\n            /**", "answers": ["            return actionTL.getVolatile() == SYNCHRONIZE_CODE;"], "all_classes": null, "length": 4390}
{"pred": "\t\t\tlong l = get_long_from_ptr (ptr);\n\t\t\treturn l;\n\t\t}\n\t\t// int get_int_from_ptr (IntPtr ptr);\n\t\t// long get_long_from_ptr (IntPtr ptr);\n\t\t", "answers": ["\t\t\tlong size = lgetxattr (path, name, value, 0);"], "all_classes": null, "length": 6868}
{"pred": "\t\t\t\tsuper(GenForm.class, \"GenForm.Images.Alert.png\");\n\t\t\t}\n\t\t}\n\t\tpublic static final Image ALERT = new Image(GenForm.class, \"GenForm.Images.Alert.Alert.png\");\n\t}\n", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "       int encodedLength = 0;\n        byte[] encoded = new byte[len + ((len % 3) == 0 ? 0 : 3 - (len % 3))];\n        int bytesToProcess = len;\n        int index = 0;\n        int shift =", "answers": ["        if( source == null ){"], "all_classes": null, "length": 5175}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\t\tnew ColumnInfo (\"IsCaseSensitive\", typeof(bool)),"], "all_classes": null, "length": 4122}
{"pred": "\t\t\t\tu = q[0];\n\t\t\t\tv = r[0];\n\t\t\t\tr = q;\n\t\t\t\tq = t;\n\t\t\t\tt = new int[2];\n\t\t\t\tdo {\n\t\t\t\t\t", "answers": ["\t\t\t\tBigInteger tn = u1.Subtract(v1.Multiply(q[0]));"], "all_classes": null, "length": 5148}
{"pred": "\t\t\t\tif (_abi == null) {\n\t\t\t\t\t_abi = new GTypeAbility (typeof (Message), new GTypeInitableClass (typeof (MessageClass), new GTypeInitableInterface (typeof (GObject), \"GObject\"), new GTypeInitableInterface", "answers": ["\t\t\t\tif (_abi_info == null)"], "all_classes": null, "length": 4205}
{"pred": "               if (theFile != null && theFile.exists()) {\n                    // The user has selected a file that already exists.\n                    // We need to ask the user if they want to overwrite it.\n                    int answer = JOptionPane.showConfirmDialog(\n                           ", "answers": ["                if (!name.endsWith(\".\" + filter.getExtension())) {"], "all_classes": null, "length": 5940}
{"pred": "           for obj in tmp:\n                if obj.status == 'pending':\n                    tmp2.append(obj)\n                else:\n                    continue\n            if len(tmp2) > 0:\n                context = {\n                    'pending_list': tmp2", "answers": ["                5: SortableHeader('Outline', False, '', 'col-center'),"], "all_classes": null, "length": 4072}
{"pred": "           string[] args = new string[] { \"1\", \"2\", \"3\" };\n            p.invoke(\"test\", args);\n        }\n        public static void test(string[] args)\n        {\n            Console.WriteLine(\"test called with {0} arguments\", args.Length);", "answers": ["            string[][] ss11 = new string[][] { s111, s112 };"], "all_classes": null, "length": 4165}
{"pred": "       field_name = self._meta.get_field_by_name(unique_together[0])\n        return _('%(model_name)s %(field_name)s %(connective)s %(other_field_name)s %(other_field)", "answers": ["            field = opts.get_field(unique_check[0])"], "all_classes": null, "length": 4513}
{"pred": "#~ for i in range(len(steps)):\n#~     #~ print \"Step %i: %s\" % (i+1, steps[i])\n#~     #~ run_step(steps[i])\n#~     #~ print \"Step %i finished\" %", "answers": ["            for key, value in sorted(paramtestdic.iteritems()):"], "all_classes": null, "length": 4363}
{"pred": "\n# This is a placeholder for the actual code that will be used to\n# read the bundle file.\n#\n# The actual code will depend on the format of the bundle file.\n#\n# For now, we just return an empty list.\ndef read_bundle_file(file):\n", "answers": ["    while len(h) == 20:"], "all_classes": null, "length": 4561}
{"pred": "       if (contentPane != null) {\n            width = contentPane.getPreferredSize().width;\n            height = contentPane.getPreferredSize().height;\n        }\n        if (contentPane != null && contentPane.getComponentCount() > 0) {\n            Component", "answers": ["        prefWidth = Math.min(prefWidth, width);"], "all_classes": null, "length": 6347}
{"pred": "```python\n        ca = caseless_ast.parse(ca)\n```\nThis line of code is used to parse a string representation of an AST\n(Abstract Syntax Tree) into an actual AST object. The `caseless_ast`\nmodule is used to make the par", "answers": ["        cas = literal_eval(cas_data_str)"], "all_classes": null, "length": 5088}
{"pred": "\t\t\t\tif (bitmap.GetPixel(x, y).ToArgb() != Color.Empty.ToArgb()) {\n\t\t\t\t\tpixel = bitmap.GetPixel(x, y);\n\t\t\t\t\t// Create a new cursor from the hotspot and the pixel", "answers": ["\t\t\t\t\tpixel = cursor_bitmap.GetPixel(x, y);"], "all_classes": null, "length": 6831}
{"pred": "\t\t\tforeach(Operatory oper in Crud.OperatoryList()){\n\t\t\t\tif(oper.OpStatus==OpStatus.Available){\n\t\t\t\t\tDateTime start=oper.OpStart;\n\t\t\t\t\tDateTime end=oper.OpEnd;\n\t", "answers": ["\t\t\tList<DateTime> listUniqueDays=new List<DateTime>();"], "all_classes": null, "length": 4064}
{"pred": "       rc = String.Compare(this.Text, other.Text, StringComparison.OrdinalIgnoreCase);\n        return rc;\n      }\n      /* If we get here, then both strings are null.  In this case, we\n      ** return zero to indicate that they are equal.\n", "answers": ["        pMem1.enc == SQLITE_UTF16LE || pMem1.enc == SQLITE_UTF16BE );"], "all_classes": null, "length": 5688}
{"pred": "                       data.NativeName = packet.ReadCString();\n                    }\n                }\n            }\n            data.Name = packet.ReadCString();\n            data.Parent = packet.ReadInt32();\n            data.Type = packet.ReadInt32();\n           ", "answers": ["                        data.MaxPower[i] = packet.ReadInt32(\"MaxPower\", indexes, i);"], "all_classes": null, "length": 4140}
{"pred": "=====================\n    for idx, (snp, ref, alt, pos, chrom, sample_name) in enumerate(self.snps):\n        # get the sample data\n        sample_data = self.samples[sample_name]\n        # get the genotype\n        gen", "answers": ["        seq = self.seqs[nidx]"], "all_classes": null, "length": 7755}
{"pred": "           Index ix = allIndexes[classIndex];\n            if (ix == null) {\n                ix = new Index(classIndex, this);\n                allIndexes[classIndex] = ix;\n            }\n            return ix;\n            // Index ix", "answers": ["            Index[] perClassIndexes = indexByTagAndClass[tag];"], "all_classes": null, "length": 5112}
{"pred": "           this.menubar.Items.Add(this.menufile);\n            this.menubar.Items.Add(this.menuedit);\n            this.menubar.Items.Add(this.menuoptions);\n            this.menubar.Items.Add(", "answers": ["            this.quoteLabel.Size = new System.Drawing.Size(46, 16);"], "all_classes": null, "length": 4569}
{"pred": "       self.interval = rule.interval\n        self.interval_count = rule.interval_count\n        self.interval_type = rule.interval_type\n        self.weekday = rule.weekday\n        self.weekday_interval = rule.weekday_interval\n        self.", "answers": ["            data['rrule_type'] = rrule_type[rule._freq]"], "all_classes": null, "length": 4433}
{"pred": "               // Copy the decoded data to the output\n                for (int i = 0; i < currCols; i++) {\n                    int index = (currRow * currCols + i) * bpc;\n                    byte b = curr[i];\n                   ", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "     get { return DefaultInstance; }\n    }\n\n    private static readonly ReportDescriptor descriptor = new ReportDescriptor {\n      Name = \"Report_Report\",\n      FieldDescriptorList = new FieldDescriptorList {\n        FieldDescriptor.FromDescriptor(\n          Report.Fields.ReportId,\n         ", "answers": ["      get { return DefaultInstance; }"], "all_classes": null, "length": 5791}
{"pred": "                       AAnalysisRow ap = new AAnalysisRow();\n                        ap.Load(Convert.ToInt32(Row[\"AnalysisID\"]));\n                        // TODO: check if ap.IsValid()\n                        // TODO: check if ap.IsActive()\n                        // TODO:", "answers": ["                        AApDocumentDetailRow DetailRow = (AApDocumentDetailRow)rv.Row;"], "all_classes": null, "length": 5677}
{"pred": "\t\t\t\tif (m_Owner is PlayerMobile)\n\t\t\t\t{\n\t\t\t\t\tPlayerMobile pm = (PlayerMobile)m_Owner;\n\t\t\t\t\tpm.SendMessage(\"You have completed the quest: {0}\", QuestName);\n\t\t\t", "answers": ["\t\t\t\tif (RewardItem != null)"], "all_classes": null, "length": 4101}
{"pred": "\t\t\treturn items.Length;\n\t\t}\n\t    }\n\t    public T this[int index]\n\t    {\n\t        get\n\t        {\n\t            return items[index];\n\t        }\n\t        set\n\t        {\n\t            items[index", "answers": ["\t            return lastItemIndex - firstItemIndex + 1;"], "all_classes": null, "length": 5727}
{"pred": "               ArgumentNullException.ThrowIfNull(AControl, \"AControl\");\n                if (AControl is TextBox)\n                {\n                    ArgumentOutOfRangeException.ThrowIf((AControl as TextBox).Multiline, \"AControl is a multiline TextBox", "answers": ["                if (AControlLabel != null)"], "all_classes": null, "length": 7766}
{"pred": "\t\t\treturn new ArrayList(Unique(target));\n\t\t}\n\t\t/// <summary>\n\t\t/// Returns a new list containing only the unique elements of the specified list.\n\t\t/// </summary>\n\t\t/// <typeparam name=\"T\">The type of elements in the", "answers": ["\t\t\treturn Unique(target, null);"], "all_classes": null, "length": 4367}
{"pred": "# Define a function to parse the dynamic section header table\ndef parse_dyn_strtab(elf, dynstrtab):\n    strtab = []\n    for i in range(elf.ehdr.e_shnum):\n        if elf.shdr[i].sh_type == S", "answers": ["DT_PPC64_OPD    = (DT_LOPROC + 1)"], "all_classes": null, "length": 6803}
{"pred": "           }\n            List<Command> commands = new List<Command>();\n            foreach (Type type in Assembly.GetExecutingAssembly().GetTypes())\n            {\n                if (type.IsSubclassOf(typeof(Command)))\n                {\n                    commands.Add((Command)", "answers": ["                html.WriteLine(\"      table { width: 100%; }\");"], "all_classes": null, "length": 5413}
{"pred": "\t\t\tWrite(buff, 0, buff.Length);\n\t\t\tRead(buff, 0, buff.Length);\n\t\t\treturn buff;\n\t\t}\n\t\t/// <summary>\n\t\t/// Reads data from the device\n\t\t/// </summary>", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "=====================\n                else:\n                    sd = np.sqrt(np.sum((x - c) ** 2))\n                    heappush(nearest, (sd, x))\n                    if len(nearest) > n:\n                        heappop(ne", "answers": ["                    sd[node.split_dim] = np.abs(node.split - x[node.split_dim])"], "all_classes": null, "length": 5233}
{"pred": "\t\tassertEquals(\"1. Nf3\", rules.formatMove(game.getLastMove()));\n\t\tassertEquals(\"1. Nf3\", rules.formatMove(game.getLastMove()));\n\t\tassertEquals(\"1. Nf3\", rules.formatMove(game.getLastMove", "answers": ["\t\tassertEquals(acn, rules.formatGame(game, Locale.ENGLISH));"], "all_classes": null, "length": 4129}
{"pred": "   catch (Exception e)\n    {\n      return null;\n    }\n  }\n\n  /**\n   *  This method is called when the Feature is selected.\n   *  It is used to set the Feature's colour and to\n   *  highlight the Feature's parent", "answers": ["    catch (InvalidRelationException e){}"], "all_classes": null, "length": 7770}
{"pred": "\t\t\t\t\tstring spellName = reader.ReadString();\n\t\t\t\t\tint spellID = reader.ReadInt();\n\t\t\t\t\tint spellLevel = reader.ReadInt();\n\t\t\t\t\tint spellCost = reader.ReadInt();\n\t\t\t\t", "answers": ["\t\t\t\t\tstring str = reader.ReadString();"], "all_classes": null, "length": 5717}
{"pred": "\t\t\t\t\t\t\t\t// Create a new sector for the new sector\n\t\t\t\t\t\t\t\t//ld.sectors.Add(newsector);\n\t\t\t\t\t\t\t\t// Add the new sector to the map\n\t\t\t\t\t\t\t\t", "answers": ["\t\t\t\t\t\t\t\tif(newsector == null) return false;"], "all_classes": null, "length": 5677}
{"pred": "   translation = DocumentTranslation.objects.get(\n        document=parent_document,\n        language=request.LANGUAGE_CODE,\n    )\nexcept DocumentTranslation.DoesNotExist:\n    # If the translation doesn't exist, create a new one.\n    translation = Document", "answers": ["        doc = parent_doc.translations.get(locale=document_locale)"], "all_classes": null, "length": 4854}
{"pred": "           }\n            \n            // now we'll create a new table\n            if (lNewTable==null) {\n                lNewTable = new Table(lNewWidth, lNewHeight);\n            }\n            \n            // we'll copy the cells from the old table to the", "answers": ["                lDummyHeights [i] = lNewMaxRows;"], "all_classes": null, "length": 5053}
{"pred": "\t\t\t\t\treference.reference = this.Run<Reference<Reference<Reference<Reference<Reference<Reference<Reference<Reference<Reference<Reference<Reference<Reference<Reference<Reference<Reference<Reference<Reference<Reference<Reference<Reference<Reference<Reference<Reference<Reference<Reference<Reference", "answers": ["\t\t\t\t\t\treferenceNode.AddLinkTo( GetReferenceNode( script ) );"], "all_classes": null, "length": 4267}
{"pred": "\t\t\t\t\t\tif (trait != null)\n\t\t\t\t\t\t\tnode.RemoveChild(trait);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "answers": ["\t\t\t\t\t\tif (trait != null)"], "all_classes": null, "length": 5181}
{"pred": "=====================\n\nvalues = list(self)\nreturn SortedList(values)\n\nThis code creates a new SortedList instance by passing the list of elements from the current SortedList instance to its constructor. This ensures that the new SortedList instance is also sorted.\n\nHere'", "answers": ["        return self.__class__(values, key=self._key)"], "all_classes": null, "length": 7674}
{"pred": "=====================\n    for obj in states:\n        if not isinstance(obj, (Session, Query)):\n            obj.session = self\n            obj.identity_map_state = states\n            obj.identity_map = self.identity_map\n            obj.flush_callbacks = self", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "               else if (from.Race == Race.Human && this.RequiredRace != Race.Human)\n                {\n                    from.SendMessage(\"You cannot use this item.\");\n                    return false;\n                }\n            }\n            return base.CanEqu", "answers": ["                    else if (this.RequiredRace == Race.Gargoyle)"], "all_classes": null, "length": 4125}
{"pred": "\t\t\t\tnew sys.sysindexes\n\t\t\t\t{\n\t\t\t\t\tName = \"IX_sysobjects_id\",\n\t\t\t\t\tIsPrimaryKey = false,\n\t\t\t\t\tIsUnique = true,\n\t\t\t\t\tIsDescending", "answers": ["\t\t\t\tnew syspalvalue { @class = \"LEOP\", value = 0, name = \"TABLE\" },"], "all_classes": null, "length": 7135}
{"pred": "       for (int i = 0; i < emails.length; i++) {\n            final String email = emails[i];\n            final int index = i;\n            new Thread(new Runnable() {\n                @Override\n                public void run() {\n                    try", "answers": ["        if (emails == null) {"], "all_classes": null, "length": 4282}
{"pred": "           return ToString(result, true);\n        }\n        private static string ToString(object obj, bool prettyPrint = false)\n        {\n            if (obj == null)\n                return \"null\";\n            string json = string.Empty;\n            try\n            {\n              ", "answers": ["            if (Diff.Count > 0 && DiffMode)"], "all_classes": null, "length": 4201}
{"pred": "\t\t\tif (blockSize < 1) {\n\t\t\t\tthrow new ArgumentException(\"blockSize must be > 0\");\n\t\t\t}\n\t\t\t\n\t\t\tif (bufferSize < blockSize) {\n\t\t\t\tbufferSize = blockSize;\n", "answers": ["\t\t\tint n = BZip2Constants.baseBlockSize * blockSize100k;"], "all_classes": null, "length": 5391}
{"pred": "                       int x, y, w, h, actor, hitActor;\n                        x = ReadInt32();\n                        y = ReadInt32();\n                        w = ReadInt32();\n                        h = ReadInt32();\n                        actor = ReadInt3", "answers": ["                        var a = Actors[args[1]];"], "all_classes": null, "length": 4518}
{"pred": "                   iFile.close();\n                }\n            }\n            catch (final IOException e)\n            {\n                throw new ObjectNotFoundException(\"Unable to open file: \" + e.getMessage());\n            }\n        }\n\n        private void unlockFile ()\n        {\n           ", "answers": ["                    if (iFile != null)"], "all_classes": null, "length": 4288}
{"pred": "\t\t\ttrackError += trackSegmentError ;\n\t\t\ttrackError += \" - \" + trackSegment.getDescription() ;\n\t\t}\n\t\treturn trackError ;\n\t}\n\t/**\n\t * @param args\n\t */\n\tpublic static void main(String[] args", "answers": ["\t\t\tif (trackSegmentError > trackError)"], "all_classes": null, "length": 5623}
{"pred": "\t\t\t\t\"    ' This is a test for the VB.NET compiler bug #11333\n\t\t\t\t\"    ' The bug is that the compiler does not allow a\n\t\t\t\t\"    ' constant to be assigned to a variable of type\n\t\t\t", "answers": ["\t\t\t\t\"    {0}\" +"], "all_classes": null, "length": 5620}
{"pred": "               });\n            #endregion Jhin\n            #endregion\n            #endregion\n            #endregion\n            #endregion\n            #endregion\n            #endregion\n            #endregion\n            #endregion\n            #endregion\n            #endregion\n            #endregion\n            #endregion\n            #endregion\n            #", "answers": ["                    ExtraMissileNames = new[] { \"JhinRShotMis4\" },"], "all_classes": null, "length": 4463}
{"pred": "                           new BaseHouse(new Point3D(x, y, z)).AddComponent(new SurveyorGump(new Point3D(x, y, z), new BaseHouse(new Point3D(x, y, z))));\n                            m_Mobile.SendG", "answers": ["                            if (m_House.MovingCrate != null)"], "all_classes": null, "length": 5532}
{"pred": "\t\tplot = new Plot(\"\", new double[0], new String[0], new Color[0], new String[0]);\n\t\tplot.setBackgroundColor(Color.white);\n\t\tplot.setFont(new Font(\"SansSerif\", Font.BOLD, 1", "answers": ["\t\tString title = getFirstString();"], "all_classes": null, "length": 5653}
{"pred": "           self.title = self.getLocalizedString( 10001 )\n            self.skin.setProperty( \"windowtitle.text\", self.title )\n            self.skin.setProperty( \"windowtitle.font\", \"Regular;22\" )\n            self", "answers": ["                        widgetTempName = xbmc.getInfoLabel(widgetName)"], "all_classes": null, "length": 6955}
{"pred": "       return encode(source, 0, source.length, null, 0);\n    }\n\n    /**\n     * Encodes a byte array into a base64 encoded string.\n     *\n     * @param source The byte array to encode.\n     * @return The base6", "answers": ["        byte[] encoded = null;"], "all_classes": null, "length": 5023}
{"pred": "           mnem[ishr] = \"ishr\";\n            mnem[iushr] = \"iushr\";\n            mnem[iand] = \"iand\";\n            mnem[ior] = \"ior\";\n            mnem[ixor] = \"ixor\";", "answers": ["            mnem[ishr] = \"ishr\";"], "all_classes": null, "length": 6113}
{"pred": "# This is a Python 2.x compatibility layer.  It is not used in Ansible.\n# It is here for backwards compatibility with some older modules.\n# It is not recommended to use this code in new modules.\n#\n# The following code is a Python 2.x compatibility", "answers": ["            umask = os.umask(0)"], "all_classes": null, "length": 7132}
{"pred": "\t\t\t\t\tfor (int i = 0; i < Menus.Count; i++) {\n\t\t\t\t\t\tif (Menus [i].Name [0] == c) {\n\t\t\t\t\t\t\tselected = i;\n\t\t\t\t\t\t", "answers": ["\t\t\t\t\tforeach (var mi in Menus [selected].Children){"], "all_classes": null, "length": 7643}
{"pred": "       if (width > Integer.MAX_VALUE || height > Integer.MAX_VALUE) {\n            throw new IllegalArgumentException(\"Image dimensions too large\");\n        }\n    }\n}\n/*\n * Copyright (c) 1995, 1996, 199", "answers": ["        int lastPixelOffset = (width - 1) * pixelStride;"], "all_classes": null, "length": 4323}
{"pred": "   def get_vm_info(self):\n        \"\"\"\n        Get the information of the running VM.\n        \"\"\"\n        # TODO: Implement this method\n        # This method should return a dictionary with the following keys:\n        # - 'name': The name of the VM\n        # -", "answers": ["        shm = int(open(filename).read().split()[2])"], "all_classes": null, "length": 7764}
{"pred": "# TODO: Add a check for the cursor being null, and return a 400 Bad Request\n#       if it is.\n# TODO: Add a check for the cursor being too old, and return a 404 Not Found\n#       if it is.\n# TODO: Add a", "answers": ["    exclude_types = args.get('exclude_types')"], "all_classes": null, "length": 4956}
{"pred": "   # The following fields are used for auditing purposes.\n    # They are not used for any other purpose.\n    created_at = models.DateTimeField(auto_now_add=True)\n    last_modified_at = models.DateTimeField(auto_now=True)\n   ", "answers": ["    objects = CourseEnrollmentManager()"], "all_classes": null, "length": 4276}
{"pred": "\n    self.client.call('system-config-sshd.service', 'restart')\n\n    # This is a blocking call, so we need to wait for it to finish\n    # before we continue.\n    #\n    # We can't use the 'systemctl'", "answers": ["        system_id = self.get_system_id(system)"], "all_classes": null, "length": 5050}
{"pred": "# Define a function to convert a LilyPond duration to a Python duration.\ndef lilypond_duration_to_python_duration(lilypond_duration):\n# Parse the LilyPond duration string.\nparsed_lilypond_duration = LilyPondParser().parse(lily", "answers": ["        'types': ('general-music', 'sequential-music',),"], "all_classes": null, "length": 4888}
{"pred": "\t\t\t\t.Append (base.ToString ())\n\t\t\t\t.ToString ();\n\t\t}\n\t}\n}", "answers": ["\t\t\t\t.Append (base.ToString ()).ToString ();"], "all_classes": null, "length": 5367}
{"pred": "               chr.dWorldSetContactFilter(chr.dGeom, null);\n                // Set the contact filter to our custom filter\n                // which will only allow collisions with other characters\n                // and not with the ground or other objects\n                //chr.dWorldSet", "answers": ["                if (chr.Shell == IntPtr.Zero || chr.Body == IntPtr.Zero)"], "all_classes": null, "length": 6278}
{"pred": "   for t in ts:\n        t.start()\n    # wait for all threads to finish\n    for t in ts:\n        t.join()\n    # STAGE 1: END\n    # STAGE 2: BEGIN\n    # spawning status thread\n    status_", "answers": ["        update_t = StatusUpdater(total_recs, finished_queue)"], "all_classes": null, "length": 6540}
{"pred": "#     @api.multi\n#     @api.depends('invoice_line_ids')\n#     def _compute_total_quantity(self):\n#         for invoice_line in self.invoice_line_ids:\n#             invoice_line.total_", "answers": ["        digits= dp.get_precision('Product Price'),"], "all_classes": null, "length": 4978}
{"pred": "\n    def __init__(self, label, size, dtype=None, shape=None, order='C'):\n        \"\"\"\n        Create a new NDArray with the given label, size, data type, shape and\n        byte order.\n\n        :param label: A label for the array", "answers": ["        data = self.get_data(variables, gather, clear, annotations)"], "all_classes": null, "length": 5678}
{"pred": "               return new NumberExpression(\n                        -value.doubleValue());\n            }\n        };\n    }\n    /**\n     * Creates a new {@code NumberExpression} instance.\n     *\n     * @param value the value of the expression\n     */\n    protected Expression(Number", "answers": ["                Class<? extends Number> type = value.getClass();"], "all_classes": null, "length": 5044}
{"pred": "               });\n            #endregion Lucian\n            #region Lux\n            SpellSlot Q, W, E, R;\n            SpellSlot Q_Slot = new SpellSlot(SpellSlot.Q, 250);\n            SpellSlot W_Slot = new SpellSlot", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "           \"   NEW: \" + this);\n        }\n        return this;\n    }\n    \n    /**\n     * Helper method to update the node's properties.\n     *\n     * @param node the node to update\n     * @param properties the properties to update\n    ", "answers": ["                    \"   NEW: \" + nodeUpdate);"], "all_classes": null, "length": 6068}
{"pred": "     if (isFlex) {\n        // STEP 7: Calculate the size of the flex container\n        // The size of the flex container is the maximum size of its children\n        // plus any padding and borders.\n        float totalSize = 0;\n        for (int i", "answers": ["      for (i = startOfLineIndex; i < endOfLineIndex; ++i) {"], "all_classes": null, "length": 4941}
{"pred": "\t\t\t\tyAxis.DrawGridLines(g, yAxis.Minimum, yAxis.Maximum, yAxis.MajorGridLines.IsVisible, yAxis.MinorGridLines.IsVisible, yAxis.MajorGridLines.Color, yAxis.MinorGridLines", "answers": ["\t\t\t\tyAxis.DrawGrid( g, this, scaleFactor, shiftPos );"], "all_classes": null, "length": 4173}
{"pred": "           if (info != 0)\n                throw new Exception(\"LAPACK error: \" + info);\n            return ret;\n        }\n        /// <summary>\n        /// QR decomposition of a complex matrix\n        /// </summary>\n        /// <param name=\"A\">The", "answers": ["            if (info < 0)"], "all_classes": null, "length": 4728}
{"pred": "               if (c != null && c instanceof JTextComponent) {\n                    JTextComponent tc = (JTextComponent) c;\n                    tc.setComponentOrientation(ComponentOrientation.LEFT_TO_RIGHT);\n                }\n            }\n        }\n    }\n", "answers": ["                if ((c != null)"], "all_classes": null, "length": 9124}
{"pred": "\t\t\t\tif (c == '\\r') {\n\t\t\t\t\tif (peek () == '\\n') {\n\t\t\t\t\t\t++line;\n\t\t\t\t\t\t++col;\n\t\t\t\t\t\tget_char ();\n\t\t\t\t", "answers": ["\t\t\t\tswitch (c) {"], "all_classes": null, "length": 8996}
{"pred": "```python\n        for dep in self.__deps:\n            if not dep.isSatisfied():\n                self.__state = \"ERROR\"\n                self.__error = \"Dependency not satisfied: %s\" % dep\n                return\n```\nThis code checks if all", "answers": ["        depStates = { n : s.copy() for (n,s) in states.items() }"], "all_classes": null, "length": 8648}
{"pred": "           xmlWriter.WriteStartElement(\"Document\");\n            xmlWriter.WriteAttributeString(\"Name\", \"Layout.xml\");\n            xmlWriter.WriteStartElement(\"Layouts\");\n            xmlWriter.WriteAttributeString(\"xmlns:xsi\", \"http://www.w3.org/2", "answers": ["            if (pane.Items.Count > 1)"], "all_classes": null, "length": 8608}
{"pred": "#                     (<a href=\"?page=external&amp;action=delete_collection&amp;collection=%s\">delete</a>)<br />\n#                     <a href=\"?page=external&amp;action=edit_collection&amp;collection=%s\">edit</a", "answers": ["                        &nbsp;(<span class=\"warning\">extra: %(diff)s</span>)<br />"], "all_classes": null, "length": 11089}
{"pred": "\nclass _Request(object):\n    \"\"\"\n        A class to handle the request/response cycle with the server.\n    \"\"\"\n    def __init__(self, network, method, url, params=None, headers=None, body=None):\n        \"\"\"\n            :param network: The", "answers": ["        if type(text) == int:"], "all_classes": null, "length": 9909}
{"pred": "           if (result != FMOD.RESULT.OK)\n            {\n                return result;\n            }\n            sound = new Sound();\n            sound.setHandle(handle);\n            return RESULT.OK;\n        }\n        public RESULT setMode(int mode)\n       ", "answers": ["            if (result != RESULT.OK)"], "all_classes": null, "length": 14097}
{"pred": "#\n# Build the XML document\n#\ndef buildXML(project, output):\n    xml = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<!DOCTYPE api SYSTEM \\\"api.dtd\\\">\\n<api name=\\\"%s\\\">\\", "answers": ["                            desc = escape(desc)"], "all_classes": null, "length": 8020}
{"pred": "#                                                 self._input_x,\n#                                                 self._input_y,\n#                                                 self._input_z,\n#                                                 self._input_w,\n#                                                 self._input_h,\n#                                                 self._input_d", "answers": ["                    columnNum // self.coincidencesShape[1],"], "all_classes": null, "length": 8992}
{"pred": "=====================\n\ndef _CheckNodeIsMaster(lu, node):\n  \"\"\"Check if the given node is the master of the logical unit.\n  @param lu: the logical unit to check.\n  @param node: the node to check.\n  @raise: L{ganes", "answers": ["        check_nodes = [self.new_node_uuid, self.other_node_uuid]"], "all_classes": null, "length": 8172}
{"pred": "# TODO: implement _appendCompletionFile\n# _appendCompletionFile(completionFile, 'mxbe', 'mxbe_completion.py')\n# _appendCompletionFile(completionFile, 'mxbe', 'mxbe_completion.py')\n# _appendCompletionFile(com", "answers": ["        complt += '\\t\\t\\t\\t\\t-\"'"], "all_classes": null, "length": 8122}
{"pred": "           }\n        }\n        public void SetControlOrder(Mobile m, int order)\n        {\n            if (m == null || this.Deleted || m.Deleted || m.ControlMaster != this)\n                return;\n\n            if (m.ControlOrder == order)\n              ", "answers": ["                if (m_ControlMaster != null)"], "all_classes": null, "length": 9893}
{"pred": "       if (parent != null) {\n            Point p = parent.getAbsolutePosition();\n            int x = getAbsoluteX();\n            int y = getAbsoluteY();\n            if (x < p.x || x + getWidth() > p.x + parent.getWidth() ||\n", "answers": ["        if (contains) {"], "all_classes": null, "length": 10298}
{"pred": "                           if (bmp.GetPixel(x, y).R < 128)\n                            {\n                                side1 += 1.0f;\n                                hits1++;\n                            }\n                            x++;\n                        }\n                        if (x", "answers": ["                            side1 += bmp_mono[n1];"], "all_classes": null, "length": 8006}
{"pred": "\t\t\t z = new double[degree + 1];\n\t\t\t z[0] = 1.0;\n\t\t\t for (int i = 1; i <= degree; i++) {\n\t\t\t\t z[i] = Math.pow((1.0 -", "answers": ["\t\t\t z = new double[3];"], "all_classes": null, "length": 9193}
{"pred": "\t\tStringBuilder fields=new StringBuilder();\n\t\tStringBuilder pk=new StringBuilder();\n\t\tStringBuilder pk_values=new StringBuilder();\n\t\tStringBuilder pk_index=new StringBuilder();\n\t\tStringBuilder pk_index_name=new StringBuilder();\n\t\t", "answers": ["        RowMetaInterface tabFields = getTableFields(tableName);"], "all_classes": null, "length": 9895}
{"pred": "\t\t\t//System.out.println(\"Race: \" + race);\n\t\t\t//System.out.println(\"Class: \" + classType);\n\t\t\t//System.out.println(\"Name: \" + name);\n\t\t\t//System.out.println(\"Level", "answers": ["\t\t\tfeIndex = rand.nextInt(allFE.size());"], "all_classes": null, "length": 8696}
{"pred": "\"\"\"\n# Handles the event when the toolbar is being destroyed.\n# This is used to remove the event handlers from the toolbar.\ndef OnDestroy(event):\n    \"\"\"\n    :param `event`: the event object.\n    \"\"\"\n    # Remove the event handlers", "answers": ["        Handles the ``wx.EVT_LEAVE_WINDOW`` event for L{AuiToolBar}."], "all_classes": null, "length": 11431}
{"pred": "           mute = (mute != 0);\n            mute = (mute != 0);\n            mute = (mute != 0);\n            mute = (mute != 0);\n            mute = (mute != 0);\n            mute =", "answers": ["            mute = (m != 0);"], "all_classes": null, "length": 9240}
{"pred": "\tprotected override int[] QuestIds { get; } = new int[] { 12345 };\n}\nThis line of code sets the QuestIds property for the script, which is an array of integers representing the quest IDs that the script is associated with. In this example, the script", "answers": ["\tprotected override int QuestId { get { return 519436; } }"], "all_classes": null, "length": 9147}
{"pred": "           try {\n                ois.close();\n            } catch (IOException e) {\n                // Ignore\n            }\n        }\n        \n        return obj;\n    }\n    \n    /**\n     * Decodes a Base64 encoded string.\n     * @param", "answers": ["            try{ ois.close();  } catch( Exception e ){EncogLogging.log(e);}"], "all_classes": null, "length": 8136}
{"pred": "```python\n            if e.nodeName == 'layout':\n                self.layout = e\n                break\n```\n\nThis code is looking for a node with the name \"layout\" in the XML document. When it finds it, it assigns the node to the `layout`", "answers": ["                if e.nodeType == e.ELEMENT_NODE and e.localName == \"layout\":"], "all_classes": null, "length": 8661}
{"pred": "           {\n                uint num = (uint) (this.ToBigInteger().Sqrt());\n                if (num * num != this.ToBigInteger())\n                    throw new ArithmeticException(\"Square root not an integer\");\n                return num;\n            }\n", "answers": ["                numBits = (numBits >> 1) + 1;"], "all_classes": null, "length": 8360}
{"pred": "       if not cdata or not cdata.get('idx'):\n            return\n        idx = cdata['idx']\n        if idx is None:\n            return\n        # We need to check if the slice is broadcastable with the input tensor\n        # We do this by checking if the slice", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": "```python\n## address-of operator '&' for 'const MyClass&':\ncls.add_property(\"address\", &MyClass.address)\n```\nThis line of code is used to register the address-of operator '&' for the 'const MyClass&' type.", "answers": ["                   is_const=True, is_virtual=True, is_pure_virtual=True)"], "all_classes": null, "length": 10722}
{"pred": "                   Node child = body.getFirstChild();\n                    if (child instanceof TextNode) {\n                        TextNode textNode = (TextNode) child;\n                        if (textNode.getText().trim().length() == 0) {\n                            body = body.getNext", "answers": ["                    Node bodyElement = body.getNode(0);"], "all_classes": null, "length": 9144}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\t\t\tif (PreProcessMessage (ref msg))"], "all_classes": null, "length": 9784}
{"pred": "# mantissa = numpy.random.uniform(low=0.0, high=1.0, size=1)\n# exponent = numpy.random.randint(low=0, high=12, size=1)\n# float_number = mantissa * numpy.pow(2", "answers": ["        if os.path.exists(md_file_path) is False:"], "all_classes": null, "length": 9108}
{"pred": "```python\ndef __import__(name, globals=None, locals=None):\n    \"\"\"\n    This is the top-level import hook.  It is called by the Python interpreter\n    when a module import statement is encountered.  It is responsible for\n    importing the module,", "answers": ["            package = package.rpartition('.')[0]"], "all_classes": null, "length": 8094}
{"pred": "               // UNDONE: This is a hack.  We should be able to do this without the cast.\n                var method = (MethodInfo)this.GetType().GetMethod(\"GenerateMethodCall\", BindingFlags.NonPublic | BindingFlags.Instance);\n                method.", "answers": ["                var methodGroup = (BoundMethodGroup)expression;"], "all_classes": null, "length": 8696}
{"pred": "#        search_str = search_str.replace(r'\\s+', r' ')\n#        search_str = re.sub(r'\\s+', ' ', search_str)\n#        search_str = re.sub(r'\\s+', ' ', search_str)", "answers": ["            search_reg_str = '\\\\b%s\\\\b' % search_terms.replace(' ',"], "all_classes": null, "length": 11879}
{"pred": "#            if not self.__IsDefined(SectionName):\n#                self.__AddSection(SectionName, ObjType)\n#                self.__DefineSection(SectionName, ObjType)\n#            self.__CurrentSection = self.__GetSection(SectionName)\n#", "answers": ["                if not self.__IsKeyword(\"FV\"):"], "all_classes": null, "length": 10845}
{"pred": "```python\n  return self\n```\nclass PBXFileReference(PBXObject):\n  \"\"\"A reference to a file in the project.\n  \"\"\"\n  def __init__(self, fileEncoding, path):\n    super(PBXFileReference, self).__init__", "answers": ["      headers_phase = PBXHeadersBuildPhase()"], "all_classes": null, "length": 11459}
{"pred": "# Get the data for the given x,y,z coordinates\ndef get_data_for_coordinates(x, y, z, instance=None):\n\"\"\"\nRetrieves the data for the given x,y,z coordinates.\n\nParameters\n----------\nx : float\nx-", "answers": ["    post = {'node_ids[{}]'.format(i): n for i, n in enumerate(x)}"], "all_classes": null, "length": 14106}
{"pred": "                       // This is the exponent pattern.  The exponent\n                        // is optional, and if it is present, it must\n                        // be followed by an 'E' or 'e'.\n                        if (pos.length() > 1 && pos.charAt(pos.length()", "answers": ["                        if (useExponentialNotation) {"], "all_classes": null, "length": 11534}
{"pred": "\nclass RichTextCtrl(wx.TextCtrl):\n    \"\"\"\n    A Rich Text Control.\n\n    This is a wrapper around the wxRichTextCtrl class.\n    \"\"\"\n\n    def __init__(self, parent, id=wx.ID_ANY, pos=wx.DefaultPosition", "answers": ["        BeginBatchUndo(self, String cmdName) -> bool"], "all_classes": null, "length": 9452}
{"pred": " [ -x /usr/sbin/lighthtpd ] || exit 0\n  #\n  exec /usr/sbin/lighthtpd -f -p 80\n  \"\"\" )\n      except:\n        print \"Failed to install Lighttpd\"\n        return", "answers": ["  exec lighttpdSvc.sh < /dev/null"], "all_classes": null, "length": 8611}
{"pred": "   if (tractorBeam.getPower() > 0) {\n      // Tractor beam is on\n      int tractorBeamPower = tractorBeam.getPower();\n      int tractorBeamRange = tractorBeam.getRange();\n      int tractorBe", "answers": ["    if (tractor.getY() - target.getY() == -2) {"], "all_classes": null, "length": 8405}
{"pred": "'''\n# Import required modules\nimport json\nimport sys\nimport traceback\nfrom ansible.module_utils.basic import AnsibleModule, missing_required_lib\nfrom ansible.plugins.action import ActionBase\nfrom ansible.utils.display import Display\nfrom ansible.utils", "answers": ["        elif state == 'suspended':"], "all_classes": null, "length": 8276}
{"pred": "       if (subscriptions != null) {\n            m = Mode.get(\"com.redhat.rhn.manager.channel.ChannelManager\");\n            m.set(\"subscriptions\", subscriptions);\n            m.set(\"subscribed\", true);\n            m.set(\"includeUnsub", "answers": ["        List<Map> subDr = Collections.EMPTY_LIST;"], "all_classes": null, "length": 10246}
{"pred": "           for (NativeLibrary lib : nativeLibraries) {\n                if (lib.name.equals(name)) {\n                    if (lib.load(name, file)) {\n                        return;\n                    }\n                }\n            }\n            // no matching library found\n", "answers": ["            int size = libs.size();"], "all_classes": null, "length": 8562}
{"pred": "           state.s1 = s1;\n            state.s2 = s2;\n            state.s3 = s3;\n            state.s4 = s4;\n            state.s5 = s5;\n            state.s6 = s6;\n            state.s", "answers": ["            hqrndseed(s0, s1, state, _params);"], "all_classes": null, "length": 18518}
{"pred": "               hr = rad;\n                if (hr > 0) {\n                    hr = 1.0f / hr;\n                }\n                if (quadrant == 1) {\n                    x1 += hr * (x2 - x1);\n                   ", "answers": ["                hr = (float) radii.getTopRightHorizontalRadius();"], "all_classes": null, "length": 9945}
{"pred": "\n        group.add_option(\"--debug\", action=\"store_true\", dest=\"debug\",\n                        help=\"Enable debugging\")\n\n        group.add_option(\"--debuglevel\", type=\"int\", dest=\"debuglevel\",\n                        help=\"Set debug level (0-5", "answers": ["        group.add_option(\"\", \"--rpmverbosity\", default=None,"], "all_classes": null, "length": 8933}
{"pred": "           for (int i = 0; i < 3; i++) {\n                try {\n                    // parse the values from the map\n                    // and put them into the DataMap\n                    // (this is the only place where\n                    // the DataMap is used)", "answers": ["            while (!successful && retryCount-- > 0) try {"], "all_classes": null, "length": 10896}
{"pred": "               }\n                else\n                {\n                    module.AddDebugInformation(new CSharpDebugInformation(\n                        new CSharpDebugDocument(\n                            new CSharpDebugDocumentMetadata(\n                                new CSharpDebugDocumentMetadataProperties(\n                                ", "answers": ["                        if (guid == existingDoc.SourceHashKind)"], "all_classes": null, "length": 8489}
{"pred": "                   while self.tokentype != '(':\n                        if self.tokentype == EOF:\n                            raise lalrparse.ParseError(\n                                'Unexpected end of input', self.pos)\n                        value = self.getnext()\n                       ", "answers": ["                    if self.tok[0] != ')':"], "all_classes": null, "length": 10276}
{"pred": "   return json.loads(json_data)\n#-----------------------------------------------------------------------------\n@registry.register\nclass JsonResponse(object):\n    \"\"\"\n    A response that returns JSON data.\n    \"\"\"\n    def __init__(self, json_data):\n        \"\"\"\n        :param json", "answers": ["        options_value = json_d.get('options', [])"], "all_classes": null, "length": 13691}
{"pred": "         p += zSqlite3Strlen(zSqlite3Malloc(zSqlite3Size(zSqlite3Malloc(p, zSqlite3Size(zSqlite3Malloc(p, 100))), 100)), 1);\n          p", "answers": ["          Debug.Assert( pMem.z != null );"], "all_classes": null, "length": 8052}
{"pred": "   json = form.getvalue('json')\n    if json:\n        try:\n            data = json.decode('utf-8')\n        except:\n            return self.error(400, \"Invalid JSON format\")\n\n    # ...\n\n    # ...\n\n   ", "answers": ["        json_data = json.loads(str(form['jsondata']))"], "all_classes": null, "length": 9234}
{"pred": "'''\n# Adding the code to check if the disks are already present or not\n# This can be done by querying the VMware API for the list of disks and comparing it with the disks to be added\n# If the disks already exist, then the module should exit with a message", "answers": ["                disk_type = expected_disk_spec.get('type', '').lower()"], "all_classes": null, "length": 9014}
{"pred": "\t\t\treturn names [(int) opcode];\n\t\t}\n\t\t\n\t\tpublic static string GetName (OpCode opcode)\n\t\t{\n\t\t\treturn names [(int) opcode];\n\t\t}\n\t\t\n\t\tpublic static string Get", "answers": ["\t\t\treturn names [(int) ot] [1];"], "all_classes": null, "length": 8622}
{"pred": "               this.IsExpanded = false;\n            }\n            /// <summary>\n            /// Expand this branch\n            /// </summary>\n            public virtual void Expand() {\n                this.IsExpanded = true;\n            }\n            /// <summary>\n            ///", "answers": ["                this.Children = new ArrayList();"], "all_classes": null, "length": 8049}
{"pred": "#----------------------------------------------------------------------\n# Stock Location\n#----------------------------------------------------------------------\nclass stock_location(osv.osv):\n    _inherit = 'stock.location'\n    _columns = {\n        'warehouse_id': fields.many2one('stock.warehouse',", "answers": ["        if acc_src == acc_valuation:"], "all_classes": null, "length": 9425}
{"pred": "   out = dates.roll(axis=0, shift=offset, center=False)\n    \"\"\"\n    out = dates.roll(axis=0, shift=offset)\n    \"\"\"\n    out : ndarray\n        The adjusted dates.\n    \"\"\"\n    return out\n\n# First", "answers": ["    out : array of datetime64[D]"], "all_classes": null, "length": 23278}
{"pred": "       return self._intersect(self, other,\n                              self._dim_names(self),\n                              self._dim_names(other),\n                              self._index_arrays(self),\n                              self._index_arrays(other),\n                              self._data_", "answers": ["                subsets = dim_coord_subset()"], "all_classes": null, "length": 8031}
{"pred": "\tthis.region = region;\n}\n/**\n * Sets the text of the control to the given string.\n *\n * @param text the new text\n */\npublic void setText (String text) {\n\tcheckWidget ();\n\tif (text == null) error (SWT.", "answers": ["\tlong /*int*/ hRegion = 0;"], "all_classes": null, "length": 16705}
{"pred": "       autoclaim = self.request.args.get('autoclaim', None)\n        if autoclaim:\n            self.autoclaim(autoclaim)\n            return\n\n        # Get the form data\n        form = self.request.form\n", "answers": ["                    operation_parts = {'pid': person_id,"], "all_classes": null, "length": 8290}
{"pred": "====================\n\n    CourseConfiguration.set_email_configuration(\n        request,\n        settings.EMAIL_BACKEND,\n        settings.EMAIL_HOST,\n        settings.EMAIL_PORT,\n        settings.EMAIL_HOST_USER,\n        settings.EMAIL_", "answers": ["            u\"User %s (%s) opted in to receive emails from course %s\","], "all_classes": null, "length": 8301}
{"pred": "# Here's the code to generate the Rust code for the given IDL.\ndef generateRustCode(idl):\n    \"\"\"\n    Generates Rust code for the given IDL.\n    \"\"\"\n    # XXX: This is a placeholder.  We should generate the Rust", "answers": ["        if len(arrayObjectMemberTypes) > 0:"], "all_classes": null, "length": 12254}
{"pred": "#~ class _ParseResults(object):\n#~     \"\"\"\n#~     Parse results object, containing parsed tokens and parse tree.\n#~     \"\"\"\n#~     def __init__(self, tokens, tree=None):\n#~         self.tokens = tokens\n#~         self", "answers": ["                    tokenlist[ikey] = _ParseResultsWithOffset(dictvalue,i)"], "all_classes": null, "length": 11936}
{"pred": " FunctionCall(\n    'FunctionCall',\n    'FunctionCall',\n    'FunctionCall',\n    'FunctionCall',\n    'FunctionCall',\n    'FunctionCall',\n    'FunctionCall',\n    'FunctionCall',\n    'FunctionCall',\n    'FunctionCall',", "answers": ["    if matched_zero and matched_zero.group(1) != '0':"], "all_classes": null, "length": 20316}
{"pred": "#\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["          if after == NULL_HASH:"], "all_classes": null, "length": 10689}
{"pred": "           url = _get_url_from_record(tuple_list[0])\n            if url is None:\n                continue\n            # Let's check if the url is a file or a directory\n            if os.path.isfile(url):\n                # If it is", "answers": ["            url = field_get_subfield_values(fft, 'a')"], "all_classes": null, "length": 8249}
{"pred": "       List<Integer> allowedIfds = new ArrayList<Integer>();\n        for (int i = 0; i < Ifd.NUM_IFDS; i++) {\n            if ((Ifd.IFD_MASK & (1 << i)) != 0 && (Ifd.IFD", "answers": ["        ArrayList<Integer> l = new ArrayList<>();"], "all_classes": null, "length": 9563}
{"pred": "           c = b;\n        }\n        /*************************************************************************\n         *\n         *  FFTW3 wrapper for complex-valued 1D FFT\n         *\n         *************************************************************************/\n        public static void fft1d_complex(complex[]", "answers": ["            c = new double[m];"], "all_classes": null, "length": 10316}
{"pred": "       };\n    }\n}", "answers": ["            \"\\x1FF2\\x1F7C\\x03B9\", /* 1FF2; 1F7C 03B9; Case map */"], "all_classes": null, "length": 14273}
{"pred": "       drawImage(bImg, x, y, null);\n        // The following code is for the case where the image is not opaque\n        if (bImg.getTransparency() != Transparency.OPAQUE) {\n            // Create a composite context\n            CompositeContext cc =", "answers": ["        if (bImg == null) {"], "all_classes": null, "length": 14028}
{"pred": "     int pkgEnd = fileName.lastIndexOf('/');\n      if (pkgEnd == -1) {\n        return null;\n      }\n      return getPackage(fileName, pkgEnd + 1);\n    }\n  }\n\n  /**\n   * Returns the package name", "answers": ["      Path path = new Path(new String(fileName, 0, pkgEnd));"], "all_classes": null, "length": 9133}
{"pred": "\n# Extract the names of the namespaces.\nnamespaces = []\nfor line in open(os.path.join(os.path.dirname(__file__), 'sip.sip')).readlines():\n    if line.startswith('class '):\n        namespaces.", "answers": ["                if adding and rhs != \"\":"], "all_classes": null, "length": 8273}
{"pred": "           if text.startswith(indent):\n                logical += [(token_type, text[:len(indent)])]\n                text = text[len(indent):]\n                indent = \"\"\n                continue\n            elif text.startswith(comment_prefix):", "answers": ["                start_line, start = t[2]"], "all_classes": null, "length": 8040}
{"pred": "\n    def parse_logfile(self, logfile):\n        \"\"\"\n        Parse the logfile and return the number of tasks that were\n        successfully completed.\n        \"\"\"\n        self.log.info(\"Parsing logfile %s\", logfile)\n        self.log.debug(\"", "answers": ["        with open(filename, \"r\") as inputfile:"], "all_classes": null, "length": 9404}
{"pred": "\t\t\t\tif (mediaFile.MediaType == MediaType.Image)\n\t\t\t\t{\n\t\t\t\t\t// Assign the image file to the Image property of the GalleryItem\n\t\t\t\t\tgalleryItem.Image = (Bitmap)Image.FromFile(media", "answers": ["\t\t\t\tif (mediaEncoderItems.Length != 3)"], "all_classes": null, "length": 11381}
{"pred": "           for self.i, self.x in enumerate(self.y):\n                self.d[self.i] = math.sqrt(sum([(self.x[j] - self.y[i][j])**2 for j in range(len(self.x))", "answers": ["            for k in self.splitKeySet.intersection(tree2.splitKeySet):"], "all_classes": null, "length": 10347}
{"pred": "class Cube(object):\n    \"\"\"\n    A :class:`Cube` is a container for a set of :class:`DataArray`s and\n    :class:`Attribute`s.\n    \"\"\"\n    def __init__(self, name, dimensions, data, attributes=None,\n", "answers": ["                kwargs = dict(kwargs)"], "all_classes": null, "length": 11922}
{"pred": "# def _query_event_listener(mapper, target, name, value):\n#     \"\"\"\n#     A simple event listener for :class:`QueryEvent`s.\n#     \"\"\"\n#     if not inspect.isfunction(value):\n#         return\n#     mapper =", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": "               int width = a.getResourceId(R.styleable.Layout_width, -1);\n                int height = a.getResourceId(R.styleable.Layout_height, -1);\n                if (width > 0) {\n                    setMeas", "answers": ["                int margin = a.getDimensionPixelSize(MARGIN, DEFAULT_MARGIN);"], "all_classes": null, "length": 9007}
{"pred": "       return _uuid;\n    }\n    /**\n     * @return the _connectionName\n     */\n    public String getConnectionName()\n    {\n        return _connectionName;\n    }\n    /**\n     * @return the _connectionId\n     */\n    public String get", "answers": ["        if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())"], "all_classes": null, "length": 9441}
{"pred": "           return new SyntaxNodeOrToken(\n                SyntaxKind.BinaryExpression,\n                new SyntaxNodeOrToken[]\n                {\n                    left,\n                    new SyntaxNodeOrToken(SyntaxKind.Token, new RoslynDiagnostic(new CodeAction(new", "answers": ["                if ((object)leftType == null)"], "all_classes": null, "length": 15198}
{"pred": "# This is the entry point for the program.\nif __name__ == '__main__':\n    # Parse command line options.\n    options, arguments = getopt.getopt(sys.argv[1:], 'hv')\n    # Process command line options.\n    help =", "answers": ["        if expression in ('1', 'True'): return True"], "all_classes": null, "length": 8731}
{"pred": "     for (int j = 0; j < documentSize; j++) {\n        data[j] = new CRFData();\n      }\n      for (int j = 0; j < documentSize; j++) {\n        int docIndex = j;\n        int labelIndex =", "answers": ["      if (featureVals != null)"], "all_classes": null, "length": 8316}
{"pred": "       internal static bool IsLeaf(TYPETYPE type)\n        {\n            return (type.kind == T_LEAF);\n        }\n    }\n}\n// The following code is transcluded from CVTYPES.H\n// <summary>\n// </summary>\n// <remarks", "answers": ["        internal string name; // length prefixed name of method"], "all_classes": null, "length": 9110}
{"pred": "           if (GL.GetString(StringName.Extensions.Contains(\"GL_EXT_texture_compression_dxt\")) == null)\n            {\n                throw new Exception(\"OpenGL extension GL_EXT_texture_compression_dxt not supported.\");\n            }\n            if (GL", "answers": ["            if (GL.GetString(StringName.Version).StartsWith(\"GL ES\"))"], "all_classes": null, "length": 8378}
{"pred": "\ndef BibTeX_to_XML(bibtex_file):\n    \"\"\"\n    @param bibtex_file: a file containing a BibTeX record.\n    @return: a string containing the XML representation of the BibTeX record.\n    \"\"\"\n   ", "answers": ["    return (0, CFG_WEBACCESS_WARNING_MSGS[0])"], "all_classes": null, "length": 11744}
{"pred": "\n    self.impl = UDFHeader(data)\n\nis missing.  This is the constructor for the UDF header class.\n\nHere is the missing code:\n\nclass UDFHeader:\n    \"\"\"\n    UDF header class.\n\n    This class represents the UDF header", "answers": ["        self.impl_id = UDFEntityID()"], "all_classes": null, "length": 10644}
{"pred": "=====================\n\ndef _get_agg_spec(self, op, agg_func, axis=None, **kwargs):\n    \"\"\"\n    Parameters\n    ----------\n    op : str\n        The operation to perform.\n    agg_func : callable\n        The aggregation", "answers": ["                            result = concat(values, keys=key_index,"], "all_classes": null, "length": 9883}
{"pred": "           case '^':\n                if (next == '^') {\n                    next();\n                    if (next == 'M') {\n                        accept(\"(?^)\");\n                        next();\n                        return;\n                    }\n                }\n                accept(\"", "answers": ["            case '-': // subFlag then fall through"], "all_classes": null, "length": 10915}
{"pred": "       final VirtualMachine vm = _db.findById(VirtualMachine.class, vmId);\n        if (vm == null) {\n            throw new ResourceNotFoundException(\"Virtual Machine with id \" + vmId + \" not found.\");\n        }\n\n        final VirtualMachineProfile profile = _db", "answers": ["        final VMInstanceVO vm = _vmDao.findByUuid(vmUuid);"], "all_classes": null, "length": 8853}
{"pred": "=======================\n        # compute gradient\n        grad = np.zeros(self.n)\n        for i in range(self.n):\n            x = self.x[i]\n            grad[i] = self._f(x) - self.f\n            self.grad", "answers": ["        W_nk = self._computeWeights(recalc_denom=True)"], "all_classes": null, "length": 12510}
{"pred": "   self.assertRaises(ValueError, self.login)\nclass FtpClientTests(unittest.TestCase):\n    \"\"\"\n    Tests for the FTP client.\n    \"\"\"\n    def setUp(self):\n        self.client = FTPClient()\n        self.client", "answers": ["        d = self.shell.stat(('ned',), ('size', 'directory'))"], "all_classes": null, "length": 8415}
{"pred": "           }\n            return i;\n        }\n        \n        /**\n         *  Encodes a single byte into a Base64-encoded character array.\n         *\n         *  @param b the byte to encode\n         *  @return the encoded character array\n         */\n        private", "answers": ["                if( b >= 0 ) {"], "all_classes": null, "length": 9989}
{"pred": "           return new Toolkit.ToolkitEventMulticaster(a, b);\n            }\n        }\n    }\n    /**\n     * This class is used to implement the <code>MouseListener</code>\n     * interface.  It is used to register multiple listeners for a\n    ", "answers": ["            if (b == null)  return a;"], "all_classes": null, "length": 10923}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\t\t\t\t\t\tresults.Sort( AccountComparer.Instance );"], "all_classes": null, "length": 9034}
{"pred": "           if (result == FMOD.RESULT.OK)\n            {\n                sound = (Sound)Marshal.PtrToStructure(soundraw, typeof(Sound));\n                sound.Handle = soundraw;\n                sound = new Sound(sound.Handle);\n            }\n            return", "answers": ["            if (result != RESULT.OK)"], "all_classes": null, "length": 14660}
{"pred": "           tbl_len = (data[base+1] << 8) | data[base+2];\n            if (tbl_len > 0) {\n                if (tbl_len > (data.length - base))\n                    throw new IOException(\"Invalid DHT table length", "answers": ["                tbl_ix = data[base] & 255;"], "all_classes": null, "length": 16751}
{"pred": "                   this.AddButton(100, 100, 0x1410, 0x140F, new ActionCallback(OnChallenge));\n                }\n                // add the close button\n                this.AddButton(100", "answers": ["                    this.AddLabel(x2 + 30, 215, 55, a.Text(200233));  // \"DeathBall\""], "all_classes": null, "length": 8017}
{"pred": "           RequiredColumns = new StringCollection(new String[]{\"PersonID\", \"FamilyID\", \"Name\"});\n            Template.Load(\n                \"SELECT PersonID, FamilyID, Name FROM Person WHERE PersonID = @PersonID\",\n                RequiredColumns,\n                new Int64", "answers": ["            TemplateRow = TemplateDT.NewRowTyped(false);"], "all_classes": null, "length": 8754}
{"pred": "\t\tif (bs != null) {\n\t\t\tbs.close();\n\t\t\tbs = null;\n\t\t}\n\t\tif (bs_w != null) {\n\t\t\tbs_w.close();\n\t\t\tbs_w = null;\n\t\t", "answers": ["\t\tif (gfp != null && gfp.class_id == LAME_ID) {"], "all_classes": null, "length": 8018}
{"pred": "               if (AllSubmissionsOK)\n                {\n                    // Send back the result to the client\n                    return ReturnOK;\n                }\n                else\n                {\n                    // Send back an error message to the client\n                    return ReturnError;\n", "answers": ["                if (AllSubmissionsOK == false)"], "all_classes": null, "length": 8128}
{"pred": "\n        # replace placeholders with actual values\n        skeleton = self.replacePlaceholders(skeleton)\n\n        # replace variables with their values\n        skeleton = self.replaceVariables(skeleton)\n\n        # replace options with their values\n        skeleton = self.replaceOptions(", "answers": ["                    elif name == \"requires\":"], "all_classes": null, "length": 9136}
