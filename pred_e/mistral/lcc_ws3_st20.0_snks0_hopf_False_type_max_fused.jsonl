{"pred": "\t\t\traspodelaTableModel.addPrimerak(primerak);\n\t\t\thandleSetPreostalo();\n\t\t\thandleLoadPrimerak();\n\t\t\tbrojPrimTxtFld.requestFocus();\n\t\t} catch (Raspodela", "answers": ["\t\t\tString invKnj = invKnjPanel.getCode();"], "all_classes": null, "length": 451}
{"pred": "               SubCriteria[\"GroupID\"] = new SearchCondition<String>(\"GroupID\");\n              }\n              return (ISearchCondition<String>)SubCriteria[\"GroupID\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"UserID", "answers": ["                 SubCriteria[\"GroupID\"] = new SearchCondition<String>(\"GroupID\");"], "all_classes": null, "length": 475}
{"pred": "\t\taliases.Add (\"gb2312\", \"gb2312\");\n\t\taliases.Add (\"gbk\", \"gb2312\");\n\t\taliases.Add (\"gb_china\", \"gb2312\");\n\t\taliases.", "answers": ["\t\taliases.Add (\"GBK\", \"gb2312\");"], "all_classes": null, "length": 545}
{"pred": "# TODO(jasonpr): Implement this method.\ndef _parse_negated_character_class(source):\n    \"\"\"Parse a negated character class expression, like '[^abc]'.\n    \"\"\"\n    pass\n# TODO(jasonpr): Implement this method.\ndef _parse", "answers": ["        if _parse_verbatim(source, '[:%s:]' % class_name):"], "all_classes": null, "length": 850}
{"pred": "#print(suma)\n#print(mmx)\n#print(total)\n#print(np.argmax(mmx))\n#print(np.argmax(total))\n#print(np.argmax(suma))\n#print(np.argmax(sum", "answers": ["check = numbers[5][123]"], "all_classes": null, "length": 502}
{"pred": "       sendBean(\"B\", 1, 1L);\n        sendBean(\"A\", null, null);\n        assertFalse(listener.isInvoked());\n        sendBean(\"A\", 1, 1L);\n        assertEquals(1L, listener.assertOneGetNewAndReset", "answers": ["        sendBean(\"A\", null, null);"], "all_classes": null, "length": 756}
{"pred": "               item.setExpanded(true);\n                item.setGrayed(false);\n                item.setSelected(true);\n                break;\n            }\n        }\n    }\n    private void handleTreeItemSelect() {\n        TreeItem selectedItem = tree.", "answers": ["                tree.setSelection(new TreeItem[] { item });"], "all_classes": null, "length": 1800}
{"pred": "       topPanel.revalidate();\n        topPanel.repaint();\n    }\n}", "answers": ["        if (nilCard != null) {"], "all_classes": null, "length": 511}
{"pred": "\t\t\tsqrtAspect = (float) Math.sqrt((double) w / h);\n\t\t}\n\t}\n\tprivate void loadBitmap() throws IOException {\n\t\tif (bitmap != null)\n\t\t\tbitmap.recycle();\n\t\tInputStream is = new FileInputStream", "answers": ["\t\t\tfloat r = (w+h)/2f;"], "all_classes": null, "length": 1042}
{"pred": "       self.__repeat = (delay, interval)\n\nI'm trying to add the functionality of setting the repeat delay and interval for the keys using the _set_repeat function. I've added the code snippet below the comment but it's not working. I'm not sure what I'", "answers": ["            self.__tick_id = gobject.timeout_add(10, self._tick_cb)"], "all_classes": null, "length": 703}
{"pred": "# Run tests\ntest_paths = {\"/\": {\"tests_path\": os.path.join(os.getcwd(), \"tests\")}}\nproduct = \"firefox\"\nkwargs = {\n    \"test_paths\": test_paths,\n    \"product\": product,\n    \"", "answers": ["    handler = handlers.LogLevelFilter(logged_critical, \"CRITICAL\")"], "all_classes": null, "length": 1196}
{"pred": "   def getState(self):\n        \"\"\" Method to get the current state of the wavemeter.\n        @return str: state of the wavemeter (running, idle, deactivated)\n        \"\"\"\n        # check the status of the wavemeter\n        if self._wavem", "answers": ["        if self.getState() == 'idle':"], "all_classes": null, "length": 885}
{"pred": "       List<String> mustStatusNames = Arrays.asList(\n            PresenceStatus.AVAILABLE.getStatusName(),\n            PresenceStatus.AWAY.getStatusName(),\n            PresenceStatus.BUSY.getStatusName(),\n            PresenceStatus.CHATTING", "answers": ["        List<String> requiredStatusNames ="], "all_classes": null, "length": 678}
{"pred": "                           await RunCommandDirectly(cmd);\n                        }\n                    });\n                }\n            }\n            poll.Options = options;\n            ActivePoll = poll;\n            pollTimer.Interval = PollTimeout * 1000;\n            pollTimer.Start();", "answers": ["                            await cmd.ExecuteArmed(this, null);"], "all_classes": null, "length": 3344}
{"pred": "\t\t\tthis.label1.Location = new System.Drawing.Point(6, 13);\n\t\t\tthis.label1.Name = \"label1\";\n\t\t\tthis.label1.Size = new System.Drawing.Size(148, 18);", "answers": ["\t\t\tthis.label1.Location = new System.Drawing.Point(6, 51);"], "all_classes": null, "length": 1316}
{"pred": "\t\t\t\tif (assembly == null && !throwOnMissing) {\n\t\t\t\t\tassembly = BuildManager.GetCompiledType (name).Assembly;\n\t\t\t\t\tif (assembly != null) {\n\t\t\t\t\t\tassemblyCache.Add (name, assembly", "answers": ["\t\t\t\tif (assembly == null) {"], "all_classes": null, "length": 1336}
{"pred": "# Get link status information\nself.get_link_status()\n# Show result\nself.show_result()\n# Return result\nself.module.exit_json(**self.results)\nif __name__ == '__main__':\n    argument_spec = ce_argument_", "answers": ["        if self.interface == 'all':"], "all_classes": null, "length": 1718}
{"pred": "   for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      if (!Character.isDigit(c) && c != ',') return false;\n    }\n    return true;\n  }\n  public", "answers": ["    for (int i = 0; i < s.length(); i++)"], "all_classes": null, "length": 939}
{"pred": "\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t\t/// <summary>\n\t\t/// Records a staff member deleting an auction\n\t\t/// </summary>\n\t\t///", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "                           sead_partnn_l = find_neighbours(nodemap, c_sead, hub_threshld, avoid_l, blok_superErode_neighbors);\n                        }\n                        if (sead_partnn_", "answers": ["                            if (c_sead == start || c_sead == stop) {"], "all_classes": null, "length": 1426}
{"pred": "\t\t\tthis.Size = new System.Drawing.Size(320, 261);\n\t\t\tthis.ResumeLayout(false);\n\t\t\tthis.PerformLayout();\n\t\t}\n\t\t#endregion\n\t\tprivate System.Windows.Forms.", "answers": ["\t\t\tthis.Size = new System.Drawing.Size(371, 300);"], "all_classes": null, "length": 825}
{"pred": "# behavior = {\n#     'tour': tourlist,\n#     'observations': observations,\n#     }\n\n    behavior = {\n        'tour': [tourIntro, tourStart, tourEnd],\n        'observations': observations,\n        }\n\n", "answers": ["    behavior_list = [ checkOnTour(tourlist, o,"], "all_classes": null, "length": 609}
{"pred": "       self.write_page(addressbookpage, head, body, output_file, sio, FULLCLEAR)\n\n    def get_gender(self, handles):\n        \"\"\"\n        @param: handles -- list of handles\n        @return: (males, females, unknown", "answers": ["        footer = self.write_footer(None)"], "all_classes": null, "length": 960}
{"pred": "   self.progress(\"Checking altitude\")\n    self.wait_for_alt(alt_min=m.alt, timeout=10)\n    self.hover()\n    self.progress(\"Takeoff\")\n    self.takeoff(alt_min=m.alt+1", "answers": ["            if abs(m.relative_alt) > max_relalt_mm:"], "all_classes": null, "length": 577}
{"pred": "\t\t\t\t\t\t\tif (strings[0] == \"GlobalSettings\")\n\t\t\t\t\t\t\t\torderManager.LobbyInfo.GlobalSettings = Session.GlobalSettings.Deserialize(node.Value);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t", "answers": ["\t\t\t\t\t\t\tif (strings[0] == \"GlobalSettings\")"], "all_classes": null, "length": 591}
{"pred": "\t\t\t\tSystem.arraycopy(src, srcOffset, buf, 0, byteCount);\n\t\t\t\tbufferedPacket.setPayload(buf);\n\t\t\t\tstate = SocketReadState.READ_PACKET;\n\t\t\t\treturn bufferedPacket;\n", "answers": ["\t\t\t\tfor (int i = 0; i < byteCount; i++) {"], "all_classes": null, "length": 783}
{"pred": "       // Create toolbar\n        if (opiRuntimeToolBarDelegate == null)\n        {\n            opiRuntimeToolBarDelegate = new OPIRuntimeToolBarDelegate(this);\n            getSite().setActionBars(new IActionBars() {\n                @Override\n              ", "answers": ["        if (opiRuntimeToolBarDelegate != null)"], "all_classes": null, "length": 813}
{"pred": "           if (launcher != null && launcher.isPopupTrigger(e)) {\n                launcher.showPopup(this, e);\n            }\n        }\n    }\n}", "answers": ["            if (launcher != null && !e.isPopupTrigger()) {"], "all_classes": null, "length": 933}
{"pred": "   def test_clean_name_two_word_surnames_with_hyphen(self):\n        names = [\n            (\"EDE-COOPER \\nPalmer\", \"Palmer Ede-Cooper\"),\n            (\"VAN-DULKEN \\nRichard", "answers": ["            (\"O`NEAL \\nCarol Joy\", \"Carol Joy O'Neal\"),"], "all_classes": null, "length": 919}
{"pred": "           sort_by, sort_order = sort\n            if sort_by not in ['uploadDate', 'displayname']:\n                raise ValueError('Invalid sort_by value: %s' % sort_by)\n            if sort_order not in [ModuleStoreEnum.SortOrder.asc", "answers": ["            if sort[0] == 'uploadDate':"], "all_classes": null, "length": 1853}
{"pred": "           }\n            object IEnumerator.Current => Current;\n            public void Dispose() { }\n            public bool MoveNext()\n            {\n                if (list.IsReadOnly)\n                    throw new InvalidOperationException(\"Synclists can only be modified at the server\");\n", "answers": ["                index = -1;"], "all_classes": null, "length": 1053}
{"pred": "# Create a new repository instance.\nrepo = unionrepository(ui, path, parentpath)\n# Open the repository.\nrepo.open()\n# Close the repository.\nrepo.close()\n# Print a message.\nprint(_('Created a new union repository at %s') % repo.", "answers": ["                parentpath = parentpath[len(cwd):]"], "all_classes": null, "length": 795}
{"pred": "       record = logging.LogRecord(name, msg, level, fn, lno, *args, **kwargs)\n        return record\nclass StructuredFormatter(logging.Formatter):\n    \"\"\"A formatter that handles structured data passed in 'extra'.\"\"\"\n    def __init__(self, *", "answers": ["        if sys.version_info[0] == 2:"], "all_classes": null, "length": 897}
{"pred": "                               m.Mana -= 20;\n                            }\n                            else\n                            {\n                                m.SendMessage(\"You have reached the skill cap for that skill\");\n                            }\n                        }\n                        else\n                        m.SendMessage(\"You", "answers": ["                                m.Mana -= 20;"], "all_classes": null, "length": 569}
{"pred": "def step(pattern, func):\n    \"\"\"\n    Register a step function.\n    \"\"\"\n    @wraps(func)\n    def wrapped(context):\n        match = re.match(pattern, context.step_text)\n        if match:\n            return func(context, match", "answers": ["            for k, v in hash_.iteritems():"], "all_classes": null, "length": 546}
{"pred": "           return page_not_authorized(req=req, referer=\"/edit\",\n                                       text=auth_message, navtrail=navtrail)\n        recid = argd['recid']\n        ticket = perform_request_newticket(recid)\n        return", "answers": ["            return page_not_authorized(req=req, referer=\"/edit\","], "all_classes": null, "length": 756}
{"pred": "'''\n# This is a placeholder for the code that should be added\n# to implement the logic for the 'use_tty' option.\n# The code below is just a comment.\n#\n# if options.get('use_tty'):\n#     ssh_args += ['-tt']", "answers": ["        - {key: usetty, section: ssh_connection}"], "all_classes": null, "length": 968}
{"pred": "\t\tdataString += \"WARDLIST\";\n\t\tdataString += ims.dto.NASMessageCodes.MESSAGESEPARATOR;\n\t\tdataString += \"1\";\n\t\tdataString += ims.dto.NASMessageCodes.MESSAGESEPARATOR;\n", "answers": ["\t\tWardlistRecord data = (WardlistRecord)DataCollection.get(0);"], "all_classes": null, "length": 1476}
{"pred": "       record_add_field(rec, '300', subfields=[('a', page_count)])\n        record_add_field(rec, '490', subfields=[('a', journal)])\n        record_add_field(rec, '090',", "answers": ["            record_add_field(rec, '300', subfields=[('a', page_count)])"], "all_classes": null, "length": 1283}
{"pred": "               assertEquals(A.getQuick(c, r), B.getQuick(r, c));\n            }\n        }\n    }\n    public void testViewRow() {\n        IntMatrix1D row = A.viewRow(NROWS / 2);\n        assertEquals(", "answers": ["                assertEquals(A.getQuick(r, NCOLUMNS - 1 - c), B.getQuick(r, c));"], "all_classes": null, "length": 1319}
{"pred": "# Send Unit Data\nclass ENIPSendUnitData(BaseSendPacket):\n    \"\"\"Send Unit Data Command Field\"\"\"\n    name = \"ENIPSendUnitData\"\n    fields_desc = [\n        LEShortField(\"protocolVersion\", 1),\n        LEShortField(\"options\", ", "answers": ["                 lambda pkt: pkt.commandId == 0x6f),"], "all_classes": null, "length": 625}
{"pred": "\t\tGridEnvelope gridEnvelope = reader.readGridGeometry();\n\t\t\n\t\t// Extracting the CRS from the GeoTIFF file\n\t\tCoordinateReferenceSystem crs = CRS.decode(reader.getCoordinateReferenceSystem());\n\t\t\n\t\t", "answers": ["\t\tfinal CoordinateReferenceSystem crs = reader.getCrs();"], "all_classes": null, "length": 805}
{"pred": "           ((Creature) e).setCanDespawn(false);\n        }\n        return e;\n    }\n}\n\n// I want to add a new creature called \"GhastlyGhoul\" which is a variant of the ghast.\n// It should be a flying", "answers": ["            Creature c = (Creature) e;"], "all_classes": null, "length": 386}
{"pred": "\t\t\tushort* line = (ushort*)bd.Scan0;\n\t\t\tint delta = bd.Stride >> 1;\n\t\t\tfor( int y = 0; y < height; ++y, line += delta )\n\t\t\t{\n\t\t", "answers": ["\t\t\tushort* line = (ushort*)bd.Scan0;"], "all_classes": null, "length": 1243}
{"pred": "                   if (house == null)\n                        house = BaseHouse.FindHouseAt(new Point3D(m.X, m.Y + 1, 127), m.Map, 16);\n                    if (house != null)\n                        bonus", "answers": ["                    if (house == null)"], "all_classes": null, "length": 585}
{"pred": "Console.WriteLine(\"Display Set Name: {0}\", displaySet.Name);\nConsole.WriteLine(\"Display Set Description: {0}\", displaySet.Description);\nConsole.WriteLine(\"Display Set Series: {0}\", string.Join(\", \", displaySet.Series.Select(s => s.SeriesDescription).", "answers": ["\t\t\t\t\t\tConsole.WriteLine(\" > {0}\", displaySet.Descriptor.Description);"], "all_classes": null, "length": 803}
{"pred": "# This is a stub for the function that will be implemented in the next exercise.\n# It should return the TimestampFile object for the given file name.\ndef read_file(filename):\n\"\"\"\nRead the timestamp data for a file.\n:param filename: The name of the file to read", "answers": ["    exts = supported_extensions()"], "all_classes": null, "length": 653}
{"pred": "\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\t\tif (cgn.depth < 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// find the parent cell\n\t\t\t\t\t\t\t", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "\t\t\t    case 189: // - key\n\t\t\t\t    if (down ) {\n                        if (CAPS)\n                            Program.keyH_ENT = (Program.keyH_ENT & (~8));\n                        else\n                        {\n                ", "answers": ["\t\t\t    case 189: // -/_ key"], "all_classes": null, "length": 1748}
{"pred": "out_list += [weights_dmat_all[index]]\nout_comment += ['Distortion matrix weights']\nout_units += ['']\nresults.write(np.array(out_list), names=out_names, comment=out_comment,\n              units=out_units", "answers": ["        out_list += [weights_dmat_all[index]]"], "all_classes": null, "length": 1374}
{"pred": "lines = obj.splitlines()\nreturn list(load(lines, mapping, implementation, strict))", "answers": ["    obj = obj.lstrip(\"\\ufeff\")"], "all_classes": null, "length": 676}
{"pred": "\t\tif (orig == null || !orig.exists() || orig.length() == 0)\n\t\t\treturn;\n\t\tString newUuid = mDbHelper.getBookUuid(newId);\n\t\tcopyFileToCoverImageIfMissing(orig, newU", "answers": ["\t\tif (orig == null || !orig.exists() || orig.length() == 0)"], "all_classes": null, "length": 866}
{"pred": "           strength += opponent.getValue().getScore().get(0);\n        }\n        tableStrengthScore.setPlayer(player);\n        tableStrengthScore.setScore(FXCollections.observableArrayList(\n                new IntegerProperty(strength)));\n        this.scoreTable", "answers": ["            for (PlayerScore scoreTable : this.scoreTable) {"], "all_classes": null, "length": 1212}
{"pred": "   def test_public_mode_off(self, temp_dir, common_obj):\n        web = web_obj(temp_dir, common_obj, \"receive\")\n        web.settings.set(\"general\", \"public\", False)\n        with web.app.test_", "answers": ["            res = c.get(\"/\")"], "all_classes": null, "length": 919}
{"pred": "           nsClientService = mLocalBinder.getService();\n        }\n    };\n    public void addToLog(EventNSClientNewLog event) {\n        listLog.add(event);\n        if (listLog.size() > 10) listLog.remove(0", "answers": ["                nsClientService = mLocalBinder.getServiceInstance();"], "all_classes": null, "length": 516}
{"pred": "=====================\n\n# Now build the _ssl and _hashlib extensions.\n#\n# Note: the _ssl extension is built with the OpenSSL library,\n# so we need to set the OpenSSL library directory in the environment.\n#\n# Note: the _hashlib extension is built", "answers": ["            if arch == \"amd64\":"], "all_classes": null, "length": 982}
{"pred": "\t\tfor(int i=0; i<length; i++){\n\t\t\tif(i>=tempCostList.Length){\n\t\t\t\ttowerList[index].baseStat.costs[i]=0;\n\t\t\t}\n\t\t\telse{\n\t\t", "answers": ["\t\tfor(int i=0; i<length; i++){"], "all_classes": null, "length": 3890}
{"pred": "\t\t\t\tAddRes( index, typeof( Turquoise ), 1032691, 1, 1044240 );\n\t\t\t\tAddRecipe( index, 34 );\n\t\t\t\tSetNeededExpansion( index,", "answers": ["\t\t\t\tAddRes( index, typeof( BrilliantAmber ), 1032697, 1, 1044240 );"], "all_classes": null, "length": 3677}
{"pred": "```python\nself.test_simpleentry()\n```\nThis line of code is calling the `test_simpleentry` method defined in the `TestProp2PO` class. This method tests that a simple properties entry converts properly to a po entry.\n\nThe `TestProp2PO", "answers": ["        options = self.help_check(options, \"-P, --pot\")"], "all_classes": null, "length": 1336}
{"pred": "\t\t\tsw.WriteLine (\"\\t\\t// TODO: Add member declarations for signals here.\");\n\t\t\tsw.WriteLine ();\n\t\t\tsw.WriteLine (\"\\t}\");\n\t\t\tsw.WriteLine ();\n\t\t\tGenerateImplementorIface (gen_info);", "answers": ["\t\t\tforeach (Signal sig in sigs.Values) {"], "all_classes": null, "length": 1298}
{"pred": "   module = AnsibleModule(\n        argument_spec=fields,\n        supports_check_mode=False,\n        required_together=[],\n        mutually_exclusive=[],\n        required_one_of=[],\n        validate_plugins=True\n    )\n   ", "answers": ["    module = AnsibleModule(argument_spec=fields,"], "all_classes": null, "length": 1009}
{"pred": "   node.setLeaf(leaf);\n  }\n  public void setPresentableTextContainer(Element presentableTextContainer) {\n    this.presentableTextContainer = presentableTextContainer;\n  }\n  public void setInfoTextContainer(Element infoTextContainer) {\n    this", "answers": ["    if (node instanceof MutableNode) {"], "all_classes": null, "length": 568}
{"pred": "           return prevChildren.Take(StartPagingTreshold)\n                .Concat(Enumerable.Range(0, (previousChildren.Length - StartPagingTreshold + PageSize - 1) / PageSize)\n                    .Select(i => childFactory(query.Parent, (", "answers": ["            var page = prevChildren.Take(StartPagingTreshold).ToList();"], "all_classes": null, "length": 781}
{"pred": "   def testTCPShortWriteWithTrailingData(self):\n        \"\"\"\n        TCP: Short write to client with trailing data\n        \"\"\"\n        name = 'short-write-trailing-data.tcp-short.tests.powerdns.com.'\n        query = dns.message", "answers": ["        soaResponse = dns.message.make_response(query)"], "all_classes": null, "length": 648}
{"pred": "       if (kind == null) {\n            throw new IllegalArgumentException(\"Unknown JFlex token id: \" + javaccKind);\n        }\n        return kind;\n    }\n    public TokenCategory getCategory() {\n        return category;\n    }\n    public int getJav", "answers": ["        if (kind == null) {"], "all_classes": null, "length": 524}
{"pred": "           return FindControl(DescriptionID);\n        }\n        public Control GetLabelForTitle()\n        {\n            return FindControl(TitleID);\n        }\n        public Control GetLabelForPercentage()\n        {\n            return FindControl(PercentageControlID);\n        }\n       ", "answers": ["            return this.FindControlRecursive(DescriptionControlID) as Label;"], "all_classes": null, "length": 450}
{"pred": "       url = '%s://%s%s?%s' % (self.protocol, host, path, urllib.urlencode(query_args))\n        else:\n            url = '%s://%s%s' % (self.protocol, host, path)\n        return", "answers": ["            path += '?' + query_args"], "all_classes": null, "length": 1198}
{"pred": "\t\t\t\tcanvas.drawBitmap(tiles[i].getBitmap(), left, top, null);\n\t\t\t}\n\t\t}\n\t}\n\tprivate float getPosX(LatLonPos pos, double scale){\n\t\treturn (pos.getLon() +", "answers": ["\t\t\t\tRectF destRect = new RectF(left, top, right, bottom);"], "all_classes": null, "length": 1184}
{"pred": "           HueInfo = new Dictionary<DyeType, Tuple<int, int>>();\n            HueInfo.Add(DyeType.WindAzul, new Tuple<int, int>(0x3B2, 0x3B2));\n            HueInfo.", "answers": ["            HueInfo = new Dictionary<DyeType, Tuple<int, int>>();"], "all_classes": null, "length": 535}
{"pred": "               this.gwtCertificatesService.deleteEntry(selected.getKeystoreName(), selected.getAlias(),\n                        c -> {\n                            if (c.isError()) {\n                                this.alertDialog.show(MSGS.error(), MSGS.certificate", "answers": ["                final Modal modal = new Modal();"], "all_classes": null, "length": 698}
{"pred": "\t\t\t\"    {0}\" +\n\t\t\t\"    Public Class SomeClass{0}\" +\n\t\t\t\"        {0}\" +\n\t\t\t\"        Private Sub SomeMethod(Of T As  {{System.IComparable, System.ICloneable, New}}, S", "answers": ["\t\t\t\t\"    {0}\" +"], "all_classes": null, "length": 1270}
{"pred": "\nclass MemoryContainer(Container):\n    \"\"\"A simple in-memory container.\n    \n    This container is threadsafe and does not support expiration.\n    \n    \"\"\"\n    \n    def __init__(self, namespace):\n        Container.__init__(self, namespace)\n        self.", "answers": ["            if os.access(self.file + os.extsep + ext, os.F_OK):"], "all_classes": null, "length": 1142}
{"pred": "       return \"ImageIcon[\" + (filename != null ? filename : location) + \"]\";\n    }\n    /**\n     * Returns the filename or URL of the image.\n     *\n     * @return the filename or URL of the image\n     */\n    public String getFilename() {", "answers": ["        if (description != null) {"], "all_classes": null, "length": 1934}
{"pred": "# return self.formatted_plugin_list()\n# What should be the next line of code?\n# The next line of code should return the formatted list of plugins,\n# either active or all, depending on the argument passed to the method.\n# If active_only is True, it", "answers": ["            all_plugins = self._bot.plugin_manager.get_all_plugin_names()"], "all_classes": null, "length": 833}
{"pred": "   module = AnsibleModule(\n        argument_spec=fields,\n        supports_check_mode=True\n    )\n    fos = FortiOSHandler(module)\n    is_error, status, diff = fortios_system(module.params, fos)\n    if not", "answers": ["                \"vdom\": {\"required\": False, \"type\": \"str\"}"], "all_classes": null, "length": 1164}
{"pred": "           throw new IOException();\n        }\n        fileDecoder = savedDecoder;\n    }\n    private Object open(String name) throws IOException {\n        // TODO: Implement the open method\n        throw new IOException();\n    }\n    private static Object clone(Object obj) {\n        // TODO", "answers": ["            throw new IOException();"], "all_classes": null, "length": 880}
{"pred": "\t\t\t\treturn originalObject != null;\n\t\t\tcase ActivitydiagramPackage.TRACED_ACTIVITY__TRACE_SEQUENCE:\n\t\t\t\treturn traceSequence != null && !traceSequence.isEmpty();\n\t\t}\n\t\treturn super.eIsSet(", "answers": ["\t\t\t\treturn originalObject != null;"], "all_classes": null, "length": 533}
{"pred": "\t\tnew InterfaceUpdater(db, imported).execute();\n\t\tnew SnmpInterfaceUpdater(db, imported).execute();\n\t\treturn Collections.emptyList();\n\t}\n}\n\n// TODO: implement update method for OnmsMonitoredService\n// TODO: implement", "answers": ["\t\tList<Event> events = new LinkedList<Event>();"], "all_classes": null, "length": 888}
{"pred": "   if state == 'present':\n        changed = publication.update(tables, params, owner, check_mode=False)\n    elif state == 'absent':\n        changed = publication.drop(cascade=cascade, check_mode=False)\n    # If check_mode=", "answers": ["    if state == 'present':"], "all_classes": null, "length": 2176}
{"pred": "\t\t\tint version = reader.ReadInt();\n\t\t}\n\t}\n}", "answers": ["\t\t\tint version = reader.ReadInt();"], "all_classes": null, "length": 737}
{"pred": "   def get_reconstruction_cost(self, updates, pre_sigmoid_nv):\n        \"\"\"Approximation to the reconstruction error\n        Note that this function requires the pre-sigmoid activation as\n        input.  To understand why this is so you need to understand a\n       ", "answers": ["        of log(sigmoid(..)) and will not apply the wanted"], "all_classes": null, "length": 1545}
{"pred": "           return new TripChain(Person);\n        }\n        #endregion ITripChain Members\n    }\n}", "answers": ["            ITripChain chain = (ITripChain)MemberwiseClone();"], "all_classes": null, "length": 798}
{"pred": "       super(edge.getX() + edge.getWidth() - 20,\n                edge.getY() + edge.getHeight() - 20,\n                40, 40, false, new String[] {\"role\", \"ordering\"});\n        \n       ", "answers": ["        role = new FigRole();"], "all_classes": null, "length": 2539}
{"pred": "                   LogManager.GetCurrentClassLogger().Error(\"Error initializing performance counter target: {0}\", ex.Message);\n                }\n            }\n        }\n    }\n}\n#endif", "answers": ["                    if (LogManager.ThrowExceptions) throw ex;"], "all_classes": null, "length": 849}
{"pred": "           name,checksum = checksums.get(block=False)\n            assert os.path.isfile( pjoin( cfg.webdav_backend_directory, name) )\n            with open(pjoin( cfg.webdav_backend_directory, name), \"rb", "answers": ["            name, checksum = checksums.get(block=False)"], "all_classes": null, "length": 599}
{"pred": "   self.stack_count = stac + pseudop.stack_effect()\n    self.labels = {}\n    self.compiler = compiler\n    self.stack_count = 0\n    return self\ndef __init__(self, compiler):\n    self = StackCounter(compiler)\n", "answers": ["        dest = args[0]"], "all_classes": null, "length": 655}
{"pred": "\n\t\t\tif file_len > 0:\n\t\t\t\tresult.append(self.data[ofs:ofs+len])\n\t\t\t\tlen = 0\n\t\t\t\tofs += len\n\t\t\t\tcontinue\n\t\t\telse:\n\t\t\t", "answers": ["\t\t\t\tresult += [DATA_ORIGINAL] * mem_len"], "all_classes": null, "length": 1032}
{"pred": "\t\t\tString macroName = value.substring(startIndex + 2, value.indexOf(\"}\", startIndex));\n\t\t\tString macroValue = macroHandler.getMacroValue(macroName);\n\t\t\tif (macroValue == null) {\n\t\t\t\tthrow", "answers": ["\t\t\tStringBuffer result = new StringBuffer();"], "all_classes": null, "length": 3860}
{"pred": "     elements.add(new ASN1Boolean(false));\n    }\n    elements.add(new ASN1Boolean(includeAuthZEntry));\n    if ((attributes != null) && ! attributes.isEmpty())\n    {\n      final ArrayList<ASN1Element> attrs = new ArrayList", "answers": ["      elements.add(new ASN1Boolean(TYPE_INCLUDE_AUTHN_ENTRY, false));"], "all_classes": null, "length": 1468}
{"pred": "\t\tif(beans == null)\n\t\t\treturn coll;\n\t\tfor(int i = 0; i < beans.length; i++)\n\t\t{\n\t\t\tcoll.add(beans[i].buildVo());\n\t\t}\n\t\treturn coll;\n", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 773}
{"pred": "\t\t\treturn EmptyIterator.getInstance();\n\t\t}\n\t}\n}\n\nI'm trying to add a method to get previously connected devices by reading the SharedPreferences. However, I'm getting an error that the method getAll() is not defined for the SharedPreferences class", "answers": ["\t\t\treturn new EmptyIterator<String>();"], "all_classes": null, "length": 526}
{"pred": "           StreamSerializerDelegate responseStreamWriter;\n            if (this.ContentTypeSerializers.TryGetValue(contentType, out responseStreamWriter) ||\n                this.ContentTypeSerializers.TryGetValue(ContentType.GetRealContentType(contentType), out responseStreamWriter))\n           ", "answers": ["            var serializer = GetResponseSerializer(contentType);"], "all_classes": null, "length": 488}
{"pred": "           launchUrl(createUrl(CallNumber.ToString(), ContactTypes.Account, CallNumber.ToString()));\n        }\n    }\n    public void ShowCaseRecord(Guid CaseNumber)\n    {\n        if (serviceProxy == null)\n            throw new ApplicationException(LocalizedResourceManager.", "answers": ["            string CallNumberGuid = CallNumber.ToString();"], "all_classes": null, "length": 648}
{"pred": "       width = Integer.parseInt(text.substring(nextToken + 6));\n    }\n}", "answers": ["        text = text.substring(nextToken + 7);"], "all_classes": null, "length": 772}
{"pred": "     }\n    }\n  }\n}\nThe code above is incomplete. The next line of code is missing. It should be something like:\ni2 = i1 + i16;\nThis line of code is used to update the index i2, which is used to access elements of", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "               int index = constraintEntry.indexOf(':');\n                String keyAlgorithm = null;\n                String constraint = null;\n                if (index > 0) {\n                    keyAlgorithm = constraintEntry.substring(0, index);\n                    constraint = constraintEntry.substring", "answers": ["                if (debug != null) {"], "all_classes": null, "length": 983}
{"pred": "     ProxyInfo proxyInfo = (ProxyInfo) proxyCell.getUserObject();\n      UnitInfo unitInfo =\n         (UnitInfo) deviceCell.getChildAt(proxyInfo.getUnitNumber()).getUserObject();\n      int sourcePortIndex = proxyCell.getPortCount() -", "answers": ["      ProxyInfo proxy_info = (ProxyInfo) proxyCell.getUserObject();"], "all_classes": null, "length": 2936}
{"pred": "               object obj = this.ViewState[\"SubmitText\"];\n                return (obj == null) ? true : (bool)obj;\n            }\n            set\n            {\n                this.ViewState[\"SubmitText\"] = value;\n            }\n        }\n        /// <summary", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "\n# Create a new TrackCollection and add some tracks to it.\ncollection = TrackCollection()\ncollection.add(TrackFile('test1.mp3', 'Artist1', 'Album1', 1, 1, 2000))\ncollection.add(TrackFile('", "answers": ["                for song in self.collection[artist][album]:"], "all_classes": null, "length": 826}
{"pred": "       SecurityManager sm = System.getSecurityManager();\n        if (sm != null)\n            sm.checkPermission(SecurityConstants.GET_CLASSLOADER_PERMISSION);\n    }\n    /**\n     * Checks that the given function does not map a module to a class loader\n", "answers": ["        SecurityManager sm = System.getSecurityManager();"], "all_classes": null, "length": 3987}
{"pred": "\t\t\t\tif (order.ShippingStatus != ShippingStatus.Shipped && order.ShippingStatus != ShippingStatus.PartiallyShipped)\n\t\t\t\t\tthrow new SmartException(\"You can't mark this order as completed before it's shipped\");\n\t\t\t", "answers": ["\t\t\t\torder.ShippingStatusId = (int)ShippingStatus.Delivered;"], "all_classes": null, "length": 5265}
{"pred": "       AutoNumberingScheme autonumberingscheme = new AutoNumberingScheme();\n        autonumberingscheme.initialize();\n        autonumberingscheme.setAutoNumberingSchemeName(schemeName);\n        autonumberingscheme.setAutoNumberingSchemeClassName(", "answers": ["        AutoNumberingScheme ans = new AutoNumberingScheme();"], "all_classes": null, "length": 5629}
{"pred": "\t\t\tAssert.That (source.SingleOrDefault (), Is.Null);\n\t\t}\n\t\t[Test]\n\t\tpublic void SingleOrDefault_SourceWithOneElement_ReturnsSingleElement ()\n\t\t{\n\t\t\tvar source = Read (1);\n\t\t", "answers": ["\t\t\tvar source = Read<int> ();"], "all_classes": null, "length": 5586}
{"pred": "\t\t\t\t\t// create plotdata\n\t\t\t\t\tPlotData[] data = new PlotData[valuesCount * tempValues.length];\n\t\t\t\t\tPlotData[] dataCdf = new PlotData[valuesCount * tempValues.length];\n\t\t\t\t", "answers": ["\t\t\t\t\tArrayList<String> valuesList = new ArrayList<String>();"], "all_classes": null, "length": 4724}
{"pred": "       return self._conf_helper('sp', options)\n    def _create_devs(self):\n        self.crdg = scpiDevice(getstr='CRDG?', str_type=float)\n        self.enabled_list = MemoryDevice(['A', 'B", "answers": ["        if dev_obj == self.fetch:"], "all_classes": null, "length": 4119}
{"pred": "   if (!success) {\n      throw new RunnerException(_(\"Upload failed\"));\n    }\n    return suggestedClassName;\n  }\n  /**\n   * Preprocess the code.\n   * @return null if compilation failed, main class name if not\n   */\n  protected String pre", "answers": ["    return success ? suggestedClassName : null;"], "all_classes": null, "length": 6878}
{"pred": "       CQ(Workplane().box(1,1,1).faces(\">Z\").edges()).fillet(0.1)\n        \"\"\"\n        edges = self.edges()\n        if len(edges.objects) < 1:\n            raise ValueError(\"Fillet requires at least one", "answers": ["            s = Workplane().box(1,1,1).faces(\"+Z\").edges().fillet(0.1)"], "all_classes": null, "length": 4053}
{"pred": "# Initialize PyComms\ncomms = PyComms()\n# Initialize MPU6050\nmpu = MPU6050()\n# Set MPU6050 address\nmpu.address = MPU6050_ADDRESS_AD0_LOW\n#", "answers": ["            fifoCount = self.getFIFOCount()"], "all_classes": null, "length": 6204}
{"pred": "\tfor name in names['names']:\n\t\titem = frappe.get_doc(\"Item\", name)\n\t\tpdf = get_pdf(item, \"Item\", \"Item\")\n\t\tpdfkit.from_buffer(pdf, \"item_\"+name+\".pdf\")\n", "answers": ["\t\tnames = names['names']"], "all_classes": null, "length": 4346}
{"pred": "\t\t\t\tif (it.hasNext()) {\n\t\t\t\t\tProjektVerlaufHelperDto projektVerlaufHelperDto = (ProjektVerlaufHelperDto) it\n\t\t\t\t\t\t\t.next();\n\t\t\t\t\tObject[] oZeile =", "answers": ["\t\t\t\twhile (itHistory.hasNext()) {"], "all_classes": null, "length": 4200}
{"pred": "               list.Add(1072378); // Unset\n            }\n            if (this.IsCrafted)\n            {\n                list.Add(1060445); // crafted by ~1_NAME~\n                list.Add", "answers": ["                list.Add(1072378); // <br>Only when full set is present:\t\t\t\t"], "all_classes": null, "length": 6963}
{"pred": "        sb.append(\"u\");\n         sb.append((char) ('a' + (d - 10)));\n      }\n      int e = (c >> 8) & 0xf;\n      if (e < 10) {\n         sb.append((char)", "answers": ["         sb.append((char) ('a' + d - 10));"], "all_classes": null, "length": 4005}
{"pred": "\t\t\tswitch (type)\n\t\t\t{\n\t\t\t\tcase PacketTypes.PlayerInfo:\n\t\t\t\t\tPlayerInfoPacket packet = (PlayerInfoPacket)e.Packet;\n\t\t\t\t\tif (packet.Who >= Players.Length || packet.Who", "answers": ["\t\t\tvar player = Players[e.Msg.whoAmI];"], "all_classes": null, "length": 4973}
{"pred": "       if (organizationId == null) {\n            throw new ApiException(\"Missing the required parameter 'organizationId' when calling listOrganizationPublicTransportStops(Async)\");\n        }\n        \n        // create path and map variables\n        String localVarPath = \"/organizations/{organization", "answers": ["        if (organizationId == null) {"], "all_classes": null, "length": 5074}
{"pred": "           X           -   array[0..N-1] - array of quadrature nodes,\n                            in ascending order.\n            W           -   array[0..N-1] - array of quadrature weights.\n        *************************************************************************/\n        public static void gq", "answers": ["            X           -   array[0..N-1] - array of quadrature nodes,"], "all_classes": null, "length": 4527}
{"pred": "=====================\n\ndef create_subtree_for_deletion(self, parent, category_queue):\n    \"\"\"\n    Create a subtree in the tb deleted course\n    \"\"\"\n    if not category_queue:\n        return\n    node = modulestore().create_", "answers": ["            'deleting_user', parent.version_agnostic(), category_queue[0]"], "all_classes": null, "length": 4289}
{"pred": "                                       + \"10^\" + Math.abs(i));\n                                }\n                                else {\n                                    if (this.expTickLabelsFlag) {\n                                        //create \"1e#\"-type label\n                                        tickLabel = (((i", "answers": ["                                            + \"10^\" + Math.abs(i));"], "all_classes": null, "length": 4434}
{"pred": "       .map(PushedAsset::getAssetIdentifier)\n        .collect(Collectors.toList());\n        assertEquals(newBundlePushedAssets, list(htmlPageAsset.getIdentifier()));\n    }\n    /**\n     * Method to Test: {@link DependencyBundler", "answers": ["                .map(pushedAsset -> pushedAsset.getEnvironmentId())"], "all_classes": null, "length": 6390}
{"pred": "       String fileName = \"testCreateSharedLinkWithIncludeParam_\" + RUNID + \".txt\";\n        Document doc = createTextFile(myFolderNodeId, fileName, content);\n        String nodeId = doc.getId();\n        // As user 1 ...\n        setRequestContext(", "answers": ["        String fileName1 = \"fileOne_\" + RUNID + \".txt\";"], "all_classes": null, "length": 4714}
{"pred": "           if (obj instanceof Number) {\n                return true;\n            }\n        } catch (NumberFormatException e) {\n            fail(\"createNumber(String) failed: \" + e.getMessage());\n        }\n        return false;\n    }\n    /**\n     * Test for", "answers": ["            if (obj == null) {"], "all_classes": null, "length": 4128}
{"pred": "                               if (grapple.DockUid != part.Uid)\n                                {\n                                    Syntax.Warning(part, \"Part not attached or grappled by parent grappling part: \" + grapple);\n                                    Syntax.Warning(grapple,", "answers": ["                                if (grapple.DockUid != part.Uid)"], "all_classes": null, "length": 4169}
{"pred": "       if replace:\n            self.write(cr, uid, [res.id], {'value': value})\n        else:\n            self.create(cr, uid, {'model': model, 'key': key, 'name': name, 'value': value})\n        return res and res", "answers": ["            ir_values_obj = pooler.get_pool(cr.dbname).get('ir.values')"], "all_classes": null, "length": 4578}
{"pred": "           return actionTL.getVolatile() == SYNCHRONIZE_CODE;\n        }\n        @Uninterruptible(reason = \"Called from uninterruptible code.\", mayBeInlined = true)\n        public static void setAction(int action) {\n            actionTL.", "answers": ["            return actionTL.getVolatile() == SYNCHRONIZE_CODE;"], "all_classes": null, "length": 4390}
{"pred": "\t\t\tlong size = lgetxattr (path, name, value, 0);\n\t\t\tif (size <= 0)\n\t\t\t\treturn size;\n\t\t\tvalue = new byte [size];\n\t\t\treturn lgetxattr (path, name,", "answers": ["\t\t\tlong size = lgetxattr (path, name, value, 0);"], "all_classes": null, "length": 6868}
{"pred": "\t\t\t\tsuper(id, path, width, height);\n\t\t\t}\n\t\t}\n\t\tprivate Images()\n\t\t{\n\t\t\tAlert = new ImageHelper(102101, \"/ims/clinical/forms/edischargeallerg", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "       byte[] encoded = new byte[ (len * 3) / 2 + (len % 3) == 0 ? (len * 3) / 2 : (len * 3) / 2 + 4 ];\n        int index = 0;\n        int i =", "answers": ["        if( source == null ){"], "all_classes": null, "length": 5175}
{"pred": "\t\t\t\tnew ColumnInfo (\"IsCaseSensitive\", typeof(bool)),\n\t\t\t\tnew ColumnInfo (\"IsFixedLength\", typeof(bool)),\n\t\t\t\tnew ColumnInfo (\"IsNullable\", typeof(bool)),\n\t\t\t\tnew ColumnInfo (\"IsReadOnly\", typeof(", "answers": ["\t\t\t\tnew ColumnInfo (\"IsCaseSensitive\", typeof(bool)),"], "all_classes": null, "length": 4122}
{"pred": "\t\t\t\tBigInteger u2 = u1;\n\t\t\t\tu1 = v1;\n\t\t\t\tv1 = q[1];\n\t\t\t\tv3 = u3;\n\t\t\t\tu3 = u2;\n\t\t\t}\n\t", "answers": ["\t\t\t\tBigInteger tn = u1.Subtract(v1.Multiply(q[0]));"], "all_classes": null, "length": 5148}
{"pred": "\t\t\t\tif (_abi_info == null) {\n\t\t\t\t\t_abi_info = new GLib.AbiStruct (\"GstMessage\", new IntPtr[] {\n\t\t\t\t\t\t\tnew IntPtr (0), // type\n\t\t\t\t\t\t", "answers": ["\t\t\t\tif (_abi_info == null)"], "all_classes": null, "length": 4205}
{"pred": "               if (name.endsWith(\".xmi\")) {\n                    Configuration.setString(\n                            PersistenceManager.KEY_PROJECT_FILE_FORMAT,\n                            ConfigurationKey.XMI_FORMAT);\n                } else {\n                    Configuration.setString(\n                ", "answers": ["                if (!name.endsWith(\".\" + filter.getExtension())) {"], "all_classes": null, "length": 5940}
{"pred": "           tmp_recs = get_sorted_list(request, tmp_recs, header, raw_get_data)\n            ordering = get_field_index(raw_get_data)\n            counter = 1\n            for tmp_rec in tmp_recs:\n              ", "answers": ["                5: SortableHeader('Outline', False, '', 'col-center'),"], "all_classes": null, "length": 4072}
{"pred": "           string[][] ss11 = new string[][] { s111, s112 };\n            string[] s121 = new string[] { \"hello\"};\n            string[][] ss12 = new string[][] { s121 };\n            string[][]", "answers": ["            string[][] ss11 = new string[][] { s111, s112 };"], "all_classes": null, "length": 4165}
{"pred": "       field = self._meta.get_field(unique_check[0])\n        field_name = field.name\n        field_label = field.verbose_name\n        # A unique together\n        else:\n            field_name = ' and '.join([six.text_type(", "answers": ["            field = opts.get_field(unique_check[0])"], "all_classes": null, "length": 4513}
{"pred": "#~ print \"PASO %i: %f\"%(cyclemin,totalerror)        \n#~ if cyclemin >= maxcycleminimization:\n#~ cyclemin = 0\n#~ return\n#~ cyclemin += 1\n#~ return totalerror\n#~\n", "answers": ["            for key, value in sorted(paramtestdic.iteritems()):"], "all_classes": null, "length": 4363}
{"pred": "\n# This is a placeholder for the actual code that will be used to check the\n# heads of the repo.\n#\n# The actual code will be added in the future.\n#\n# For now, we just read the first 20 bytes of the part and ignore it.\n#\n", "answers": ["    while len(h) == 20:"], "all_classes": null, "length": 4561}
{"pred": "       if(contentPaneStyle.getBorder() != null) {\n            prefWidth = Math.max(contentPaneStyle.getBorder().getMinimumWidth(), prefWidth);\n            prefHeight = Math.max(contentPaneStyle.getBorder().getMinimumHeight(), prefHeight);\n       ", "answers": ["        prefWidth = Math.min(prefWidth, width);"], "all_classes": null, "length": 6347}
{"pred": "```python\n        try:\n            new_cell_attributes = eval(cas_data_str)\n        except Exception as error:\n            self.main_window.statusBar().showMessage(str(error))\n            return\n        # Get grid shape from user\n        shape = grid", "answers": ["        cas = literal_eval(cas_data_str)"], "all_classes": null, "length": 5088}
{"pred": "\t\t\t\t\tpixel = cursor_mask.GetPixel(x, y);\n\t\t\t\t\tif (pixel.A == 0) {\n\t\t\t\t\t\tcursor_bits[y * (width / 8) + x / 8] |= (byte)(1", "answers": ["\t\t\t\t\tpixel = cursor_bitmap.GetPixel(x, y);"], "all_classes": null, "length": 6831}
{"pred": "\t\t\tforeach(Operatory op in listWebSchedOps) {\n\t\t\t\tDateTime dateStartOp=op.StartDateTime;\n\t\t\t\tDateTime dateEndOp=op.EndDateTime;\n\t\t\t\tDateTime dateNextAvailable=dateStartOp;\n\t\t\t", "answers": ["\t\t\tList<DateTime> listUniqueDays=new List<DateTime>();"], "all_classes": null, "length": 4064}
{"pred": "       rc = sqlite3Collate( pColl, pMem1.z, pMem1.n, pMem2.z, pMem2.n );\n        return rc;\n      }\n      /* If one value is a blob and the other is a string, the blob is greater", "answers": ["        pMem1.enc == SQLITE_UTF16LE || pMem1.enc == SQLITE_UTF16BE );"], "all_classes": null, "length": 5688}
{"pred": "                       data.PowerType[i] = packet.ReadByte(\"PowerType\", indexes, i);\n                    }\n                }\n            }\n            if (changesMask[124])\n            {\n                for (var i = 0; i < 16", "answers": ["                        data.MaxPower[i] = packet.ReadInt32(\"MaxPower\", indexes, i);"], "all_classes": null, "length": 4140}
{"pred": "=====================\n\ndef reftrick(arr, func):\n    \"\"\"\n    Return the most common base in a numpy array.\n    \"\"\"\n    # get counts of each base\n    counts = Counter(func(arr))\n    # return the most common base\n    return np.", "answers": ["        seq = self.seqs[nidx]"], "all_classes": null, "length": 7755}
{"pred": "           Index classIndex = allClasses.getIndexByTag(tag);\n            if (classIndex == null)\n                return null;\n            Index[] classIndexes = new Index[classIndex.size()];\n            for (int i = 0; i < classIndexes.length", "answers": ["            Index[] perClassIndexes = indexByTagAndClass[tag];"], "all_classes": null, "length": 5112}
{"pred": "           this.quoteLabel.Size = new System.Drawing.Size(0, 13);\n            this.quoteLabel.TabIndex = 1;\n            this.quoteLabel.Text = \"Quote:\";\n            this.quoteLabel.TextAlign = System.Drawing.ContentAlignment.", "answers": ["            this.quoteLabel.Size = new System.Drawing.Size(46, 16);"], "all_classes": null, "length": 4569}
{"pred": "       self.rrule_type = rrule_type[rule._freq - 1]\n        self.interval = rule._interval\n        self.count = rule._count\n        self.end_type = rule._until.utctimetuple().strftime('%Y%m%", "answers": ["            data['rrule_type'] = rrule_type[rule._freq]"], "all_classes": null, "length": 4433}
{"pred": "               // Copy the decoded row to the output stream\n                fout.Write(curr, 0, bytesPerRow);\n                // Copy the decoded row to the previous row\n                Array.Copy(curr, 0, prior, 0, bytesPerRow);\n", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "     get { return defaultInstance; }\n    }\n    \n    public override pb::MessageDescriptor Descriptor {\n      get { return global::bnet.protocol.exchange_object_provider.ExchangeObjectProviderTypes.internal__static_bnet_protocol_exchange_object_provider", "answers": ["      get { return DefaultInstance; }"], "all_classes": null, "length": 5791}
{"pred": "                       AApAnalAttribAccess.LoadViaAApDocumentDetail(MainDs,\n                            Convert.ToInt32(rv[\"ApDocumentDetailId\"]),\n                            ReadTransaction);\n                    }\n                }\n                // I also need a full list of analysis", "answers": ["                        AApDocumentDetailRow DetailRow = (AApDocumentDetailRow)rv.Row;"], "all_classes": null, "length": 5677}
{"pred": "\t\t\t\tif (m_RewardItem != null)\n\t\t\t\t\tm_RewardItem.MoveToWorld(Owner.Location, Owner.Map);\n\t\t\t\telse if (m_RewardAttachment != null)\n\t\t\t\t\tm_R", "answers": ["\t\t\t\tif (RewardItem != null)"], "all_classes": null, "length": 4101}
{"pred": "\t            return lastItemIndex - firstItemIndex + 1;\n\t        }\n\t    }\n\t    public bool ContainsKey(TKey key)\n\t    {\n\t        int index = global::System.Array.BinarySearch(items, key, this);\n\t        return", "answers": ["\t            return lastItemIndex - firstItemIndex + 1;"], "all_classes": null, "length": 5727}
{"pred": "               ArgumentPanel.SuspendLayout();\n                if (AControlLabel != null)\n                {\n                    ArgumentPanel.Controls.Add(AControlLabel);\n                    AControlLabel.Dock = DockStyle.Left;\n                    AControlLabel.AutoSize =", "answers": ["                if (AControlLabel != null)"], "all_classes": null, "length": 7766}
{"pred": "\t\t\treturn Unique(target, null);\n\t\t}\n\t\t/// <summary>\n\t\t/// Returns a new list containing only the unique elements of the target collection, preserving the order.\n\t\t/// The specified <see cref=\"IEqualityComparer{T}\"/>", "answers": ["\t\t\treturn Unique(target, null);"], "all_classes": null, "length": 4367}
{"pred": "# Define a function to parse the dynamic section\ndef parse_dynamic(elf, dynstr):\n    dyn = Dynamic()\n    dynstr = elf.get_section_by_name(dynstr)\n    for i in range(0, dynstr.size, dyn.size):\n", "answers": ["DT_PPC64_OPD    = (DT_LOPROC + 1)"], "all_classes": null, "length": 6803}
{"pred": "           }\n        }\n        #endregion\n        #region Document\n        private static bool Document()\n        {\n            EnsureDirectory(\"docs\");\n            DeleteDirectory(\"docs/types\");\n            DeleteDirectory(\"docs/types/docs\");\n            DeleteDirectory(\"docs/types/docs/types\");", "answers": ["                html.WriteLine(\"      table { width: 100%; }\");"], "all_classes": null, "length": 5413}
{"pred": "\t\t\tWriteReport(buff);\n\t\t\t// wait for the read to finish\n\t\t\tif(!mReadDone.WaitOne(1000, false))\n\t\t\t\tthrow new WiimoteException(\"Error reading data from Wiimote...is it connected?\");", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "=====================\nheappush(q, (min_distance + abs(node.split - x[node.split_dim]),\n             tuple(np.add(side_distances, abs(node.split - x[node.split_dim]))),\n             far))\nelse:", "answers": ["                    sd[node.split_dim] = np.abs(node.split - x[node.split_dim])"], "all_classes": null, "length": 5233}
{"pred": "\t\tassertEquals(acn, rules.formatGame(game, Locale.ENGLISH));\n\t\tassertEquals(\"rnbqkbnr/pppppppp/8/8/3P4/8/PPP1PPPP/RNBQKBNR w KQk", "answers": ["\t\tassertEquals(acn, rules.formatGame(game, Locale.ENGLISH));"], "all_classes": null, "length": 4129}
{"pred": "   catch (InvalidRelationException e)\n    {\n      return null;\n    }\n    return null;\n  }\n  /**\n   *  Draw a single base on the forward strand.\n   *  @param g The object to draw into.\n   *  @param", "answers": ["    catch (InvalidRelationException e){}"], "all_classes": null, "length": 7770}
{"pred": "\t\t\t\t\tstring str = reader.ReadString();\n\t\t\t\t\tType type = Type.GetType(str);\n\t\t\t\t\tif (type != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tm_arSpellDefense.Add(", "answers": ["\t\t\t\t\tstring str = reader.ReadString();"], "all_classes": null, "length": 5717}
{"pred": "\t\t\t\t\t\t\t\t// Add the new sector to the map\n\t\t\t\t\t\t\t\tmap.AddSector(newsector);\n\t\t\t\t\t\t\t\t// Update the sector\n\t\t\t\t\t\t\t\tnewsector.Update();\n", "answers": ["\t\t\t\t\t\t\t\tif(newsector == null) return false;"], "all_classes": null, "length": 5677}
{"pred": "   translation = parent_doc.translate(user, document_locale,\n                                        based_on_rev,\n                                        disclose_description=disclose_description)\n    except Document.TranslationError as e:\n        # TODO: This should be a 400 error,", "answers": ["        doc = parent_doc.translations.get(locale=document_locale)"], "all_classes": null, "length": 4854}
{"pred": "           }\n            \n            // now we'll create a new table with the new dimensions\n            lNewWidths = new float[lTotalColumns];\n            for (j=0; j < lTotalColumns; j++) {\n                int cols = 0;\n                int", "answers": ["                lDummyHeights [i] = lNewMaxRows;"], "all_classes": null, "length": 5053}
{"pred": "\t\t\t\t\t\treferenceNode.AddLinkTo( GetReferenceNode( script ) );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn referenceNode;\n\t\t}\n\t\tprivate ReferenceNode SearchPrefab( Object unityObject )\n\t\t{\n\t\t", "answers": ["\t\t\t\t\t\treferenceNode.AddLinkTo( GetReferenceNode( script ) );"], "all_classes": null, "length": 4267}
{"pred": "\t\t\t\t\t\tif (trait != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tnode.Value.Nodes.Add(new MiniYamlNode(\"InvulnerabilityMultiplier@EXPERIENCE\", new MiniYaml(\"\", new List<M", "answers": ["\t\t\t\t\t\tif (trait != null)"], "all_classes": null, "length": 5181}
{"pred": "=====================\n\ndef __radd__(self, other):\n    \"\"\"Return new sorted-key list containing all values in both sequences.\n    ``skl + other`` <==> ``skl.__radd__(other)``\n    Values in `other` do not need to be", "answers": ["        return self.__class__(values, key=self._key)"], "all_classes": null, "length": 7674}
{"pred": "=====================\n\ndef _finalize_loaded(self, states):\n    \"\"\"Finalize the loading of a set of states.\n    This method is called by :meth:`.Session.flush` when a set of\n    :class:`.State` objects have been loaded into the :", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "               else if (this.RequiredRace == Race.Human && from.Race != Race.Human)\n                    from.SendLocalizedMessage(1072204); // Only Humans may use this.\n                    // Add other races here as needed.\n", "answers": ["                    else if (this.RequiredRace == Race.Gargoyle)"], "all_classes": null, "length": 4125}
{"pred": "\t\t\t\tnew syspalvalue { @class = \"ITTY\", value = 220, name = \"FULLTEXT_THESAURUS_TERM_TABLE\" },\n\t\t\t\tnew syspalvalue { @class = \"ITTY\", value = 221,", "answers": ["\t\t\t\tnew syspalvalue { @class = \"LEOP\", value = 0, name = \"TABLE\" },"], "all_classes": null, "length": 7135}
{"pred": "       if (emails == null) {\n            return;\n        }\n        for (int i = 0; i < emails.length(); i++) {\n            JSONObject email = emails.getJSONObject(i);\n            JSONArray emailTypes = email.optJSONArray(\"type\");", "answers": ["        if (emails == null) {"], "all_classes": null, "length": 4282}
{"pred": "           return ToJson(result);\n        }\n        private void LogEvent(string message, bool sanitise = true)\n        {\n            if (NoLog)\n                return;\n            if (Verbosity > 1)\n            {\n                WriteLine(message);", "answers": ["            if (Diff.Count > 0 && DiffMode)"], "all_classes": null, "length": 4201}
{"pred": "\t\t\tblock = new byte[BZip2Constants.MAX_BLOCK_SIZE + 1];\n\t\t\tzptr = new int[BZip2Constants.MAX_BLOCK_SIZE + 1];\n\t\t\tftab = new int[BZip2Constants.", "answers": ["\t\t\tint n = BZip2Constants.baseBlockSize * blockSize100k;"], "all_classes": null, "length": 5391}
{"pred": "                       int x = args[1] + (Camera.CurrentPosition.X & 7);\n                        int y = args[2] + ScreenTop;\n                        for (int i = _objs.Length - 1; i >= 0; i--)\n                        {\n", "answers": ["                        var a = Actors[args[1]];"], "all_classes": null, "length": 4518}
{"pred": "                   iFile.close();\n                }\n            }\n            catch (final ObjectStoreException ex)\n            {\n                ex.printStackTrace();\n                throw ex;\n            }\n            catch (final Exception ex)\n            {\n                ex.printStackTrace();\n               ", "answers": ["                    if (iFile != null)"], "all_classes": null, "length": 4288}
{"pred": "\t\t\ttrackError += trackSegmentError ;\n\t\t}\n\t\treturn trackError ;\n\t}\n\t/**\n\t * Finds a simpler track path with the minimum possible amount of linear sub-segments for which none of the discarded track points is more than <b>accuracy", "answers": ["\t\t\tif (trackSegmentError > trackError)"], "all_classes": null, "length": 5623}
{"pred": "\t\t\t\t\"    {0}\" +\n\t\t\t\t\"    Sub Something(ByVal value1 As Object, ByVal value2 As Object, ByRef index As Integer, ByRef count As Integer){0}\" +\n\t\t\t\t\"End Interface{0}\", NewLine),", "answers": ["\t\t\t\t\"    {0}\" +"], "all_classes": null, "length": 5620}
{"pred": "               });\n            #endregion Jhin\n            #region Jinx\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Jinx\",\n                    SpellName = \"JinxW\",\n                    Slot = SpellSlot", "answers": ["                    ExtraMissileNames = new[] { \"JhinRShotMis4\" },"], "all_classes": null, "length": 4463}
{"pred": "                           newHouse.Deed = m_House.Deed;\n                            newHouse.Deed.Location = m_House.Deed.Location;\n                            newHouse.Deed.Map = m_House.Deed.Map;\n                           ", "answers": ["                            if (m_House.MovingCrate != null)"], "all_classes": null, "length": 5532}
{"pred": "\t\tplot = new Plot();\n\t\tplotID++;\n\t\tString name = \"Plot \"+plotID;\n\t\tplot.setName(name);\n\t\tplot.setTitle(name);\n\t\tplot.setXLabel(\"X\");\n\t\tplot.setY", "answers": ["\t\tString title = getFirstString();"], "all_classes": null, "length": 5653}
{"pred": "           if widgetName:\n                self._add_additionalproperty( listitem, \"widgetName\" + widgetID, widgetName )\n                self.changeMade = True\n            # Get the widget type\n            widgetType = selectedShortcut.getProperty( \"widgetType\" )\n", "answers": ["                        widgetTempName = xbmc.getInfoLabel(widgetName)"], "all_classes": null, "length": 6955}
{"pred": "       return encodeBytesToBytes( source, NO_OPTIONS );\n    }\n    \n    /**\n     * Encodes a byte array into Base64 notation.\n     * <p>\n     * Example options:<pre>\n     *   GZIP: gzip-compresses", "answers": ["        byte[] encoded = null;"], "all_classes": null, "length": 5023}
{"pred": "           mnem[ishr] = \"ishr\";\n            mnem[lshr] = \"lshr\";\n            mnem[iushr] = \"iushr\";\n            mnem[lushr] = \"lushr\";\n            mnem[iand", "answers": ["            mnem[ishr] = \"ishr\";"], "all_classes": null, "length": 6113}
{"pred": "# This is a Python 2.x compatibility layer.  It is used to convert bytes to unicode\n# strings for json.dumps().  It is not used in Python 3.x.\ndef json_dict_bytes_to_unicode(data, encoding='utf-8'):", "answers": ["            umask = os.umask(0)"], "all_classes": null, "length": 7132}
{"pred": "\t\t\t\t\tfor (int i = 0; i < Menus [selected].Children.Length; i++){\n\t\t\t\t\t\tif (Menus [selected].Children [i].Title [0] == c){\n\t\t\t\t\t\t\tMenus [selected].", "answers": ["\t\t\t\t\tforeach (var mi in Menus [selected].Children){"], "all_classes": null, "length": 7643}
{"pred": "       if (pixelStride > lastScanOffset) {\n            throw new RasterFormatException(\"Pixel stride is greater than \"+\n                                            \"scanline stride\");\n        }\n    }\n}", "answers": ["        int lastPixelOffset = (width - 1) * pixelStride;"], "all_classes": null, "length": 4323}
{"pred": "   def get_shared_meminfo(self):\n        \"\"\"\n        Returns the VM's shared memory information.\n        :return: Shared memory used by VM (MB)\n        \"\"\"\n        if self.is_dead():\n            logging.error(\"Could not get shared memory info from", "answers": ["        shm = int(open(filename).read().split()[2])"], "all_classes": null, "length": 7764}
{"pred": "# TODO: Add support for delta syncing of drafts\n# TODO: Add support for delta syncing of threads\n# TODO: Add support for delta syncing of events\n# TODO: Add support for delta syncing of transactions\n# TODO: Add support for delta syncing of categories\n# TODO:", "answers": ["    exclude_types = args.get('exclude_types')"], "all_classes": null, "length": 4956}
{"pred": "   # This field is used to store the last time the enrollment was updated.\n    # It's used to determine if the enrollment needs to be updated when a\n    # user visits a course.\n    last_updated = models.DateTimeField(auto_now=True, db_index", "answers": ["    objects = CourseEnrollmentManager()"], "all_classes": null, "length": 4276}
{"pred": "\nfor system in systems:\n    system_id = self.get_system_id(system)\n    if not system_id:\n        continue\n    self.client.system.removeCustomValues(self.session,\n                                          system_id,\n                                          keys)\n", "answers": ["        system_id = self.get_system_id(system)"], "all_classes": null, "length": 5050}
{"pred": "# Define a function to add a new instrument definition to the LilyPond document.\ndef add_instrument_definition(name, instrument_definition):\n    \"\"\"\n    Add a new instrument definition to the LilyPond document.\n\n    :param name: The name of the instrument.\n   ", "answers": ["        'types': ('general-music', 'sequential-music',),"], "all_classes": null, "length": 4888}
{"pred": "\t\t\t\t.Append (string.Join (\"/\", Text))\n\t\t\t\t.ToString ();\n\t\t}\n\t\t\n#endregion\n\t}\n}", "answers": ["\t\t\t\t.Append (base.ToString ()).ToString ();"], "all_classes": null, "length": 5367}
{"pred": "               chr.CollidingObj = false;\n                // We'll use this to keep track of the number of collisions\n                // that occur during this frame\n                chr.CollisionCount = 0;\n                // We'll use this to keep track of the number", "answers": ["                if (chr.Shell == IntPtr.Zero || chr.Body == IntPtr.Zero)"], "all_classes": null, "length": 6278}
{"pred": "   for t in ts:\n        t.start()\n    # spawn status updater\n    if number_threads > 1:\n        status_updater = StatusUpdater(total_recs, finished_queue)\n        status_updater.start()\n    # wait for all", "answers": ["        update_t = StatusUpdater(total_recs, finished_queue)"], "all_classes": null, "length": 6540}
{"pred": "# Here we need to add the following fields:\n# - account_analytic_id\n# - account_analytic_line_id\n# - analytic_tag_ids\n# - analytic_tag_line_ids\n# - analytic_account_id\n# -", "answers": ["        digits= dp.get_precision('Product Price'),"], "all_classes": null, "length": 4978}
{"pred": "\n    def __getitem__(self, index):\n        \"\"\"\n        Return either a single cell (ID object) from the Population, if `index`\n        is an integer, or a subset of the cells (PopulationView object), if\n        `index` is a slice or array.", "answers": ["        data = self.get_data(variables, gather, clear, annotations)"], "all_classes": null, "length": 5678}
{"pred": "               return -value.doubleValue(); // assuming that all operands are double\n            }\n        };\n    }\n    /**\n     * Creates a boolean negation expression.\n     *\n     * @param operand\n     */\n    public static UnaryExpression not(Expression operand) {", "answers": ["                Class<? extends Number> type = value.getClass();"], "all_classes": null, "length": 5044}
{"pred": "               });\n            #endregion Lucian\n            #region Lux\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Lux\",\n                    SpellName = \"LuxQ\",\n                    Slot = SpellSlot.", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "           \"   NEW: \" + nodeUpdate);\n        }\n        return true;\n    }\n    \n    /**\n     * Updates the node's transaction and <b>cm:auditable</b> properties.\n     * <p/>\n     * This method is used when the", "answers": ["                    \"   NEW: \" + nodeUpdate);"], "all_classes": null, "length": 6068}
{"pred": "     if (measureModeCrossDim == CSSMeasureMode.EXACTLY) {\n        crossDim = availableInnerCrossDim;\n      } else if (measureModeCrossDim == CSSMeasureMode.AT_MOST) {\n        crossDim = Math.min(availableInnerCrossDim, leadingPadding", "answers": ["      for (i = startOfLineIndex; i < endOfLineIndex; ++i) {"], "all_classes": null, "length": 4941}
{"pred": "\t\t\t\tyAxis.DrawGrid( g, this, scaleFactor, shiftPos );\n\t\t\t\tshiftPos += yAxis._tmpSpace;\n\t\t\t}\n\t\t\tforeach ( Y2Axis y2Axis in _y2AxisList )\n\t\t\t{\n", "answers": ["\t\t\t\tyAxis.DrawGrid( g, this, scaleFactor, shiftPos );"], "all_classes": null, "length": 4173}
{"pred": "           if (info < 0)\n                throw new ILArgumentException(\"qr: an error occoured during decomposition\"); \n            return ret; \n        }\n        /// <summary>\n        /// QR decomposition, returning Q and R\n        /// </summary>\n        /// <", "answers": ["            if (info < 0)"], "all_classes": null, "length": 4728}
{"pred": "               if (c instanceof JTextComponent) {\n                    JTextComponent tc = (JTextComponent) c;\n                    tc.setFont(getFont());\n                }\n                super.setPropertiesFromAttributes();\n            }\n        }\n        /**\n         * A", "answers": ["                if ((c != null)"], "all_classes": null, "length": 9124}
{"pred": "\t\t\t\tif (c == '\\n') {\n\t\t\t\t\t++line;\n\t\t\t\t\t++col;\n\t\t\t\t\ttokens_seen = false;\n\t\t\t\t\tif (comments_seen) {\n\t\t\t\t\t\tif (", "answers": ["\t\t\t\tswitch (c) {"], "all_classes": null, "length": 8996}
{"pred": "```python\n        for dep in self.__deps:\n            if dep.recipe is None:\n                dep = dep.recipe = self.__recipeSet.getRecipe(dep.name)\n            if dep.recipe is None:\n                raise ParseError(\"", "answers": ["        depStates = { n : s.copy() for (n,s) in states.items() }"], "all_classes": null, "length": 8648}
{"pred": "           xmlWriter.WriteAttributeString(\"Top\", XmlConvert.ToString(pane.Top));\n            xmlWriter.WriteAttributeString(\"Left\", XmlConvert.ToString(pane.Left));\n            xmlWriter.WriteAttributeString(\"Width\", XmlConvert.ToString(pane.Width", "answers": ["            if (pane.Items.Count > 1)"], "all_classes": null, "length": 8608}
{"pred": "#                        &nbsp;&nbsp;&nbsp;- configuration file \\\"websearch_external_collections_config.py\\\" has %(number_file)s collections\n                        <br /><br /><a href=\"%(site_url)s/admin/websearch/websearchadmin", "answers": ["                        &nbsp;(<span class=\"warning\">extra: %(diff)s</span>)<br />"], "all_classes": null, "length": 11089}
{"pred": "\nclass _Request(object):\n    \"\"\"\n        A request to the webservice.\n        This class is not meant to be instantiated directly.\n    \"\"\"\n    def __init__(self, network, method, params=None):\n        self.network = network\n        self.method", "answers": ["        if type(text) == int:"], "all_classes": null, "length": 9909}
{"pred": "           if (result != RESULT.OK)\n            {\n                return result;\n            }\n            if (sound == null)\n            {\n                soundnew = new Sound();\n                soundnew.setRaw(soundraw);\n                sound = soundnew;\n           ", "answers": ["            if (result != RESULT.OK)"], "all_classes": null, "length": 14097}
{"pred": "#\n# This is the main entry point of the script\n#\nif __name__ == \"__main__\":\n    if len(sys.argv) < 2:\n        print \"Usage: %s <project>\" % sys.argv[0]\n        sys.exit(1)\n", "answers": ["                            desc = escape(desc)"], "all_classes": null, "length": 8020}
{"pred": "# TODO: Add code to update the synapses based on the permChanges\n#       and the input.\n#       This is where the actual learning happens.\n#       The permChanges array contains the new permanence values for each\n#       input. We need to update the synapses based on", "answers": ["                    columnNum // self.coincidencesShape[1],"], "all_classes": null, "length": 8992}
{"pred": "=====================\n\ndef CreateDisks(lu, instance, disk_template=None, to_skip=None,\n                target_node_uuid=None, disks=None):\n  \"\"\"Create all disks for an instance.\n  This abstracts away some work from AddInstance", "answers": ["        check_nodes = [self.new_node_uuid, self.other_node_uuid]"], "all_classes": null, "length": 8172}
{"pred": "# TODO: add support for GraalVM specific options\n# TODO: add support for GraalVM specific options\n# TODO: add support for GraalVM specific options\n# TODO: add support for GraalVM specific options\n# TODO: add support for GraalVM specific options\n# TODO: add", "answers": ["        complt += '\\t\\t\\t\\t\\t-\"'"], "all_classes": null, "length": 8122}
{"pred": "           }\n        }\n        [CommandProperty(AccessLevel.GameMaster)]\n        public int ControlSlots\n        {\n            get\n            {\n                if (m_ControlMaster != null)\n                {\n                    return m_ControlMaster.ControlSlots;\n              ", "answers": ["                if (m_ControlMaster != null)"], "all_classes": null, "length": 9893}
{"pred": "       if (getParent() != null) {\n            Component parent = getParent();\n            if (parent instanceof Container) {\n                Container container = (Container) parent;\n                if (!container.visibleBoundsContains(x, y)) {\n                    contains = false;\n               ", "answers": ["        if (contains) {"], "all_classes": null, "length": 10298}
{"pred": "                           int n2 = ((y + r) * image_width) + x;\n                            if ((bmp_mono[n1] == 255) && (bmp_mono[n2] == 255))\n                                side1++;\n", "answers": ["                            side1 += bmp_mono[n1];"], "all_classes": null, "length": 8006}
{"pred": "\t\t\t z = new double[3];\n\t\t\t z[0] = -1.0 / 16.0;\n\t\t\t z[1] = 9.0 / 16.0;\n\t\t\t z[2] = 13.0", "answers": ["\t\t\t z = new double[3];"], "all_classes": null, "length": 9193}
{"pred": "\t\tStringBuilder fields_in_table = new StringBuilder();\n\t\ttry\n\t\t{\n\t\t\tResultSet rs = getTableFields(tableName);\n\t\t\t\n\t\t\tif (rs!=null)\n\t\t\t{\n\t\t\t\tResultSetMetaData rs", "answers": ["        RowMetaInterface tabFields = getTableFields(tableName);"], "all_classes": null, "length": 9895}
{"pred": "\t\t\tbonusFeats[3] = new String[] {\"IMPROVED SNEAK ATTACK\"};\n\t\t\tbonusFeats[6] = new String[] {\"TRAP SENSE\"};\n\t\t\tbonusFeats[9] = new String[] {\"", "answers": ["\t\t\tfeIndex = rand.nextInt(allFE.size());"], "all_classes": null, "length": 8696}
{"pred": "\"\"\"\n        self.SetHoverItem(None)\n        self.SetPressedItem(None)\n        self.StopPreviewTimer()\n        self.RefreshOverflowState()\n# ----------------------------------------------------------------------\nclass AuiToolBar(wx.Panel):\n    \"\"\"\n    A", "answers": ["        Handles the ``wx.EVT_LEAVE_WINDOW`` event for L{AuiToolBar}."], "all_classes": null, "length": 11431}
{"pred": "           mute = (m != 0);\n            return result;\n        }\n        public RESULT setReverse         (bool reverse)\n        {\n            return FMOD_EventCategory_SetReverse(eventcategoryraw, (reverse ? 1 : 0));\n       ", "answers": ["            mute = (m != 0);"], "all_classes": null, "length": 9240}
{"pred": "\tprotected override int QuestId { get { return 519436; } }\n\tprotected override string LQuestDescription { get { return L(\"Walter from the general store and Austeyn from the bank haven't returned their [Borrowed Book from the Library]. Can you please", "answers": ["\tprotected override int QuestId { get { return 519436; } }"], "all_classes": null, "length": 9147}
{"pred": "           try{ ois.close(); } catch( Exception e ){EncogLogging.log(e);}\n        }   // end finally\n        \n        return obj;\n    }   // end decodeToObject\n    \n    \n    /**\n     * Decodes a Base64 encoded", "answers": ["            try{ ois.close();  } catch( Exception e ){EncogLogging.log(e);}"], "all_classes": null, "length": 8136}
{"pred": "```python\n        if e.nodeType == e.ELEMENT_NODE and e.localName == \"layout\":\n            self.layoutNode = e\n            break\n        else:\n            self.builtWithNoXLF = True\n            log.log(0,\"error\",_", "answers": ["                if e.nodeType == e.ELEMENT_NODE and e.localName == \"layout\":"], "all_classes": null, "length": 8661}
{"pred": "           if((numBits & 0x2) == 0)         // even number of bits\n            {\n                BigInteger result = new BigInteger();\n                BigInteger x = new BigInteger();\n                BigInteger y = new BigInteger();\n                BigInteger two =", "answers": ["                numBits = (numBits >> 1) + 1;"], "all_classes": null, "length": 8360}
{"pred": "       if cdata is not None:\n            # If the slice is a constant, we can remove the Subtensor\n            # and replace it with a scalar constant.\n            # This optimization is only applied to the first slice.\n            # If there are more slices, they are not removed.\n", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": "```python\n                   is_const=True, is_virtual=True, is_pure_virtual=False)\n```\n## attribute.h (module 'core'): bool ns3::AttributeAccessor::Get(ns3::ObjectBase const * object, ns3::AttributeValue &", "answers": ["                   is_const=True, is_virtual=True, is_pure_virtual=True)"], "all_classes": null, "length": 10722}
{"pred": "                   Node child = body.getFirst();\n                    if (child instanceof Node.TemplateText) {\n                        templateTextOptimization = true;\n                    }\n                }\n                if (templateTextOptimization) {\n                    out.printin(varName", "answers": ["                    Node bodyElement = body.getNode(0);"], "all_classes": null, "length": 9144}
{"pred": "\t\t\t\t\tif (suppressing_key_press) {\n\t\t\t\t\t\treturn PreProcessControlState.MessageHandled;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase Msg.WM_KEYUP:\n\t", "answers": ["\t\t\t\t\tif (PreProcessMessage (ref msg))"], "all_classes": null, "length": 9784}
{"pred": "# load preprocessed scan\n# load_preprocessed_scan(self, exp_number, scan_number, md_dir, output_ws_name)\n# check whether the pre-processed data has a set of matching calibrated parameters comparing to\n# the current one\n#", "answers": ["        if os.path.exists(md_file_path) is False:"], "all_classes": null, "length": 9108}
{"pred": "```python\ndef __import__(name, globals=None, locals=None, fromlist=None, level=0):\n    \"\"\"Import the module with the given name.\n    The globals and locals arguments are used to create a new module with\n    the given name and the given glob", "answers": ["            package = package.rpartition('.')[0]"], "all_classes": null, "length": 8094}
{"pred": "               GenerateImplicitConversionError(diagnostics, syntax, conversion, ((MethodGroup)expression).Method, targetType);\n                return;\n            }\n            if (expression.Kind == BoundKind.Delegate)\n            {\n                GenerateImplicitConversionError(diagnostics", "answers": ["                var methodGroup = (BoundMethodGroup)expression;"], "all_classes": null, "length": 8696}
{"pred": "# Create a regular expression for the search terms.\nsearch_regx = re.compile(search_reg_str, flags)\n# Search for verses that match the search terms.\nreturn self.find_from_regex(ref_iter, search_regx, strongs, morph)", "answers": ["            search_reg_str = '\\\\b%s\\\\b' % search_terms.replace(' ',"], "all_classes": null, "length": 11879}
{"pred": "#                if not self.__IsToken(\"=\"):\n#                    raise Warning(\"expected '=' At Line \", self.FileName, self.CurrentLineNumber)\n#                FvImageSectionObj.FvName = self.__Token\n#                self.__GetNextToken()\n", "answers": ["                if not self.__IsKeyword(\"FV\"):"], "all_classes": null, "length": 10845}
{"pred": "```python\n  def CompileSourcesPhase(self):\n    return self.GetBuildPhaseByType(PBXSourcesBuildPhase)\n```\nThis code defines a method `CompileSourcesPhase` for the `PBXNativeTarget` class. This method returns the `PBXSourcesBuild", "answers": ["      headers_phase = PBXHeadersBuildPhase()"], "all_classes": null, "length": 11459}
{"pred": "# Get skeletal data for two neurons\nneuron_list = pymaid.get_neuron(['12345', '67890'], myInstance)\n# Get skeletal data for a single neuron\nneuron = pymaid.get_neur", "answers": ["    post = {'node_ids[{}]'.format(i): n for i, n in enumerate(x)}"], "all_classes": null, "length": 14106}
{"pred": "                       // The exponent is recognized as a single entity.\n                        // It is not parsed further.\n                        pos += exponent.length();\n                        continue;\n                    } else {\n                        throw new IllegalArgumentException(\"Unexpected character '\" +\n                            ch + \"' in pattern \\\"\"", "answers": ["                        if (useExponentialNotation) {"], "all_classes": null, "length": 11534}
{"pred": "\nclass RichTextCtrl(wx.TextCtrl):\n\"\"\"\n\nclass RichTextCtrl(_object):\n    __swig_setmethods__ = {\n        \"BeginRightIndent\": _swig_setattr_nondynamic_method(RichTextCtrl_BeginRightIndent),\n", "answers": ["        BeginBatchUndo(self, String cmdName) -> bool"], "all_classes": null, "length": 9452}
{"pred": " [ \"%(componentType)s\" = \"agent\" ] && renice 20 -p $$\n  #%(bashVariables)s\n  #\n  exec /usr/sbin/lighthttpd -f -p 80 -n -D\n  \"\"\" %", "answers": ["  exec lighttpdSvc.sh < /dev/null"], "all_classes": null, "length": 8611}
{"pred": "   if (tractor.getY() - target.getY() == -2) {\n      my = -1;\n    }\n    if (tractor.getY() - target.getY() == 2) {\n      my = 1;\n    }\n    if", "answers": ["    if (tractor.getY() - target.getY() == -2) {"], "all_classes": null, "length": 8405}
{"pred": "'''\n# This is the code to be completed\n# The code below should be used to register the VM to the engine\n# The code below should be used when C(state) is set to registered\n# The code below should be used when C(allow_partial_import) is set to True\n", "answers": ["        elif state == 'suspended':"], "all_classes": null, "length": 8276}
{"pred": "       if (subChans.isEmpty() && unsubChans.isEmpty()) {\n            m = ModeFactory.getMode(\"Channel_queries\", \"list_child_channels_for_set\");\n        }\n        else {\n            m = ModeFactory.getMode(\"Channel_quer", "answers": ["        List<Map> subDr = Collections.EMPTY_LIST;"], "all_classes": null, "length": 10246}
{"pred": "           for (int i = 0; i < libs.size(); i++) {\n                NativeLibrary lib = libs.elementAt(i);\n                if (lib.name.equals(name)) {\n                    if (lib.isBuiltin) {\n                        //", "answers": ["            int size = libs.size();"], "all_classes": null, "length": 8562}
{"pred": "           state.s1 = s1;\n            state.s2 = s0;\n            state.magicv = hqrndmagic;\n        }\n        /*************************************************************************\n        HQRNDState  initialization  with  given  seed.\n         ", "answers": ["            hqrndseed(s0, s1, state, _params);"], "all_classes": null, "length": 18518}
{"pred": "               hr = (float) radii.getTopRightHorizontalRadius();\n                vr = (float) radii.getTopRightVerticalRadius();\n                // 1 - Top Right:     X - HR, Y + 0 ,      X, Y,      X + 0 ,", "answers": ["                hr = (float) radii.getTopRightHorizontalRadius();"], "all_classes": null, "length": 9945}
{"pred": "\n        group.add_option(\"--installroot\", dest=\"installroot\",\n                         help=_(\"install root directory\"), metavar='[install root]')\n\n        group.add_option(\"--nogpgcheck\", dest=\"nogpgcheck\", action=\"store_true\",\n                ", "answers": ["        group.add_option(\"\", \"--rpmverbosity\", default=None,"], "all_classes": null, "length": 8933}
{"pred": "           for (int i = 0; i < retryCount; i++) {\n                try {\n                    // parse the file.\n                    Parser p = new Parser(new Lexer(new PushbackReader(\n                            new InputStreamReader(new FileInputStream(\n", "answers": ["            while (!successful && retryCount-- > 0) try {"], "all_classes": null, "length": 10896}
{"pred": "               }\n                else\n                {\n                    moduleBeingBuilt.AddDebugDocument(MakeDebugSourceDocumentForTree(normalizedPath, tree));\n                }\n            }\n        }\n        private static bool CheckSumMatches(string checkSumText, byte[] source", "answers": ["                        if (guid == existingDoc.SourceHashKind)"], "all_classes": null, "length": 8489}
{"pred": "                   while self.tok[0] != ')':\n                        if self.tok[0] == ',':\n                            self.NextToken()\n                            continue\n                        if typ is None:\n                            typ = self.TokType()\n                        param = self.Parse_", "answers": ["                    if self.tok[0] != ')':"], "all_classes": null, "length": 10276}
{"pred": "   def _render_response_msg_html(self, response_msg):\n        \"\"\"\n        Render the response message as HTML.\n        \"\"\"\n        # TODO: Implement this method\n        return Text(response_msg)\n#-----------------------------------------------------------------------------\n@registry.register\nclass Cal", "answers": ["        options_value = json_d.get('options', [])"], "all_classes": null, "length": 13691}
{"pred": "         pMem.n = sqlite3Strlen30( pMem.z );\n        }\n        pMem.type = SQLITE_TEXT;\n        pMem.enc = SQLITE_UTF8;\n        if ( p.pResultSet[i_pMem] == null", "answers": ["          Debug.Assert( pMem.z != null );"], "all_classes": null, "length": 8052}
{"pred": "   json_data = json.loads(str(form['jsondata']))\n    json_data = json_unicode_to_utf8(json_data)\n    try:\n        orcid = json_data['orcid']\n        pid = json_data['pid']\n   ", "answers": ["        json_data = json.loads(str(form['jsondata']))"], "all_classes": null, "length": 9234}
{"pred": "'''\n\nEXAMPLES = '''\n# Create a new virtual machine with 2 CPUs, 4GB of memory, 10GB disk and 1 network interface\n- name: Create new virtual machine\n  vmware_guest:\n    name: mynewvm\n    state:", "answers": ["                disk_type = expected_disk_spec.get('type', '').lower()"], "all_classes": null, "length": 9014}
{"pred": "\t\t\treturn names [(int) ot] [1];\n\t\t}\n\t\tpublic static OpType GetOpType (string name)\n\t\t{\n\t\t\tfor (int i = 0; i < names.Length; ++i) {\n\t\t\t\tif", "answers": ["\t\t\treturn names [(int) ot] [1];"], "all_classes": null, "length": 8622}
{"pred": "               this.IsExpanded = false;\n                this.ChildBranches.Clear();\n                this.mapObjectToBranch.Remove(this.Model);\n                this.mapObjectToExpanded.Remove(this.Model);\n                this.mapObjectToIndex.", "answers": ["                this.Children = new ArrayList();"], "all_classes": null, "length": 8049}
{"pred": "#----------------------------------------------------------\n# Stock Move\n#----------------------------------------------------------\nclass stock_move(osv.osv):\n    _name = \"stock.move\"\n    _description = \"Stock Move\"\n    _order = \"id\"\n    _columns = {\n        '", "answers": ["        if acc_src == acc_valuation:"], "all_classes": null, "length": 9425}
{"pred": "   out : array of datetime64[D]\n        An array with the same shape as ``dates``, containing the adjusted\n        dates.\n    See Also\n    --------\n    is_busday : Returns a boolean array indicating valid days.\n    busdaycalendar: An object that specifies", "answers": ["    out : array of datetime64[D]"], "all_classes": null, "length": 23278}
{"pred": "       subsets = self._intersect_derive_subset(coord, points, bounds,\n                                               inside_indices)\n        return subsets\n\n    def _intersect_modulus(self, coord, minimum, maximum,\n                           min_inclusive, max_inclusive,", "answers": ["                subsets = dim_coord_subset()"], "all_classes": null, "length": 8031}
{"pred": "\tthis.region = region;\n\tif (region != null) {\n\t\tOS.SetWindowRgn (handle, region.handle, false);\n\t} else {\n\t\tOS.SetWindowRgn (handle, null, false);\n\t}\n}\n/**\n *", "answers": ["\tlong /*int*/ hRegion = 0;"], "all_classes": null, "length": 16705}
{"pred": "       autoclaim_data = WebInterfaceBibAuthorIDClaimPages._autoclaim_papers_box(\n            req, person_id, user_pid, login_info['logged_in_to_remote_systems'],\n            papers_to_autocla", "answers": ["                    operation_parts = {'pid': person_id,"], "all_classes": null, "length": 8290}
{"pred": "=====================\n\n    # TODO: This is a placeholder for a more sophisticated solution.\n    # The current solution is to send an email to the user to confirm the change.\n    # This is not ideal, as it requires the user to check their email and click\n    # a link to confirm", "answers": ["            u\"User %s (%s) opted in to receive emails from course %s\","], "all_classes": null, "length": 8301}
{"pred": "# Here we need to handle the case where the union has no members.\n# In that case, we need to return an empty struct.\nif len(memberTypes) == 0:\n    return CGGeneric(\"pub struct %s {}\") % self.type\n# Otherwise, we need to", "answers": ["        if len(arrayObjectMemberTypes) > 0:"], "all_classes": null, "length": 12254}
{"pred": "#~ class ParseResults(list):\n#~     \"\"\"List-like container for parsed results, with optional named attributes.\n#~     \"\"\"\n#~     def __init__( self, tokens=None, keys=None, modal=False, offset=None ):\n#~         self.modal", "answers": ["                    tokenlist[ikey] = _ParseResultsWithOffset(dictvalue,i)"], "all_classes": null, "length": 11936}
{"pred": " if matched_zero:\n    if Match(r'^\\s*virtual\\s+', line[:matched_zero.start(0)]):\n      error(filename, linenum, 'runtime/casting', 3,\n            'Use \"nullptr\" instead of \"0\" for", "answers": ["    if matched_zero and matched_zero.group(1) != '0':"], "all_classes": null, "length": 20316}
{"pred": "# This is a hack to make the code review extension work with the\n# Mercurial 1.3.1 release, which has a bug in the way it handles\n# the \"svn:keywords\" property.  The bug is that it doesn't set the\n# \"svn", "answers": ["          if after == NULL_HASH:"], "all_classes": null, "length": 10689}
{"pred": "           url = _get_subfield_value(fft, 'u', '')\n            if not url:\n                write_message(\"FFT tag %s does not contain a URL\" % (repr(fft),), verbose=1, stream=sys.stderr)\n              ", "answers": ["            url = field_get_subfield_values(fft, 'a')"], "all_classes": null, "length": 8249}
{"pred": "       List<IfdId> allowedIfds = new ArrayList<IfdId>();\n        for (IfdId id : ifds) {\n            if ((id.getFlags() & ifdFlags) != 0) {\n                allowedIfds.add(id);\n            }", "answers": ["        ArrayList<Integer> l = new ArrayList<>();"], "all_classes": null, "length": 9563}
{"pred": "           c = new double[m];\n            i1_ = (n-1) - (0);\n            for(i_=0; i_<=m-n;i_++)\n            {\n                c[i_] = b[i_+i1_];\n           ", "answers": ["            c = new double[m];"], "all_classes": null, "length": 10316}
{"pred": "       };\n    }\n}", "answers": ["            \"\\x1FF2\\x1F7C\\x03B9\", /* 1FF2; 1F7C 03B9; Case map */"], "all_classes": null, "length": 14273}
{"pred": "       drawImage(bImg, x, y, null);\n        if (op != null) {\n            drawImage(op.filter(bImg, null), x, y);\n        }\n    }\n    /**\n     * Draws a shape using the current paint and composite.\n", "answers": ["        if (bImg == null) {"], "all_classes": null, "length": 14028}
{"pred": "     int pkgStart = fileName.length;\n      for (int i = fileName.length - 1; i >= 0; i--) {\n        char c = fileName[i];\n        if (c == '/' || c == '\\\\') {\n          pkgStart = i +", "answers": ["      Path path = new Path(new String(fileName, 0, pkgEnd));"], "all_classes": null, "length": 9133}
{"pred": "\ndef extract_macros(filename, names, overrides=None, properties=None):\n    \"\"\"Extract the named macros from a qmake file.\n    filename is the name of the file to parse.\n    names is a list of the macro names to extract.\n    overrides is", "answers": ["                if adding and rhs != \"\":"], "all_classes": null, "length": 8273}
{"pred": "           if end and end_line == t[2][0]:\n                logical[-1] += text\n            else:\n                logical.append(text)\n            previous = t\n        if previous:\n            end_line, end = previous[3]\n            if end and end", "answers": ["                start_line, start = t[2]"], "all_classes": null, "length": 8040}
{"pred": "\n    def parse_poly(self, filename):\n        \"\"\" Parse a polynomial file in the syntax as produced by polyselect\n            and polyselect_ropt\n        \"\"\"\n        try:\n            poly = Polynomials(open(filename, \"r\").read().splitlines())\n        except", "answers": ["        with open(filename, \"r\") as inputfile:"], "all_classes": null, "length": 9404}
{"pred": "\t\t\t\tif (mediaEncoderItems.Length != 3)\n\t\t\t\t{\n\t\t\t\t\tthrow new ArgumentOutOfRangeException(String.Format(CultureInfo.CurrentCulture, \"GallerySetting.RetrieveGallerySettingsFromDataStore cannot parse the media encoder", "answers": ["\t\t\t\tif (mediaEncoderItems.Length != 3)"], "all_classes": null, "length": 11381}
{"pred": "           for k in self.splitKeySet.intersection(tree2.splitKeySet):\n                theSum += abs(self.splitKeyHash[k].br.len - tree2.splitKeyHash[k].br.len)\n            for k in selfHasButTree2Does", "answers": ["            for k in self.splitKeySet.intersection(tree2.splitKeySet):"], "all_classes": null, "length": 10347}
{"pred": "class Cube(CFVariableMixin, object):\n    \"\"\"\n    A :class:`Cube` is a multi-dimensional array with metadata.\n    \"\"\"\n    def __init__(self, data=None, coords=None, metadata=None,\n                 dim_coords=None", "answers": ["                kwargs = dict(kwargs)"], "all_classes": null, "length": 11922}
{"pred": "# def _listen(cls, event_key, retval=False, **kw):\n#     fn = event_key._listen_fn\n#     if not retval:\n#         def wrap(*arg, **kw):\n#             query = arg[0]\n#             fn(*arg,", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": "               int left = a.getDimensionPixelSize(LEFT_MARGIN, UNDEFINED);\n                int top = a.getDimensionPixelSize(TOP_MARGIN, UNDEFINED);\n                int right = a.getDimensionPixelSize(RIGHT_MARG", "answers": ["                int margin = a.getDimensionPixelSize(MARGIN, DEFAULT_MARGIN);"], "all_classes": null, "length": 9007}
{"pred": "       return _uuid;\n    }\n    /**\n     * Gets the security subject associated with the logged-on principal.\n     *\n     * @return The security subject associated with the logged-on principal.\n     */\n    Subject getSubject()\n    {\n        if (TraceComponent.", "answers": ["        if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())"], "all_classes": null, "length": 9441}
{"pred": "           return new SynthesizedIntrinsicOperatorSymbol(leftType,\n                                                         OperatorFacts.BinaryOperatorNameFromOperatorKind(op),\n                                                         returnType,\n                                                         isChecked);\n        }\n        private static void GetSymbolsAndResult", "answers": ["                if ((object)leftType == null)"], "all_classes": null, "length": 15198}
{"pred": "# This is the main entry point for the interpreter.\n# It sets up the environment, then processes the command line\n# arguments, then processes the input file.\nif __name__ == '__main__':\n    # Set up the environment.\n    interpreter = Interpreter()\n   ", "answers": ["        if expression in ('1', 'True'): return True"], "all_classes": null, "length": 8731}
{"pred": "     for (int j = 0; j < dsize; j++) {\n        int pos = document.get(j).getPosition();\n        int cliqueSize = document.get(j).getCliqueSize();\n        labels[dataIndex][j] = pos;\n        data[", "answers": ["      if (featureVals != null)"], "all_classes": null, "length": 8316}
{"pred": "       /// <summary>\n        /// </summary>\n        internal uint pad0; // internal padding, must be 0\n    };\n    // subfield record for method list\n    /// <summary>\n    /// </summary>\n    internal struct LeafMethodList\n    {\n        //", "answers": ["        internal string name; // length prefixed name of method"], "all_classes": null, "length": 9110}
{"pred": "           if (extensions.Contains(\"GL_OES_EGL_image\"))\n            {\n                contextProfile = _CONTEXT_ES_PROFILE_BIT;\n            }\n            else\n            {\n                contextProfile = 0;\n            }\n            int[] formats = new", "answers": ["            if (GL.GetString(StringName.Version).StartsWith(\"GL ES\"))"], "all_classes": null, "length": 8378}
{"pred": "\nclass BibDocFile(object):\n    \"\"\"\n    Represents a physical file.\n    \"\"\"\n    __metaclass__ = type\n    __slots__ = ('__dict__', '_bibdoc', '_recid', '_docid', '_version', '_format', '_", "answers": ["    return (0, CFG_WEBACCESS_WARNING_MSGS[0])"], "all_classes": null, "length": 11744}
{"pred": "\n    self._initialized = True\n\nclass UDFLogicalVolumeContentsUse(object):\n    \"\"\"A class representing a UDF Logical Volume Contents Use.\"\"\"\n    __slots__ = ('_initialized', 'num_files', 'num_dirs')\n    FMT = '<", "answers": ["        self.impl_id = UDFEntityID()"], "all_classes": null, "length": 10644}
{"pred": "=====================\n\ndef _concat_objects(self, keys, values, not_indexed_same=False):\n    \"\"\"\n    Concatenate objects along the axis\n    \"\"\"\n    if len(values) == 0:\n        return DataFrame()\n    if isinstance(", "answers": ["                            result = concat(values, keys=key_index,"], "all_classes": null, "length": 9883}
{"pred": "           case 'e':\n                flags |= EXTENDED;\n                break;\n            case 'U':\n                flags &= ~(CASE_INSENSITIVE | UNICODE_CASE);\n                break;\n            case 'A':\n                flags |= CAN", "answers": ["            case '-': // subFlag then fall through"], "all_classes": null, "length": 10915}
{"pred": "       final VirtualMachineProfile profile = _vmProfileDao.findByUuid(vmUuid);\n        final Host srcHost = _hostDao.findById(srcHostId);\n        final Host destHost = _hostDao.findById(destHostId);\n        final VirtualMachine vm =", "answers": ["        final VMInstanceVO vm = _vmDao.findByUuid(vmUuid);"], "all_classes": null, "length": 8853}
{"pred": "======================\n\ndef __init__(self, u_kn, N_k, maximum_iterations=10000, relative_tolerance=1.0e-7, verbose=False, initial_f_k=None, method='adaptive', use_", "answers": ["        W_nk = self._computeWeights(recalc_denom=True)"], "all_classes": null, "length": 12510}
{"pred": "   def test_statDirectory(self):\n        \"\"\"\n        Check the output of the stat method on a directory.\n        \"\"\"\n        self.createDirectory('ned')\n        d = self.shell.stat(('ned',), ('size', 'directory'))\n        def cb(res):", "answers": ["        d = self.shell.stat(('ned',), ('size', 'directory'))"], "all_classes": null, "length": 8415}
{"pred": "           }\n            return i;\n        }   // end read\n        \n        \n        /**\n         * Closes the stream.\n         *\n         * @throws java.io.IOException if there is an error\n         * @since 1.3\n         */\n        @Override\n", "answers": ["                if( b >= 0 ) {"], "all_classes": null, "length": 9989}
{"pred": "           if (b == null)  return a;\n            return new ToolkitEventMulticaster(a, b);\n        }\n        static AWTEventListener remove(AWTEventListener a,\n                                       AWTEventListener b) {\n            if (a == b) {\n               ", "answers": ["            if (b == null)  return a;"], "all_classes": null, "length": 10923}
{"pred": "\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfrom.SendGump( new AdminGump( from, AdminGumpPage.AccountDetails_Access, 0, results, notice == null ? (results.Count == 0 ? \"Nothing matched your search terms.\" :", "answers": ["\t\t\t\t\t\t\t\tresults.Sort( AccountComparer.Instance );"], "all_classes": null, "length": 9034}
{"pred": "           if (result == RESULT.OK)\n            {\n                soundnew = new Sound(soundraw);\n            }\n            return result;\n        }\n        public RESULT createSoundFromFile    (string filename, MODE mode, ref CREATESOUNDEXINFO ex", "answers": ["            if (result != RESULT.OK)"], "all_classes": null, "length": 14660}
{"pred": "           tbl_ix = data[base] & 255;\n            int size = 2;\n            int len = 0;\n            if (lenAvailable > 0) {\n                len = Math.min(lenAvailable, DCTSIZE2*(tbl_ix+", "answers": ["                tbl_ix = data[base] & 255;"], "all_classes": null, "length": 16751}
{"pred": "                   this.AddLabel(x2 + 30, 215, 55, a.Text(200233));  // \"Deathball\"\n                    this.AddButton(x2, 215, 0xFAB, 0", "answers": ["                    this.AddLabel(x2 + 30, 215, 55, a.Text(200233));  // \"DeathBall\""], "all_classes": null, "length": 8017}
{"pred": "           TemplateDT.Retrieve(AFamilyPartnerKey, AReadTransaction);\n            return TemplateDT;\n        }\n        /// <summary>\n        /// todoComment\n        /// </summary>\n        /// <param name=\"ALocationRow\"></param>\n        /// <param name=\"AP", "answers": ["            TemplateRow = TemplateDT.NewRowTyped(false);"], "all_classes": null, "length": 8754}
{"pred": "\t\tbs.flush_bitstream(gfp);\n\t\tret = bs.close_bitstream(gfp);\n\t\treturn ret;\n\t}\n\tprivate int lame_encode_frame(final LameGlobalFlags gfp, final short buffer_l[],\n\t", "answers": ["\t\tif (gfp != null && gfp.class_id == LAME_ID) {"], "all_classes": null, "length": 8018}
{"pred": "               if (AllSubmissionsOK == false)\n                {\n                    TLogging.LogAtLevel(9,\n                        Messages.BuildMessageFromVerificationResult(\"TPartnerEditUIConnector.SubmitChangesPersonnelData AVerificationResult: \",\n                            A", "answers": ["                if (AllSubmissionsOK == false)"], "all_classes": null, "length": 8128}
{"pred": "\n        elif name == \"requires\":\n            self.requires = []\n            for child in child.childNodes:\n                if child.nodeType == child.TEXT_NODE:\n                    self.requires.append(child.nodeValue)\n                elif child.node", "answers": ["                    elif name == \"requires\":"], "all_classes": null, "length": 9136}
