{"pred": "\t\t\traspodelaTableModel.addPrimerak(primerak);\n\t\t\thandleSetPreostalo();\n\t\t\thandleLoad();\n\t\t} catch (UValidatorException e) {\n\t\t\tJOptionPane.showMessageDialog(this, e.", "answers": ["\t\t\tString invKnj = invKnjPanel.getCode();"], "all_classes": null, "length": 451}
{"pred": "               SubCriteria[\"GroupID\"] = new SearchCondition<String>(\"GroupID\");\n              }\n              return (ISearchCondition<String>)SubCriteria[\"GroupID\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"ServerPartition", "answers": ["                 SubCriteria[\"GroupID\"] = new SearchCondition<String>(\"GroupID\");"], "all_classes": null, "length": 475}
{"pred": "\t\taliases.Add (\"gb2312\", \"gb2312\");\n\t\taliases.Add (\"gbk\", \"gb2312\");\n\t\taliases.Add (\"gb_china\", \"gb2312\");\n\t\taliases.", "answers": ["\t\taliases.Add (\"GBK\", \"gb2312\");"], "all_classes": null, "length": 545}
{"pred": "# TODO(josh): Implement the parsing of character classes.\n# This is a TODO from the original code.\n# It's not clear what the intended behavior is, so we'll leave it\n# as a TODO for now.\nif source.match(r'\\['):\nreturn", "answers": ["        if _parse_verbatim(source, '[:%s:]' % class_name):"], "all_classes": null, "length": 850}
{"pred": "#print(suma)\n#print(len(suma))\n#print(suma[0])\n#print(suma[1])\n#print(suma[2])\n#print(suma[3])\n#print(suma[4])\n#print(", "answers": ["check = numbers[5][123]"], "all_classes": null, "length": 502}
{"pred": "       sendBean(\"B\", 1, 1L);\n        sendBean(\"A\", null, null);\n        assertFalse(listener.isInvoked());\n        sendBean(\"A\", 1, 1L);\n        assertEquals(1L, listener.assertOneGetNew().get", "answers": ["        sendBean(\"A\", null, null);"], "all_classes": null, "length": 756}
{"pred": "               item.setExpanded(true);\n                item.setGrayed(false);\n                item.setSelected(true);\n                break;\n            }\n        }\n    }\n    private void saveSettings() {\n        if (activePropertyPage != null) {", "answers": ["                tree.setSelection(new TreeItem[] { item });"], "all_classes": null, "length": 1800}
{"pred": "       topPanel.revalidate();\n        topPanel.repaint();\n    }\n}", "answers": ["        if (nilCard != null) {"], "all_classes": null, "length": 511}
{"pred": "\t\t\tsqrtAspect = (float) Math.sqrt((double) w / h);\n\t\t}\n\t}\n\t\n\tprivate void loadBitmap(String fileName) throws IOException {\n\t\tInputStream is = null;\n\t\ttry {\n\t\t\tis = artist.get", "answers": ["\t\t\tfloat r = (w+h)/2f;"], "all_classes": null, "length": 1042}
{"pred": "       self.__repeat = (delay, interval)\n\nI'm trying to create a GTK+ application that can be used to translate GTK+ events to Pygame events. The code above is a part of the Translator class. The problem is that the _tick_cb function is not being", "answers": ["            self.__tick_id = gobject.timeout_add(10, self._tick_cb)"], "all_classes": null, "length": 703}
{"pred": "# Run the tests\ntest_paths = kwargs[\"test_paths\"]\nproduct = kwargs[\"product\"]\nconfig = kwargs[\"config\"]\nrun_info = kwargs[\"run_info\"]\nmanifest = kwargs[\"manifest\"]\nmanifest_path = kwargs[\"manifest_path\"]\nman", "answers": ["    handler = handlers.LogLevelFilter(logged_critical, \"CRITICAL\")"], "all_classes": null, "length": 1196}
{"pred": "   def get_wavelength(self):\n        \"\"\" Method to get the current wavelength from the wavemeter.\n        @return float: current wavelength in nm\n        \"\"\"\n        # lock the thread to prevent race conditions\n        with self.threadlock:\n            # get the current", "answers": ["        if self.getState() == 'idle':"], "all_classes": null, "length": 885}
{"pred": "       List<String> mustStatusNames = Arrays.asList(\n            PresenceStatus.AVAILABLE.getStatusName(),\n            PresenceStatus.BUSY.getStatusName(),\n            PresenceStatus.CHATTING.getStatusName(),\n            PresenceStatus.DND", "answers": ["        List<String> requiredStatusNames ="], "all_classes": null, "length": 678}
{"pred": "                           await cmd.Execute(this, null);\n                        }\n                    });\n                }\n            }\n            ActivePoll = poll;\n            ActivePoll.Setup(this, options: new PollOptions() { Title = \"Choose a map for the next battle\", Description", "answers": ["                            await cmd.ExecuteArmed(this, null);"], "all_classes": null, "length": 3344}
{"pred": "\t\t\tthis.label1.Location = new System.Drawing.Point(6, 5);\n\t\t\tthis.label1.Name = \"label1\";\n\t\t\tthis.label1.Size = new System.Drawing.Size(140, 13);\n", "answers": ["\t\t\tthis.label1.Location = new System.Drawing.Point(6, 51);"], "all_classes": null, "length": 1316}
{"pred": "\t\t\t\tif (assembly == null && !throwOnMissing) {\n\t\t\t\t\tassembly = BuildManager.GetCompiledType (name).Assembly;\n\t\t\t\t}\n\t\t\t\tif (assembly == null && throwOnMissing) {\n\t\t\t\t\t", "answers": ["\t\t\t\tif (assembly == null) {"], "all_classes": null, "length": 1336}
{"pred": "# Initialize the LinkStatus object\nif __name__ == '__main__':\n    argument_spec = ce_argument_spec()\n    argument_spec.update(\n        interface=dict(type='str', required=True))\n    module = AnsibleModule(argument_spec=", "answers": ["        if self.interface == 'all':"], "all_classes": null, "length": 1718}
{"pred": "   for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      if (Character.isDigit(c) || c == ',') continue;\n      return false;\n    }\n    return true;\n ", "answers": ["    for (int i = 0; i < s.length(); i++)"], "all_classes": null, "length": 939}
{"pred": "\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t\t/// <summary>\n\t\t/// Closes the log file\n\t\t/// </summary>\n\t\tpublic static void Close", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "                           sead_partnn_l = findPath(nodemap_bkup, c_sead, stop, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,", "answers": ["                            if (c_sead == start || c_sead == stop) {"], "all_classes": null, "length": 1426}
{"pred": "\t\t\tthis.Size = new System.Drawing.Size(320, 272);\n\t\t\tthis.ResumeLayout(false);\n\t\t\tthis.PerformLayout();\n\t\t}\n\t\t#endregion\n\t\tprivate System.Windows.Forms.", "answers": ["\t\t\tthis.Size = new System.Drawing.Size(371, 300);"], "all_classes": null, "length": 825}
{"pred": "# behavior = []\n# for observation in observations:\n#     behavior.append(translations_dict[observation['code']])\n#     behavior[-1]['time'] = observation['time']\n#     behavior[-1]['loc'] = observation['loc']\n#     behavior[-1]['", "answers": ["    behavior_list = [ checkOnTour(tourlist, o,"], "all_classes": null, "length": 609}
{"pred": "       self.write_page(addressbookpage, head, body, output_file, sio)\n        self.uplink = self.report.uplink\n        self.report.uplink = FULLCLEAR\n        self.report.write_page(addressbookpage", "answers": ["        footer = self.write_footer(None)"], "all_classes": null, "length": 960}
{"pred": "   self.takeoff()\n    self.fly_mission()\n    self.land()\n    self.context_pop()\n    self.progress(\"Test complete\")\n\n# Add the following lines to the end of the file\nif __name__ == '__main__':\n    Auto", "answers": ["            if abs(m.relative_alt) > max_relalt_mm:"], "all_classes": null, "length": 577}
{"pred": "\t\t\t\t\t\t\tif (strings[0] == \"GlobalSettings\")\n\t\t\t\t\t\t\t\torderManager.LobbySettings = Session.Deserialize<Session.GlobalSettings>(node.Value);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tGame", "answers": ["\t\t\t\t\t\t\tif (strings[0] == \"GlobalSettings\")"], "all_classes": null, "length": 591}
{"pred": "\t\t\t\tSystem.arraycopy(src, srcOffset, buf, 0, byteCount);\n\t\t\t\tbufferedPacket.setPayload(buf);\n\t\t\t\tstate = SocketState.READY;\n\t\t\t\treturn bufferedPacket;\n\t\t\t", "answers": ["\t\t\t\tfor (int i = 0; i < byteCount; i++) {"], "all_classes": null, "length": 783}
{"pred": "       // Create toolbar\n        if (opiRuntimeToolBarDelegate == null)\n        {\n            opiRuntimeToolBarDelegate = new OPIRuntimeToolBarDelegate(this);\n            getSite().setActionBars(new IActionBars() {\n                @Override\n              ", "answers": ["        if (opiRuntimeToolBarDelegate != null)"], "all_classes": null, "length": 813}
{"pred": "           if (launcher != null && launcher.isPopupTrigger(e)) {\n                launcher.launchPopup(e);\n            }\n        }\n    }\n}", "answers": ["            if (launcher != null && !e.isPopupTrigger()) {"], "all_classes": null, "length": 933}
{"pred": "   def test_clean_name_with_single_quote(self):\n        name = parse_name(\"O'Brien John\")\n        self.assertEqual(name, \"John O'Brien\")\n\nThis code is a part of a Django test suite for a Python package called '", "answers": ["            (\"O`NEAL \\nCarol Joy\", \"Carol Joy O'Neal\"),"], "all_classes": null, "length": 919}
{"pred": "           sort_by, sort_order = sort\n            if sort_by not in ['uploadDate', 'displayname']:\n                raise ValueError('Invalid sort_by value: %s' % sort_by)\n            if sort_order not in [ModuleStoreEnum.SortOrder.asc", "answers": ["            if sort[0] == 'uploadDate':"], "all_classes": null, "length": 1853}
{"pred": "           }\n            object IEnumerator.Current => Current;\n            public void Dispose() { }\n            public bool MoveNext()\n            {\n                index++;\n                if (index >= list.Count)\n                    return false;\n                Current = list[index];\n", "answers": ["                index = -1;"], "all_classes": null, "length": 1053}
{"pred": "# Create a new repository instance.\nrepo = unionrepository(ui, path, parentpath)\n# Open the repository.\nrepo.open()\n# Close the repository when done.\nrepo.close()\n# This is just a test, so we don't need to do anything with the repository", "answers": ["                parentpath = parentpath[len(cwd):]"], "all_classes": null, "length": 795}
{"pred": "       record = logging.LogRecord(level, msg, args, fn, lno, *args, **kwargs)\n\n        return record\n\nclass StructuredFormatter(logging.Formatter):\n    \"\"\"A formatter that supports structured logging\"\"\"\n    def __init__(self, datefmt=None", "answers": ["        if sys.version_info[0] == 2:"], "all_classes": null, "length": 897}
{"pred": "                               m.Mana -= 20;\n                            }\n                            else\n                            {\n                                m.SendMessage(\"You have reached the maximum skill level for Spellweaving.\");\n                            }\n                        }\n                        else\n                        {\n                ", "answers": ["                                m.Mana -= 20;"], "all_classes": null, "length": 569}
{"pred": "def step(pattern, func):\n    \"\"\"\n    Register a step function.\n    \"\"\"\n    pattern = re.compile(STEP_PREFIX + pattern)\n    lettuce.step(pattern, func)\ndef given_models_exist(model, data, queryset=None):\n", "answers": ["            for k, v in hash_.iteritems():"], "all_classes": null, "length": 546}
{"pred": "           return page_not_authorized(req=req, referer=\"/edit\",\n                                      text=auth_message)\n        recid = argd['recid']\n        ticket = perform_request_newticket(ln, recid)\n        return page(title=\"New T", "answers": ["            return page_not_authorized(req=req, referer=\"/edit\","], "all_classes": null, "length": 756}
{"pred": "'''\n# Import required modules\nimport os\nimport re\nimport sys\nimport time\nimport subprocess\nimport signal\nimport pwd\nimport socket\nimport select\nimport paramiko\nimport sshkey\nimport tempfile\nimport shlex\nimport struct\nimport pipes\nimport pty\n", "answers": ["        - {key: usetty, section: ssh_connection}"], "all_classes": null, "length": 968}
{"pred": "\t\tdataString += \"WARDLIST\";\n\t\tdataString += ims.NAS.NASMessageCodes.MESSAGESEPARATOR;\n\t\tdataString += \"1\";\n\t\tdataString += ims.NAS.NASMessageCodes.MESSAGESEPARATOR;\n", "answers": ["\t\tWardlistRecord data = (WardlistRecord)DataCollection.get(0);"], "all_classes": null, "length": 1476}
{"pred": "       record_add_field(rec, '300', '1', 'a', page_count)\n        record_add_field(rec, '264', 'a', 'Volume %s, Issue %s, %s-%s' % (volume, issue, first_", "answers": ["            record_add_field(rec, '300', subfields=[('a', page_count)])"], "all_classes": null, "length": 1283}
{"pred": "               assertEquals(A.getQuick(c, r), B.getQuick(r, c));\n            }\n        }\n    }\n    public void testViewRow() {\n        IntMatrix1D row = A.viewRow(NROWS / 2);\n        assertEquals(", "answers": ["                assertEquals(A.getQuick(r, NCOLUMNS - 1 - c), B.getQuick(r, c));"], "all_classes": null, "length": 1319}
{"pred": "# Send Unit Data\n# (PacketField(\"commandSpecificData\", ENIPSendUnitData, ENIPSendUnitData),\n# lambda pkt: pkt.commandId == 0x70),\n# Indicate Status\n# (PacketField(\"commandSpecificData\", ENIPIndicateStatus", "answers": ["                 lambda pkt: pkt.commandId == 0x6f),"], "all_classes": null, "length": 625}
{"pred": "\t\tGridEnvelope gridEnvelope = reader.readGridGeometry();\n\t\t\n\t\t// Extracting the CRS\n\t\tCoordinateReferenceSystem crs = CRS.decode(gridEnvelope.getCoordinateReferenceSystem());\n\t\t\n\t\t// Extracting the", "answers": ["\t\tfinal CoordinateReferenceSystem crs = reader.getCrs();"], "all_classes": null, "length": 805}
{"pred": "           ((Creature) e).setAI(new DefaultCreatureAI());\n        }\n        return e;\n    }\n}\n\n// What should be added here?\n// The code above is incomplete, what should be added here?\n// The code above is incomplete, what should", "answers": ["            Creature c = (Creature) e;"], "all_classes": null, "length": 386}
{"pred": "\t\t\tushort* line = (ushort*)bd.Scan0;\n\t\t\tint delta = bd.Stride >> 1;\n\t\t\tfor( int y = 0; y < height; ++y, line += delta )\n\t\t\t{\n\t\t", "answers": ["\t\t\tushort* line = (ushort*)bd.Scan0;"], "all_classes": null, "length": 1243}
{"pred": "                   if (house == null)\n                        house = BaseHouse.FindHouseAt(new Point3D(m.X, m.Y + 1, 127), m.Map, 16);\n                    if (house != null)\n                        bonus", "answers": ["                    if (house == null)"], "all_classes": null, "length": 585}
{"pred": "Console.WriteLine(\"Display Set Name: {0}\", displaySet.Name);\nConsole.WriteLine(\"Display Set Description: {0}\", displaySet.Description);\nConsole.WriteLine(\"Display Set UID: {0}\", displaySet.Uid);\nConsole.WriteLine(\"Display Set Series UID: {", "answers": ["\t\t\t\t\t\tConsole.WriteLine(\" > {0}\", displaySet.Descriptor.Description);"], "all_classes": null, "length": 803}
{"pred": "# This is a stub for the function that will be implemented in the next exercise.\n# It should return the TimestampFile object for the given file name.\ndef read_file(fname):\n\"\"\"\nRead the contents of a timestamp file and return a TimestampFile object.\n\"\"\"\n#", "answers": ["    exts = supported_extensions()"], "all_classes": null, "length": 653}
{"pred": "\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\t\tif (cgn.depth < 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// find the parent\n\t\t\t\t\t\t\tCell", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "\t\t\t\t    if (down)\n\t\t\t\t    {\n\t\t\t\t\t    switch (ascii)\n\t\t\t\t\t    {\n\t\t\t\t\t\tcase 0x00:\n\t\t\t\t\t\t    break;\n\t\t\t", "answers": ["\t\t\t    case 189: // -/_ key"], "all_classes": null, "length": 1748}
{"pred": "out_list += [weights_dmat_all[index]]\n\nPlease complete the code by adding the following lines:\nout_comment += ['Weighted distortion matrix']\nout_units += ['']\n\nThen, write the output to the fits file:\nresults.write(out_", "answers": ["        out_list += [weights_dmat_all[index]]"], "all_classes": null, "length": 1374}
{"pred": "lines = obj.splitlines()\nreturn list(load(lines, mapping, implementation, strict))", "answers": ["    obj = obj.lstrip(\"\\ufeff\")"], "all_classes": null, "length": 676}
{"pred": "\t\tif (orig == null) {\n\t\t\treturn;\n\t\t}\n\t\tString newUuid = mDbHelper.getBookUuid(newId);\n\t\tcopyFileToCoverImageIfMissing(orig, newUuid);\n\t}\n\t/**\n", "answers": ["\t\tif (orig == null || !orig.exists() || orig.length() == 0)"], "all_classes": null, "length": 866}
{"pred": "           strength += opponent.getValue().getScore(\n                    this.getRuleSet().getPossibleScoringRules().get(0))\n                    .get(0);\n        }\n        tableStrengthScore.setPlayer(player);\n        tableStrengthScore.set", "answers": ["            for (PlayerScore scoreTable : this.scoreTable) {"], "all_classes": null, "length": 1212}
{"pred": "   def test_public_mode_off(self, temp_dir, common_obj):\n        web = web_obj(temp_dir, common_obj, \"receive\")\n        web.settings.set(\"general\", \"public\", False)\n        with web.app.test_", "answers": ["            res = c.get(\"/\")"], "all_classes": null, "length": 919}
{"pred": "           nsClientService = mLocalBinder.getService();\n        }\n    };\n    public void addToLog(String log) {\n        listLog.add(new EventNSClientLog(log));\n        textLog = Html.fromHtml(log);\n        if (aut", "answers": ["                nsClientService = mLocalBinder.getServiceInstance();"], "all_classes": null, "length": 516}
{"pred": "=====================\nif __name__ == \"__main__\":\n    main()\n# This script is part of the Python for Windows distribution.\n# It is distributed under the same license as Python itself.\n# For more information, see http://www.python.org/windows/\n#\n#", "answers": ["            if arch == \"amd64\":"], "all_classes": null, "length": 982}
{"pred": "\t}\n\t\n\tvoid UpdateUpgradeStatCost(int id, int length){\n\t\tfor(int i=0; i<towerList[index].upgradeStat.Length; i++){\n\t\t\tint[] tempCostList=towerList[index].upgradeStat", "answers": ["\t\tfor(int i=0; i<length; i++){"], "all_classes": null, "length": 3890}
{"pred": "\t\t\t\tAddRes( index, 10, 100 );\n\t\t\t\tAddRes( index, 11, 100 );\n\t\t\t\tAddRes( index, 12, 100 );\n\t\t\t\tAddRes(", "answers": ["\t\t\t\tAddRes( index, typeof( BrilliantAmber ), 1032697, 1, 1044240 );"], "all_classes": null, "length": 3677}
{"pred": "```python\nself.test_simple_file()\n```\nThis line of code is testing a simple file conversion using the `prop2po` command. You can add more test cases for different scenarios if needed.\n\nHere's an example of a test case for a file conversion:\n", "answers": ["        options = self.help_check(options, \"-P, --pot\")"], "all_classes": null, "length": 1336}
{"pred": "\t\t\tsw.WriteLine (\"\\t// TODO: Add members and methods here.\");\n\t\t\tsw.WriteLine (\"\\t// Use the 'Add' method to define your members and methods.\");\n\t\t\tsw.WriteLine (\"\\t// For example:\");\n\t\t\tsw.WriteLine", "answers": ["\t\t\tforeach (Signal sig in sigs.Values) {"], "all_classes": null, "length": 1298}
{"pred": "   module = AnsibleModule(\n        argument_spec=fields,\n        supports_check_mode=True\n    )\n\n    fos = FortiOSHandler(api_version='6.4.0')\n    fos.login(data=module.params)\n\n    is", "answers": ["    module = AnsibleModule(argument_spec=fields,"], "all_classes": null, "length": 1009}
{"pred": "   node.setLeaf(leaf);\n  }\n  public void setPresentableTextContainer(Element presentableTextContainer) {\n    this.presentableTextContainer = presentableTextContainer;\n  }\n  public void setInfoTextContainer(Element infoTextContainer) {\n    this", "answers": ["    if (node instanceof MutableNode) {"], "all_classes": null, "length": 568}
{"pred": "           return prevChildren.Take(StartPagingTreshold)\n                .Concat(Enumerable.Range(0, (previousChildren.Length - StartPagingTreshold + PageSize - 1) / PageSize)\n                    .Select(i => childFactory(null, \"Page \"", "answers": ["            var page = prevChildren.Take(StartPagingTreshold).ToList();"], "all_classes": null, "length": 781}
{"pred": "   soaResponse = dns.message.make_response(query, soa)\n    responses.append(soaResponse)\n    response = dns.message.make_response(query)\n    content = \"\"\n    for i in range(200):\n        if len", "answers": ["        soaResponse = dns.message.make_response(query)"], "all_classes": null, "length": 648}
{"pred": "       if (kind == null) {\n            throw new IllegalArgumentException(\"Unknown JFlex token id: \" + javaccKind);\n        }\n        return kind;\n    }\n    public TokenCategory getCategory() {\n        return category;\n    }\n    public int getJav", "answers": ["        if (kind == null) {"], "all_classes": null, "length": 524}
{"pred": "           return FindControl(DescriptionID);\n        }\n        public Control GetLabelForTitle()\n        {\n            return FindControl(TitleID);\n        }\n        public Control GetLabelForPercentage()\n        {\n            return FindControl(PercentageControlID);\n        }\n       ", "answers": ["            return this.FindControlRecursive(DescriptionControlID) as Label;"], "all_classes": null, "length": 450}
{"pred": "       url = '%s%s%s?%s' % (self.protocol, host, path, urllib.urlencode(query_args))\n        #url = self.generate_url(method, bucket, key, headers, query_args)\n        #return self.send", "answers": ["            path += '?' + query_args"], "all_classes": null, "length": 1198}
{"pred": "\t\t\t\tcanvas.drawBitmap(tiles[i].getBitmap(), left, top, null);\n\t\t\t}\n\t\t}\n\t}\n\tprivate float getPosX(LatLonPos pos, double localScale){\n\t\treturn (pos.getLon()", "answers": ["\t\t\t\tRectF destRect = new RectF(left, top, right, bottom);"], "all_classes": null, "length": 1184}
{"pred": "           HueInfo = new Dictionary<DyeType, Tuple<int, int>>();\n            HueInfo.Add(DyeType.WindAzul, new Tuple<int, int>(0x3B2, 0x3B2));\n            HueInfo.", "answers": ["            HueInfo = new Dictionary<DyeType, Tuple<int, int>>();"], "all_classes": null, "length": 535}
{"pred": "               this.gwtXSRFTokenService.getToken(c -> {\n                    final String token = c.getResult();\n                    this.gwtCertificatesService.deleteEntry(selected.getKeystoreName(), selected.getAlias(), token,\n                            c1", "answers": ["                final Modal modal = new Modal();"], "all_classes": null, "length": 698}
{"pred": "\t\t\t\"    Public Sub SomeMethod(Of T As Type)()\", GenerateCode), GenerateCode);\n\t\t\tAssert.AreEqual (\"\\n\" +\n\t\t\t\t\"Namespace SomeNS\\n\" +\n\t\t\t\t\"    Public Sub SomeMethod(Of T As", "answers": ["\t\t\t\t\"    {0}\" +"], "all_classes": null, "length": 1270}
{"pred": "\nclass DBMContainer(Container):\n    \"\"\"\n    A container that uses a DBM database to store its data.\n    \"\"\"\n\n    def __init__(self, namespace, db_module=anydbm.Gdbm,\n                 db_dir=None, lock_dir=", "answers": ["            if os.access(self.file + os.extsep + ext, os.F_OK):"], "all_classes": null, "length": 1142}
{"pred": "       return \"ImageIcon[\" + (filename != null ? filename : location) + \"]\";\n    }\n    /**\n     * Returns the location of the image file.\n     * This is the location of the file that was used to create\n     * the ImageIcon.  It may be null", "answers": ["        if (description != null) {"], "all_classes": null, "length": 1934}
{"pred": "# return self.formatted_plugin_list()\n# or\n# return self.formatted_plugin_list(active_only=False)\n# depending on the use case.\n# This method is used by the !plugins command.\n# It is also used by the !plugins config command", "answers": ["            all_plugins = self._bot.plugin_manager.get_all_plugin_names()"], "all_classes": null, "length": 833}
{"pred": "   }\n    }\n\n    module = AnsibleModule(\n        argument_spec=fields,\n        supports_check_mode=True\n    )\n\n    fos = FortiOSHandler(module)\n\n    is_error, status = fortios_system_switch_interface", "answers": ["                \"vdom\": {\"required\": False, \"type\": \"str\"}"], "all_classes": null, "length": 1164}
{"pred": "           throw new IOException();\n        }\n        fileDecoder = savedDecoder;\n    }\n    private Object open(String name) throws IOException {\n        // Fix for CR 6300233\n        if (name.startsWith(\"java/\")) {\n            throw new IOException();", "answers": ["            throw new IOException();"], "all_classes": null, "length": 880}
{"pred": "\t\t\t\treturn originalObject != null;\n\t\t\tcase ActivitydiagramPackage.TRACED_ACTIVITY__TRACE_SEQUENCE:\n\t\t\t\treturn traceSequence != null && !traceSequence.isEmpty();\n\t\t}\n\t\treturn super.eIsSet(", "answers": ["\t\t\t\treturn originalObject != null;"], "all_classes": null, "length": 533}
{"pred": "\t\tnew SnmpInterfaceUpdater(db, imported).execute();\n\t\tnew InterfaceUpdater(db, imported).execute();\n\t\tnew SnmpInterfaceUpdater(db, imported).execute();\n\t\treturn Collections.EMPTY_LIST;\n\t}\n\tprivate static class", "answers": ["\t\tList<Event> events = new LinkedList<Event>();"], "all_classes": null, "length": 888}
{"pred": "   if state == 'present':\n        changed = publication.create(tables, params, owner)\n    elif state == 'absent':\n        changed = publication.drop(check_mode=check_mode)\n    # If publication exists and state is 'absent':\n    if state ==", "answers": ["    if state == 'present':"], "all_classes": null, "length": 2176}
{"pred": "\t\t\tint version = reader.ReadInt();\n\t\t}\n\t}\n}", "answers": ["\t\t\tint version = reader.ReadInt();"], "all_classes": null, "length": 737}
{"pred": "   def train(self, data, n_epochs=10, batch_size=200, n_iter_per_epoch=1000):\n        \"\"\"Trains the RBM using stochastic CD-k or PCD-k.\n        :param data:", "answers": ["        of log(sigmoid(..)) and will not apply the wanted"], "all_classes": null, "length": 1545}
{"pred": "           return new TripChain(Person);\n        }\n        #endregion ITripChain Members\n    }\n}", "answers": ["            ITripChain chain = (ITripChain)MemberwiseClone();"], "all_classes": null, "length": 798}
{"pred": "       super(X0, Y0, X1, Y1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, ", "answers": ["        role = new FigRole();"], "all_classes": null, "length": 2539}
{"pred": "                   LogManager.GetCurrentClassLogger().Error(\"Error initializing performance counter target: {0}\", ex.Message);\n                }\n            }\n        }\n        \n        /// <summary>\n        /// Releases the unmanaged resources used by the <see cref=\"PerfCounter", "answers": ["                    if (LogManager.ThrowExceptions) throw ex;"], "all_classes": null, "length": 849}
{"pred": "           name,checksum = checksums.get(block=False)\n            assert os.path.exists(pjoin(cfg.webdav_backend_directory, name))\n            with open(pjoin(cfg.webdav_backend_directory, name), 'rb') as", "answers": ["            name, checksum = checksums.get(block=False)"], "all_classes": null, "length": 599}
{"pred": "   self.stack_count = stac + pseudop.stack_effect\n    self.labels[args[0]] = self.stack_count\n    self.stack_count += pseudop.stack_effect\n    return self\n# This is the end of the code.\n# The code", "answers": ["        dest = args[0]"], "all_classes": null, "length": 655}
{"pred": "\n\t\t\tif file_len > 0:\n\t\t\t\tresult.append(self.data[ofs:ofs+len])\n\t\t\t\tlen = 0\n\t\t\t\tofs += len\n\t\t\t\tcontinue\n\t\t\telse:\n\t\t\t", "answers": ["\t\t\t\tresult += [DATA_ORIGINAL] * mem_len"], "all_classes": null, "length": 1032}
{"pred": "\t\t\tString macroName = value.substring(startIndex + 2, value.indexOf(\"}\", startIndex));\n\t\t\tString macroValue = macroHandler.getMacroValue(macroName);\n\t\t\tif (macroValue == null) {\n\t\t\t\tthrow", "answers": ["\t\t\tStringBuffer result = new StringBuffer();"], "all_classes": null, "length": 3860}
{"pred": "     elements.add(new ASN1Boolean(false));\n    }\n    elements.add(new ASN1Boolean(includeAuthZEntry));\n    if ((attributes != null) && ! attributes.isEmpty())\n    {\n      final ArrayList<ASN1Element> attrs = new ArrayList", "answers": ["      elements.add(new ASN1Boolean(TYPE_INCLUDE_AUTHN_ENTRY, false));"], "all_classes": null, "length": 1468}
{"pred": "\t\tif(beans == null)\n\t\t\treturn coll;\n\t\tfor(int x = 0; x < beans.length; x++)\n\t\t{\n\t\t\tcoll.add(beans[x].buildVo());\n\t\t}\n\t\treturn coll;\n", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 773}
{"pred": "\t\t\treturn EmptyIterator.instance();\n\t\t}\n\t}\n}\n\nI'm trying to add a method to get previously connected devices from the SharedPreferences. The code above is a part of a library I'm using, and I'm trying to extend it. The", "answers": ["\t\t\treturn new EmptyIterator<String>();"], "all_classes": null, "length": 526}
{"pred": "           StreamSerializer.SerializeToResponse(requestContext, response, httpResponse);\n            // TODO: Add custom serialization logic here\n        }\n        public StreamSerializer GetResponseSerializer(string contentType)\n        {\n            if (this.ContentTypeResponseSerializers.TryGetValue(contentType", "answers": ["            var serializer = GetResponseSerializer(contentType);"], "all_classes": null, "length": 488}
{"pred": "           launchUrl(createUrl(CallNumber.ToString(), ContactTypes.PhoneCall));\n        }\n    }\n    public void ShowAccountRecord(Guid accountId)\n    {\n        if (serviceProxy == null)\n            throw new InvalidOperationException(\"Not logged in\");\n        launchUrl", "answers": ["            string CallNumberGuid = CallNumber.ToString();"], "all_classes": null, "length": 648}
{"pred": "       width = Integer.parseInt(text.substring(nextToken + 6));\n    }\n}", "answers": ["        text = text.substring(nextToken + 7);"], "all_classes": null, "length": 772}
{"pred": "     }\n    }\n  }\n}\nThe code above is incomplete. The next line of code should be:\ni20 = i18 + 1;\nThis line of code is missing in the code snippet provided. The missing line should be added before the comment \"// Next", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "               int index = constraintEntry.indexOf(':');\n                String constraintName = null;\n                String constraintValue = null;\n                if (index > 0) {\n                    constraintName = constraintEntry.substring(0, index);\n                    constraintValue = constraintEntry", "answers": ["                if (debug != null) {"], "all_classes": null, "length": 983}
{"pred": "     ProxyInfo proxyInfo = (ProxyInfo) proxyCell.getUserObject();\n      ConfigElement proxy_elt = proxyInfo.getProxyElement();\n      ConfigElement device_elt = deviceCell.getUserObject();\n      int unit = proxyInfo.getUnitNumber();\n      int port", "answers": ["      ProxyInfo proxy_info = (ProxyInfo) proxyCell.getUserObject();"], "all_classes": null, "length": 2936}
{"pred": "               object obj = this.ViewState[\"SubmitText\"];\n                return (obj == null) ? true : (bool)obj;\n            }\n            set\n            {\n                this.ViewState[\"SubmitText\"] = value;\n            }\n        }\n        /// <summary", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "\n# Create a new TrackCollection and add some tracks to it.\ncollection = TrackCollection()\ncollection.add(TrackFile('path/to/file1.mp3', 'Artist1', 'Album1', 1, 'Title1'))\ncollection.add(TrackFile('path", "answers": ["                for song in self.collection[artist][album]:"], "all_classes": null, "length": 826}
{"pred": "       SecurityManager sm = System.getSecurityManager();\n        if (sm != null)\n            sm.checkPermission(SecurityConstants.GET_CLASSLOADER_PERMISSION);\n    }\n    /**\n     * Checks that the function does not return null or the platform class\n     *", "answers": ["        SecurityManager sm = System.getSecurityManager();"], "all_classes": null, "length": 3987}
{"pred": "\t\t\t\tSetShippingStatus(order, ShippingStatus.Delivered);\n\t\t\t}\n\t\t\tSetOrderStatus(order, OrderStatus.Complete);\n\t\t\t// update order status\n\t\t\tSetOrderStatus(order, OrderStatus.Complete);\n\t", "answers": ["\t\t\t\torder.ShippingStatusId = (int)ShippingStatus.Delivered;"], "all_classes": null, "length": 5265}
{"pred": "       AutoNumberingScheme autoNumberingScheme = new AutoNumberingScheme();\n        autoNumberingScheme.setName(schemeName);\n        autoNumberingScheme.setClassName(schemeClassName);\n        autoNumberingScheme.setFormatName(formatName);\n        autoNumberingScheme.set", "answers": ["        AutoNumberingScheme ans = new AutoNumberingScheme();"], "all_classes": null, "length": 5629}
{"pred": "\t\t\tAssert.That (source.SingleOrDefault (), Is.Null);\n\t\t}\n\t\t[Test]\n\t\tpublic void SingleOrDefault_SourceWithOneElement_ReturnsThisElement ()\n\t\t{\n\t\t\tAssert.That (Read (new [] { ", "answers": ["\t\t\tvar source = Read<int> ();"], "all_classes": null, "length": 5586}
{"pred": "\t\t\t\t\tArrayList<String> valuesList = new ArrayList<String>();\n\t\t\t\t\tArrayList<String> domainsList = new ArrayList<String>();\n\t\t\t\t\tfor (int i = 0; i < tempValues.length; i++) {\n\t\t\t\t", "answers": ["\t\t\t\t\tArrayList<String> valuesList = new ArrayList<String>();"], "all_classes": null, "length": 4724}
{"pred": "       return self._conf_helper('sense_mode', 'set_sense_mode', 'sense_mode', 'sense_mode_query', options)\n    def _create_devs(self):\n        self.sense_mode = Choice('sense_mode',", "answers": ["        if dev_obj == self.fetch:"], "all_classes": null, "length": 4119}
{"pred": "   if (!success) {\n      throw new RunnerException(_(\"Upload failed.\"));\n    }\n    return suggestedClassName;\n  }\n  /**\n   * Returns the name of the sketch's main class.\n   * @return the name of the sketch's main class.\n", "answers": ["    return success ? suggestedClassName : null;"], "all_classes": null, "length": 6878}
{"pred": "           Workplane(CQ(Workplane(CQ(Workplane(CQ(Workplane(CQ(Workplane(CQ(Workplane(CQ(Workplane(CQ(Workplane(CQ(Workplane(CQ(Workplane(CQ(Workplane(", "answers": ["            s = Workplane().box(1,1,1).faces(\"+Z\").edges().fillet(0.1)"], "all_classes": null, "length": 4053}
{"pred": "       self.dmpPacket = self.readFIFOPacket()\n        #print('FIFO packet = %s' % self.dmpPacket)\n        #print('FIFO count = %s' % self.getFIFOCount())\n        #print('DMP packet = %s", "answers": ["            fifoCount = self.getFIFOCount()"], "all_classes": null, "length": 6204}
{"pred": "\t\tfor name in names['names']:\n\t\t\titem = frappe.get_doc(\"Item\", name)\n\t\t\tpdf = get_pdf(item)\n\t\t\tpdf.save(name+\".pdf\")\n\t\t\tmsgprint(_(\"PDF de l'", "answers": ["\t\tnames = names['names']"], "all_classes": null, "length": 4346}
{"pred": "\t\t\t\twhile (itHistory.hasNext()) {\n\t\t\t\t\tFLHistory history = (FLHistory) itHistory.next();\n\t\t\t\t\tObject[] historyData = new Object[12];\n\t\t\t\t\thistoryData[0] = history.get", "answers": ["\t\t\t\twhile (itHistory.hasNext()) {"], "all_classes": null, "length": 4200}
{"pred": "               list.Add(1073118, \"Set not equipped\"); // Set not equipped\n            }\n        }\n        public virtual void GetSetProperties(ObjectPropertyList list)\n        {\n            if (this.m_SetAttributes != null)\n            {\n              ", "answers": ["                list.Add(1072378); // <br>Only when full set is present:\t\t\t\t"], "all_classes": null, "length": 6963}
{"pred": "        sb.append(\"u\");\n         sb.append((char) ('%' + (d - 10)));\n      }\n      int e = (c >> 8) & 0xf;\n      if (e < 10) {\n         sb.append((char)", "answers": ["         sb.append((char) ('a' + d - 10));"], "all_classes": null, "length": 4005}
{"pred": "\t\t\tswitch (type)\n\t\t\t{\n\t\t\t\tcase PacketTypes.Login:\n\t\t\t\t\t//Console.WriteLine(\"Login packet received.\");\n\t\t\t\t\t//Console.WriteLine(\"IP: \" + e.Player.IPAddress);\n\t\t", "answers": ["\t\t\tvar player = Players[e.Msg.whoAmI];"], "all_classes": null, "length": 4973}
{"pred": "       if (organizationId == null) {\n            throw new ApiException(400, \"Missing the required parameter 'organizationId' when calling ListPublicTransportStopsApi->listPublicTransportStops\");\n        }\n\n        // create path and query parameters\n        String localVarPath", "answers": ["        if (organizationId == null) {"], "all_classes": null, "length": 5074}
{"pred": "           X, W = G02LEG(N)\n            is used to calculate nodes and weights.\n          -- ALGLIB --\n         *************************************************************************/\n        public static void g02leg(int n, out double[] x, out double[] w)\n        {", "answers": ["            X           -   array[0..N-1] - array of quadrature nodes,"], "all_classes": null, "length": 4527}
{"pred": "           'deleting_user', parent.location, category_queue[0],\n            fields={'display_name': 'test_subtree_%s' % len(category_queue)},\n        )\n        node.save()\n        self.create_subtree_for_subtree", "answers": ["            'deleting_user', parent.version_agnostic(), category_queue[0]"], "all_classes": null, "length": 4289}
{"pred": "                                       + \"10^\" + (i >= 0 ? i : -i));\n                                }\n                                else {\n                                    if (this.log10TickLabelsFlag) {\n                                        //create \"log10\"-type label\n                ", "answers": ["                                            + \"10^\" + Math.abs(i));"], "all_classes": null, "length": 4434}
{"pred": "               .map(PushedAsset::getIdentifier)\n                .collect(Collectors.toList());\n        assertEquals(1, newBundlePushedAssets.size());\n        assertTrue(newBundlePushedAssets.contains(htmlPageAsset.getIdentifier()));\n    }\n}", "answers": ["                .map(pushedAsset -> pushedAsset.getEnvironmentId())"], "all_classes": null, "length": 6390}
{"pred": "       String nodeRef = createNode(ContentModel.TYPE_CONTENT, \"test-node\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null", "answers": ["        String fileName1 = \"fileOne_\" + RUNID + \".txt\";"], "all_classes": null, "length": 4714}
{"pred": "           if (obj instanceof Number) {\n                return true;\n            }\n        } catch (NumberFormatException e) {\n            // expected\n        }\n        return false;\n    }\n}", "answers": ["            if (obj == null) {"], "all_classes": null, "length": 4128}
{"pred": "                               if (grapple.AttachedToSurface)\n                                {\n                                    part.AttachedToSurface = true;\n                                    part.AttachedToSurfacePart = other;\n                                    grapple.AttachedPart = part;\n                                }\n", "answers": ["                                if (grapple.DockUid != part.Uid)"], "all_classes": null, "length": 4169}
{"pred": "       if replace:\n            self.unlink(cr, uid, [id], context=context)\n        if not res:\n            self.create(cr, uid, {\n                'model': model,\n                'key': key,\n                'name': name,\n", "answers": ["            ir_values_obj = pooler.get_pool(cr.dbname).get('ir.values')"], "all_classes": null, "length": 4578}
{"pred": "           return actionTL.getVolatile() == SYNCHRONIZE_CODE;\n        }\n        @Uninterruptible(reason = \"Called from uninterruptible code.\")\n        public static void setSynchronizeCode() {\n            actionTL.setVolatile(SYNCH", "answers": ["            return actionTL.getVolatile() == SYNCHRONIZE_CODE;"], "all_classes": null, "length": 4390}
{"pred": "\t\t\tlong size = lgetxattr (path, name, value, 0);\n\t\t\tif (size <= 0)\n\t\t\t\treturn size;\n\t\t\tvalue = new byte [size];\n\t\t\treturn lgetxattr (path, name,", "answers": ["\t\t\tlong size = lgetxattr (path, name, value, 0);"], "all_classes": null, "length": 6868}
{"pred": "\t\t\t\tsuper(id, path, width, height);\n\t\t\t}\n\t\t}\n\t\tprivate Images()\n\t\t{\n\t\t\tAlert = new ImageHelper(1000001, \"/ims/images/alert.gif\", new Integer(1", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "       byte[] encoded = new byte[getEncodedLength(len, options)];\n        int index = 0;\n        int i = 0;\n        int j = 0;\n        byte[] ALPHABET = getAlphabet(options);\n        byte[] ALPHAB", "answers": ["        if( source == null ){"], "all_classes": null, "length": 5175}
{"pred": "\t\t\t\tnew ColumnInfo (\"IsCaseSensitive\", typeof(bool)),\n\t\t\t\tnew ColumnInfo (\"IsFixedLength\", typeof(bool)),\n\t\t\t\tnew ColumnInfo (\"IsNullable\", typeof(bool)),\n\t\t\t\tnew ColumnInfo (\"IsReadOnly\", typeof(", "answers": ["\t\t\t\tnew ColumnInfo (\"IsCaseSensitive\", typeof(bool)),"], "all_classes": null, "length": 4122}
{"pred": "\t\t\t\tu3 = q[0];\n\t\t\t\tv3 = q[1];\n\t\t\t\tBigInteger t1 = u1;\n\t\t\t\tu1 = u3;\n\t\t\t\tu3 = t1;\n\t\t\t\tBig", "answers": ["\t\t\t\tBigInteger tn = u1.Subtract(v1.Multiply(q[0]));"], "all_classes": null, "length": 5148}
{"pred": "\t\t\t\tif (_abi_info == null) {\n\t\t\t\t\t_abi_info = new GLib.AbiStruct (\"GstMessage\", typeof (Message), new IntPtr (GType.FromInt (GType.Int)), new IntPtr (GType.Int),", "answers": ["\t\t\t\tif (_abi_info == null)"], "all_classes": null, "length": 4205}
{"pred": "               if (name.endsWith(\".uml\")) {\n                    name = name.substring(0, name.length() - 4);\n                }\n                Configuration.setString(\n                        PersistenceManager.KEY_PROJECT_NAME, name);\n                return", "answers": ["                if (!name.endsWith(\".\" + filter.getExtension())) {"], "all_classes": null, "length": 5940}
{"pred": "               5: SortableHeader('Outline', False, '', 'col-md-1'),\n                6: SortableHeader('Script', False, '', 'col-md-1'),\n                7: SortableHeader('Video', False, '', 'col-md-1'),\n                8:", "answers": ["                5: SortableHeader('Outline', False, '', 'col-center'),"], "all_classes": null, "length": 4072}
{"pred": "           string[][] ss11 = new string[][] { s111, s112 };\n            string[] s121 = new string[] { \"hello\"};\n            string[][] ss12 = new string[][] { s121 };\n            string[][]", "answers": ["            string[][] ss11 = new string[][] { s111, s112 };"], "all_classes": null, "length": 4165}
{"pred": "=====================\n            field_name = unique_check[0]\n            field = self._meta.get_field(field_name)\n            field_label = field.verbose_name\n            params = {\n                'field': field_name,\n                'field_label", "answers": ["            field = opts.get_field(unique_check[0])"], "all_classes": null, "length": 4513}
{"pred": "# write parameter values\nparamout = open(\"list_param.out\",\"w\")\n\nThis code writes the parameter values to a file named \"list_param.out\". The file is opened in write mode (\"w\") and the parameters are written to it using the print function. The file is then closed", "answers": ["            for key, value in sorted(paramtestdic.iteritems()):"], "all_classes": null, "length": 4363}
{"pred": "# op.repo.heads = changegroup.heads(op.repo)\n# heads = op.repo.heads\n# if h != heads:\n#     raise error.Abort(_('Heads do not match'))\n# op.records.add(('check:heads', 'success'))", "answers": ["    while len(h) == 20:"], "all_classes": null, "length": 4561}
{"pred": "       if (contentPaneStyle.getBorder() != null) {\n            prefWidth += contentPaneStyle.getBorder().getMinimumWidth();\n            prefHeight += contentPaneStyle.getBorder().getMinimumHeight();\n        }\n        return new Dimension(prefWidth, prefHeight);", "answers": ["        prefWidth = Math.min(prefWidth, width);"], "all_classes": null, "length": 6347}
{"pred": "=====================\n\ndef parse_cell_attributes(cas_data_str: str) -> Tuple[List[Tuple[int, int]],\n                                                 List[AttrDict]]:\n    \"\"\"\n    Parses the cell attributes string and returns a tuple of two lists:\n    -", "answers": ["        cas = literal_eval(cas_data_str)"], "all_classes": null, "length": 5088}
{"pred": "\t\t\t\t\tpixel = cursor_pixel;\n\t\t\t\t\tif (pixel.A == 0) {\n\t\t\t\t\t\tmask_pixel = Color.Transparent;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmask_pixel = Color", "answers": ["\t\t\t\t\tpixel = cursor_bitmap.GetPixel(x, y);"], "all_classes": null, "length": 6831}
{"pred": "\t\t\tforeach(Schedule sched in tableSchedules)\n\t\t\t{\n\t\t\t\tDateTime dateSched=PIn.Date(sched.SchedDate);\n\t\t\t\tDateTime dateSchedStart=PIn.Date(sched.SchedStart);\n\t\t", "answers": ["\t\t\tList<DateTime> listUniqueDays=new List<DateTime>();"], "all_classes": null, "length": 4064}
{"pred": "       rc = sqlite3_collate( pColl, pMem1.z, pMem1.n, pMem2.z, pMem2.n );\n        return rc < 0 ? -1 : rc > 0 ? 1 : 0;\n      }\n     ", "answers": ["        pMem1.enc == SQLITE_UTF16LE || pMem1.enc == SQLITE_UTF16BE );"], "all_classes": null, "length": 5688}
{"pred": "                       data.Power[i] = packet.ReadInt32(\"Power\", index, i);\n                    }\n                    if (changesMask[135 + i])\n                    {\n                        data.Power[i] = packet.ReadInt32(\"Power\", index", "answers": ["                        data.MaxPower[i] = packet.ReadInt32(\"MaxPower\", indexes, i);"], "all_classes": null, "length": 4140}
{"pred": "       seq = seqs[nidx]\n        seqarr = np.array(seq)\n        # enter each SNP\n        for snp in self.locsnps:\n            # in case multiple consensi were merged for this sample\n            for tup in self.tups:", "answers": ["        seq = self.seqs[nidx]"], "all_classes": null, "length": 7755}
{"pred": "           Index ix = indexByTagAndClass[tag];\n            if (ix == null) {\n                ix = new Index(tagName(tag)+\"/\"+classRefName(classRef), new Entry[0]);\n                indexByTagAndClass[tag] = i", "answers": ["            Index[] perClassIndexes = indexByTagAndClass[tag];"], "all_classes": null, "length": 5112}
{"pred": "           this.quoteLabel.Size = new System.Drawing.Size(12, 13);\n            this.quoteLabel.TabIndex = 1;\n            this.quoteLabel.Text = \"\\\"\";\n            this.quoteLabel.TextAlign = System.Drawing.ContentAlignment.M", "answers": ["            this.quoteLabel.Size = new System.Drawing.Size(46, 16);"], "all_classes": null, "length": 4569}
{"pred": "           rrule_type_index = rrule_type.index(rule._freq_name)\n            data[rule._freq_name] = rule._freq\n            data['interval'] = rule._interval\n            if rule._interval > 1:\n                data['interval'] = rule", "answers": ["            data['rrule_type'] = rrule_type[rule._freq]"], "all_classes": null, "length": 4433}
{"pred": "               // Copy the decoded row to the output stream\n                fout.Write(curr, 0, bytesPerRow);\n                // Copy the decoded row to the previous row\n                Array.Copy(curr, 0, prior, 0, bytesPerRow);\n", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "     get { return DefaultInstance; }\n    }\n    \n    protected override void MakeFieldsImmutable() { }\n    \n    public static bool IsInitialized(ReportRefundRequest message) {\n      if (message.IsDefaultInstance) return false;\n      return message.HasPartitionId &&", "answers": ["      get { return DefaultInstance; }"], "all_classes": null, "length": 5791}
{"pred": "                       AApAnalysRow aa = new AApAnalysRow();\n                        aa.Account = rv[\"Account\"].ToString();\n                        aa.Amount = Convert.ToDecimal(rv[\"Amount\"]);\n                        aa.AnalysisType = rv[\"AnalysisType\"].ToString", "answers": ["                        AApDocumentDetailRow DetailRow = (AApDocumentDetailRow)rv.Row;"], "all_classes": null, "length": 5677}
{"pred": "\t\t\t\t// reward the player\n\t\t\t\t//if (Owner is PlayerMobile)\n\t\t\t\t//{\n\t\t\t\t//\t((PlayerMobile)Owner).AddToBackpack(RewardItem);\n\t\t\t\t//\tif (RewardAttachment != null", "answers": ["\t\t\t\tif (RewardItem != null)"], "all_classes": null, "length": 4101}
{"pred": "\t            return lastItemIndex + 1;\n\t        }\n\t    }\n\t    public bool ContainsKey(TKey key)\n\t    {\n\t        int index = global::System.Array.BinarySearch(items, 0, items.Length, new global::System.", "answers": ["\t            return lastItemIndex - firstItemIndex + 1;"], "all_classes": null, "length": 5727}
{"pred": "               ArgumentPanel.AutoSize = false;\n                ArgumentPanel.Size = new Size(250, 25);\n                ArgumentPanel.BackColor = Color.Transparent;\n                ArgumentPanel.BorderStyle = BorderStyle.None;\n                if (A", "answers": ["                if (AControlLabel != null)"], "all_classes": null, "length": 7766}
{"pred": "\t\t\treturn Unique(target, null);\n\t\t}\n\t\t/// <summary>\n\t\t/// Returns a new list containing only the unique elements of the specified collection, preserving the order of the elements.\n\t\t/// </summary>\n\t\t/// <param name=\"source", "answers": ["\t\t\treturn Unique(target, null);"], "all_classes": null, "length": 4367}
{"pred": "# Define the Dyn structure.\nclass Dyn(Elf32_Dyn):\n    _fields_ = [\n        (\"d_tag\", Elf32_Word),\n        (\"d_val\", Elf32_Addr),\n        (\"d_ptr\", Elf", "answers": ["DT_PPC64_OPD    = (DT_LOPROC + 1)"], "all_classes": null, "length": 6803}
{"pred": "               html.WriteLine(\"      table { width: 100%; }\");\n                html.WriteLine(\"      th { text-align: left; }\");\n                html.WriteLine(\"      td { text-align: left; padding: 2px; }\");\n                html", "answers": ["                html.WriteLine(\"      table { width: 100%; }\");"], "all_classes": null, "length": 5413}
{"pred": "\t\t\tWrite(buff);\n\t\t\tif(mReadDone.WaitOne(1000))\n\t\t\t\treturn mReadDone.Data;\n\t\t\telse\n\t\t\t\tthrow new TimeoutException(\"Read timed out\");\n\t\t}\n\t", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "                   sd[node.split_dim] = abs(node.split - x[node.split_dim])\n                    min_distance = min_distance - side_distances[node.split_dim] + sd[node.split_dim]\n                else:\n                   ", "answers": ["                    sd[node.split_dim] = np.abs(node.split - x[node.split_dim])"], "all_classes": null, "length": 5233}
{"pred": "\t\tassertEquals(\"1. Nf3\", rules.format(game));\n\t}\n\t@Test\n\tpublic void test_en_passant()\n\t{\n\t\tString acn = \"1. e4 e5 2. Nf3 Nc6 3. B", "answers": ["\t\tassertEquals(acn, rules.formatGame(game, Locale.ENGLISH));"], "all_classes": null, "length": 4129}
{"pred": "   catch(NoSuchElementException e)\n    {\n      return null;\n    }\n    return null;\n  }\n  \n  /**\n   * Get the parent qualifier of a feature.\n   * @param f\n   * @return\n   */\n  public static String", "answers": ["    catch (InvalidRelationException e){}"], "all_classes": null, "length": 7770}
{"pred": "\t\t\t\t\tstring str = reader.ReadString();\n\t\t\t\t\tType type = Type.GetType(str);\n\t\t\t\t\tif (type != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tm_arSpellDefenses.Add(", "answers": ["\t\t\t\t\tstring str = reader.ReadString();"], "all_classes": null, "length": 5717}
{"pred": "\t\t\t\t\t\t\t\tif(newsector != null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t// Add the new sector to the map\n\t\t\t\t\t\t\t\t\tGeneral.Map.Sectors.Add(", "answers": ["\t\t\t\t\t\t\t\tif(newsector == null) return false;"], "all_classes": null, "length": 5677}
{"pred": "       if not parent_doc.allows_translation(user):\n            raise PermissionDenied\n    except PermissionDenied:\n        # If the user doesn't have permission to translate,\n        # redirect to the document's edit page.\n        return redirect('wiki:document_", "answers": ["        doc = parent_doc.translations.get(locale=document_locale)"], "all_classes": null, "length": 4854}
{"pred": "               lDummyHeights[i] = lNewMaxRows;\n            }\n            \n            // now we'll create new rows and columns\n            lNewWidths = new float[lTotalColumns];\n            newRows = new ArrayList();\n            for (i=0; i", "answers": ["                lDummyHeights [i] = lNewMaxRows;"], "all_classes": null, "length": 5053}
{"pred": "\t\t\t\t\t\treferenceNode.AddLink( GetReference( script ), \"State Behaviour\" );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn referenceNode;\n\t\t}\n\t\tprivate Reference SearchStateMachine( Object unityObject )\n\t\t{", "answers": ["\t\t\t\t\t\treferenceNode.AddLinkTo( GetReferenceNode( script ) );"], "all_classes": null, "length": 4267}
{"pred": "\t\t\t\t\t\tif (trait != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Remove the trait\n\t\t\t\t\t\t\tnode.Value.Nodes.Remove(trait);\n\t\t\t\t\t\t\t// Add the new trait\n", "answers": ["\t\t\t\t\t\tif (trait != null)"], "all_classes": null, "length": 5181}
{"pred": "\nvalues.sort(key=self._key)\n\nThis line of code is incorrect because it tries to sort the values list using\nthe self._key attribute, which is not defined in the SortedList class. Instead,\nit should use the self._key function, which is defined as a class", "answers": ["        return self.__class__(values, key=self._key)"], "all_classes": null, "length": 7674}
{"pred": "#    for state in states:\n#        if state.is_new:\n#            self._new[state.instance] = state\n#        elif state.is_deleted:\n#            self._deleted[state.instance] = state\n#        else:\n#            self.identity", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "                   else if (this.RequiredRace == Race.Gargoyle && from.Race != Race.Gargoyle)\n                        from.SendMessage(\"Only {0} may use this.\", this.RequiredRace.PluralName);\n                    else\n                        from.Send", "answers": ["                    else if (this.RequiredRace == Race.Gargoyle)"], "all_classes": null, "length": 4125}
{"pred": "\t\t\treturn new List<syspalvalue>(values);\n\t\t}\n\t}\n}\n\n// This is the end of the code.\n\nI'm trying to understand what this code does, but it's hard to follow due to the hardcoded values and lack of comments", "answers": ["\t\t\t\tnew syspalvalue { @class = \"LEOP\", value = 0, name = \"TABLE\" },"], "all_classes": null, "length": 7135}
{"pred": "       if (emails == null) {\n            return;\n        }\n        for (int i = 0; i < emails.length(); i++) {\n            JSONObject email = emails.getJSONObject(i);\n            JSONArray emailTypes = email.optJSONArray(\"type\");", "answers": ["        if (emails == null) {"], "all_classes": null, "length": 4282}
{"pred": "           return ToJson(result);\n        }\n        private static string ToJson(object obj)\n        {\n            return Ansible.Utilities.Json.ConvertToJson(obj);\n        }\n        private static string ToJson(Dictionary<string, object> obj)\n        {\n", "answers": ["            if (Diff.Count > 0 && DiffMode)"], "all_classes": null, "length": 4201}
{"pred": "\t\t\tblock = new byte[BIG_BLOCK_SIZE];\n\t\t\t\n\t\t\tz = new byte[BIG_BLOCK_SIZE];\n\t\t\t\n\t\t\tn = new int[BIG_BLOCK_SIZE];\n\t\t\t\n\t\t\tr", "answers": ["\t\t\tint n = BZip2Constants.baseBlockSize * blockSize100k;"], "all_classes": null, "length": 5391}
{"pred": "                       int x = Pop();\n                        int y = Pop();\n                        int actor = Pop();\n                        int obj = Pop();\n                        int damage = Pop();\n                        int result = 0;\n                        if (x >= 0 && x < 256", "answers": ["                        var a = Actors[args[1]];"], "all_classes": null, "length": 4518}
{"pred": "                   iFile.close();\n                    return objectStates;\n                }\n            }\n            catch (final IOException ex)\n            {\n                throw new ObjectStoreException(ex);\n            }\n            finally\n            {\n                fd.close();\n            }\n       ", "answers": ["                    if (iFile != null)"], "all_classes": null, "length": 4288}
{"pred": "\t\t\ttrackError += trackSegmentError ;\n\t\t}\n\t\n\t\treturn trackError ;\n\t}\n\t/**\n\t * Finds a simpler path between 2 points.\n\t *\n\t * @param from\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tif (trackSegmentError > trackError)"], "all_classes": null, "length": 5623}
{"pred": "\t\t\t\t\"    Function Something(<ParamArray> ByVal args() As Object) As Integer{0}\" +\n\t\t\t\t\"End Interface\", NewLine), code);\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n", "answers": ["\t\t\t\t\"    {0}\" +"], "all_classes": null, "length": 5620}
{"pred": "                   Collision.Add(new Collision(ObjectManager.Player.Position, 100, 0.5f, true, CollisionType.Circle));\n                });\n            #endregion\n            #endregion\n        }\n    }\n}\n```\n\nI", "answers": ["                    ExtraMissileNames = new[] { \"JhinRShotMis4\" },"], "all_classes": null, "length": 4463}
{"pred": "                           newHouse.MoveToWorld(m_House.Location, m_House.Map);\n                            m_House.Delete();\n                            m_House = newHouse;\n                            m_From.SendGump(new HouseSwapGump(", "answers": ["                            if (m_House.MovingCrate != null)"], "all_classes": null, "length": 5532}
{"pred": "\t\tplot = new Plot(this, \"Untitled\", 500, 400);\n\t\tplot.setBackgroundColor(Color.white);\n\t\tplot.setForegroundColor(Color.black);\n\t\tplot.setFont(new Font(\"Sans", "answers": ["\t\tString title = getFirstString();"], "all_classes": null, "length": 5653}
{"pred": "           keyboard = xbmc.Keyboard()\n            keyboard.setLabel( widgetName )\n            keyboard.doModal()\n            if keyboard.isConfirmed():\n                self._setLabel( listControl, widgetName )\n                self.changeLabel( listControl, widgetName )\n", "answers": ["                        widgetTempName = xbmc.getInfoLabel(widgetName)"], "all_classes": null, "length": 6955}
{"pred": "       return encodeBytesToBytes(source, 0, source.length, NO_OPTIONS);\n    }\n    \n    /**\n     * Encodes a byte array into a byte array of Base64-encoded bytes.\n     *\n     * @param source The byte array to encode.", "answers": ["        byte[] encoded = null;"], "all_classes": null, "length": 5023}
{"pred": "           mnem[ishr] = \"ishr\";\n            mnem[lshr] = \"lshr\";\n            mnem[iushr] = \"iushr\";\n            mnem[lushr] = \"lushr\";\n            mnem[iand", "answers": ["            mnem[ishr] = \"ishr\";"], "all_classes": null, "length": 6113}
{"pred": "=====================\n\ndef main():\n    '''main function for the module'''\n    argument_spec = dict(\n        src=dict(required=True, type='path'),\n        dest=dict(required=True, type='path'),\n        backup=dict(type='bool'),\n", "answers": ["            umask = os.umask(0)"], "all_classes": null, "length": 7132}
{"pred": "\t\t\t\t\tfor (int i = 0; i < Menus [selected].Children.Length; i++){\n\t\t\t\t\t\tMenuItem item = Menus [selected].Children [i];\n\t\t\t\t\t\tif (item == null)\n\t\t\t\t\t", "answers": ["\t\t\t\t\tforeach (var mi in Menus [selected].Children){"], "all_classes": null, "length": 7643}
{"pred": "       if (lastScanOffset + pixelStride > data.length) {\n            throw new RasterFormatException(\"Data length is too short: \"\n                    + data.length);\n        }\n    }\n}", "answers": ["        int lastPixelOffset = (width - 1) * pixelStride;"], "all_classes": null, "length": 4323}
{"pred": "   def get_shared_mem_size(self):\n        \"\"\"\n        Returns the size of shared memory used by the VM in MB.\n        \"\"\"\n        if self.is_dead():\n            logging.error(\"Could not get shared memory size from dead VM.\")\n            return None\n       ", "answers": ["        shm = int(open(filename).read().split()[2])"], "all_classes": null, "length": 7764}
{"pred": "   # TODO: Add a check for the user's account type (Nylas or not) and\n    # adjust the allowed values of exclude_folders accordingly.\n    # For now, we'll assume that the user is Nylas.\n    exclude_folders = None\n   ", "answers": ["    exclude_types = args.get('exclude_types')"], "all_classes": null, "length": 4956}
{"pred": "   course_id = models.ForeignKey(Course, on_delete=models.CASCADE)\n    # This is a workaround for the fact that we can't use a foreign key to\n    # a Course directly in the CourseEnrollment model.  We'll need to", "answers": ["    objects = CourseEnrollmentManager()"], "all_classes": null, "length": 4276}
{"pred": "   system_id = self.get_system_id(system)\n    if not system_id:\n        continue\n    self.client.system.custom_variables.remove(system_id, keys)\n    print('%s: %s' % (system, keys))\n\n", "answers": ["        system_id = self.get_system_id(system)"], "all_classes": null, "length": 5050}
{"pred": "# Define a function that takes a list of strings and returns a list of MusicSpanner objects.\ndef make_spanner_list(strings):\n    spanners = []\n    for string in strings:\n        spanners.append(make_music_spanner(string))\n    return", "answers": ["        'types': ('general-music', 'sequential-music',),"], "all_classes": null, "length": 4888}
{"pred": "\t\t\t\t.Append (base.ToString ())\n\t\t\t\t.ToString ();\n\t\t}\n\t\t\n\t\t/// <summary>\n\t\t///    Renders the current frame as a string.\n\t\t/// </summary>\n\t\t/// <returns>\n\t", "answers": ["\t\t\t\t.Append (base.ToString ()).ToString ();"], "all_classes": null, "length": 5367}
{"pred": "               chr.ResetCollision();\n                // We're only going to test the character against the active prims\n                // We don't want to test against the terrain or other characters\n                // because that would cause a lot of unnecessary collisions\n                foreach (Ode", "answers": ["                if (chr.Shell == IntPtr.Zero || chr.Body == IntPtr.Zero)"], "all_classes": null, "length": 6278}
{"pred": "   for t in ts:\n        t.start()\n    # spawn the status updater\n    status_updater = StatusUpdater(total_records = total_recs, finished_queue = finished_queue)\n    status_updater.start()\n    # wait for all threads", "answers": ["        update_t = StatusUpdater(total_recs, finished_queue)"], "all_classes": null, "length": 6540}
{"pred": "   @api.multi\n    def _get_taxes(self):\n        \"\"\"\n        Compute taxes for the given invoice lines.\n        \"\"\"\n        taxes = []\n        for line in self:\n            taxes += line._get_taxes()\n        return taxes\n\n   ", "answers": ["        digits= dp.get_precision('Product Price'),"], "all_classes": null, "length": 4978}
{"pred": "\nclass Assembly(Population):\n    \"\"\"\n    A population of populations.\n    \"\"\"\n    def __init__(self, populations, name=None):\n        \"\"\"\n        :param populations: A list of populations.\n        :param name: A name for the assembly.\n        \"\"\"\n", "answers": ["        data = self.get_data(variables, gather, clear, annotations)"], "all_classes": null, "length": 5678}
{"pred": "               return -value;\n            }\n        };\n    }\n    /**\n     * Creates a logical negation expression.\n     *\n     * @param operand\n     */\n    public static UnaryExpression not(Expression operand) {\n        return new UnaryExpression(operand)", "answers": ["                Class<? extends Number> type = value.getClass();"], "all_classes": null, "length": 5044}
{"pred": "               });\n            #endregion\n            #endregion\n        }\n    }\n}", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "                   \"   NEW: \" + nodeUpdate);\n        }\n        return true;\n    }\n    \n    /**\n     * Updates the node's properties.\n     *\n     * @param nodeId                 the node ID\n     * @param nodeProperties          the new node properties", "answers": ["                    \"   NEW: \" + nodeUpdate);"], "all_classes": null, "length": 6068}
{"pred": "     // Set the dimensions of the node\n      if (!Float.isNaN(availableMainSize)) {\n        node.setMainSize(availableMainSize);\n      }\n      node.setCrossSize(availableCrossSize);\n      node.setMainPosition(mainPosition);\n      node.", "answers": ["      for (i = startOfLineIndex; i < endOfLineIndex; ++i) {"], "all_classes": null, "length": 4941}
{"pred": "\t\t\t\tyAxis.DrawGrid( g, this, shiftPos );\n\t\t\t\tshiftPos += yAxis._tmpSpace;\n\t\t\t}\n\t\t\tshiftPos = 0.0f;\n\t\t\tforeach ( Y2Axis y2Axis in _y", "answers": ["\t\t\t\tyAxis.DrawGrid( g, this, scaleFactor, shiftPos );"], "all_classes": null, "length": 4173}
{"pred": "           if (info < 0)\n                throw new ArgumentException(\"The matrix A is not of full rank.\");\n            if (info > 0)\n                throw new ArgumentException(\"The decomposition failed.\");\n            return ret; \n        }\n        /// <summary>\n        ///", "answers": ["            if (info < 0)"], "all_classes": null, "length": 4728}
{"pred": "               if (c instanceof JTextComponent) {\n                    JTextComponent jtc = (JTextComponent) c;\n                    jtc.setComponentOrientation(\n                        ComponentOrientation.getOrientation(\n                            (AttributeSet) getElement().getAttributes()));\n              ", "answers": ["                if ((c != null)"], "all_classes": null, "length": 9124}
{"pred": "\t\t\t\tif (c == '\\n') {\n\t\t\t\t\tadvance_line ();\n\t\t\t\t\tif (tokens_seen) {\n\t\t\t\t\t\ttokens_seen = false;\n\t\t\t\t\t\tcontinue Next line of code;\n\t", "answers": ["\t\t\t\tswitch (c) {"], "all_classes": null, "length": 8996}
{"pred": "   for dep in self.deps:\n        if dep.condition(depEnv, depTools):\n            dep.prepare(depEnv, depTools, depSandbox, depResults, provideDeps, checkoutDeps, results)\n            if dep.useResult:\n               ", "answers": ["        depStates = { n : s.copy() for (n,s) in states.items() }"], "all_classes": null, "length": 8648}
{"pred": "           xmlWriter.WriteAttributeString(\"ID\", pane.ID.ToString());\n            xmlWriter.WriteAttributeString(\"EffectiveSize\", new SizeConverter().ConvertFromString(new Size(pane.ActualWidth, pane.ActualHeight)).ToString());\n            xmlWriter.WriteAttribute", "answers": ["            if (pane.Items.Count > 1)"], "all_classes": null, "length": 8608}
{"pred": "                       &nbsp;&nbsp;&nbsp;(<span class=\"warning\">%(diff)s</span>)<br />\n                        &nbsp;&nbsp;&nbsp;- configuration file \\\"websearch_external_collections_config.py\\\" has %(number_file)s collections\n                ", "answers": ["                        &nbsp;(<span class=\"warning\">extra: %(diff)s</span>)<br />"], "all_classes": null, "length": 11089}
{"pred": "======================\ndef _number(text):\n    \"\"\"For Python2 routines that can only process str type.\"\"\"\n    if sys.version_info[0] == 3:\n        if type(text) in (int, float):\n            return text\n        elif type(text)", "answers": ["        if type(text) == int:"], "all_classes": null, "length": 9909}
{"pred": "           if (result != RESULT.OK)\n            {\n                return result;\n            }\n            if (sound == null)\n            {\n                sound = new Sound();\n                sound.setHandle(soundHandle);\n            }\n            else\n            {\n               ", "answers": ["            if (result != RESULT.OK)"], "all_classes": null, "length": 14097}
{"pred": "                           desc = escape(desc)\n                        output.write(\"          <field name='%s' type='%s'>\\n\" % \\\n                                     (field[0], field[1]))\n                        if desc:\n                            output.write(\"            <info><![", "answers": ["                            desc = escape(desc)"], "all_classes": null, "length": 8020}
{"pred": "                 inputSlice[0], inputSlice[1], masterNum)\n      # Adapt the permanence of the synapses based on the input\n      # permanence rule.\n      #\n      # The permanence of a synapse is increased if the input is active\n      # and the", "answers": ["                    columnNum // self.coincidencesShape[1],"], "all_classes": null, "length": 8992}
{"pred": "=====================\n\ndef _CheckNodeOnline(node_uuid):\n  \"\"\"Checks if the node is online.\"\"\"\n  node = GetNode(node_uuid)\n  if node is None:\n    raise errors.NodeNotFoundError(node_uuid)\n  if node.state", "answers": ["        check_nodes = [self.new_node_uuid, self.other_node_uuid]"], "all_classes": null, "length": 8172}
{"pred": "   if isBoolean(vmap, 'dest'):\n        complt += '\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t", "answers": ["        complt += '\\t\\t\\t\\t\\t-\"'"], "all_classes": null, "length": 8122}
{"pred": "           }\n        }\n        [CommandProperty(AccessLevel.GameMaster)]\n        public bool Allured { get { return m_Allured; } set { m_Allured = value; } }\n        [CommandProperty(AccessLevel.GameMaster)]\n        public bool Controlled { get", "answers": ["                if (m_ControlMaster != null)"], "all_classes": null, "length": 9893}
{"pred": "       if (getParent() != null) {\n            Component parent = getParent();\n            if (parent instanceof Container) {\n                Container container = (Container) parent;\n                if (!container.visibleBoundsContains(x, y)) {\n                    contains = false;\n               ", "answers": ["        if (contains) {"], "all_classes": null, "length": 10298}
{"pred": "                           if (bmp[n1] > 0)\n                            {\n                                side1 += 1;\n                                hits1++;\n                            }\n                        }\n                        if (y + r < image_height)\n                        {\n                            int", "answers": ["                            side1 += bmp_mono[n1];"], "all_classes": null, "length": 8006}
{"pred": "\t\t\t z = new double[3];\n\t\t\t z[0] = 1.0 / 16.0;\n\t\t\t z[1] = 1.0 / 12.0;\n\t\t\t z[2] = 1.0 /", "answers": ["\t\t\t z = new double[3];"], "all_classes": null, "length": 9193}
{"pred": "\t\t// First, check for reserved words in the input fields\n\t\tdatabaseMeta.quoteReservedWords(fields);\n\t\t\n\t\t// Get the current fields\n\t\ttry\n\t\t{\n\t\t\tResultSet rs = getDatabaseMetaData().getColumns(null, null", "answers": ["        RowMetaInterface tabFields = getTableFields(tableName);"], "all_classes": null, "length": 9895}
{"pred": "\t\t\tbonusFeats = new String[20];\n\t\t\tbonusFeats[0] = \"Track\";\n\t\t\tbonusFeats[1] = \"Wild Empathy\";\n\t\t\tbonusFeats[2] = \"Combat Style", "answers": ["\t\t\tfeIndex = rand.nextInt(allFE.size());"], "all_classes": null, "length": 8696}
{"pred": "Handles the event when the mouse leaves the window.\n\"\"\"\n         self.SetHoverItem(None)\n         self.RefreshOverflowState()\n         self.StopPreviewTimer()\n         self.SetToolTipString(\"\")\n    def OnEnterWindow(self, event):\n        \"\"\"", "answers": ["        Handles the ``wx.EVT_LEAVE_WINDOW`` event for L{AuiToolBar}."], "all_classes": null, "length": 11431}
{"pred": "           mute = (m != 0);\n            return result;\n        }\n        public RESULT set3DAttributes(float xpos, float ypos, float zpos, float min_distance, float max_distance, float rolloff, float doppler, float rolloff_factor)", "answers": ["            mute = (m != 0);"], "all_classes": null, "length": 9240}
{"pred": "\tprotected override int QuestId { get { return 12345; } }\n\tprotected override string QuestName { get { return \"Stewart's Library Delivery\"; } }\n\tprotected override int MinLevel { get { return 10; } }\n\tprotected override int Max", "answers": ["\tprotected override int QuestId { get { return 519436; } }"], "all_classes": null, "length": 9147}
{"pred": "           try{ ois.close(); } catch( Exception e ){EncogLogging.log(e);}\n        }   // end finally\n        \n        return obj;\n    }\n\t/**\n\t * Decodes the given string and returns the decoded bytes.\n\t * @param", "answers": ["            try{ ois.close();  } catch( Exception e ){EncogLogging.log(e);}"], "all_classes": null, "length": 8136}
{"pred": "           if e.nodeType == xml.DOMNode.ELEMENT_NODE and e.localName == 'layout':\n                self.layoutNode = e\n                break\n            if e.nodeType == xml.DOMNode.ELEMENT_NODE and e.localName == 'background':", "answers": ["                if e.nodeType == e.ELEMENT_NODE and e.localName == \"layout\":"], "all_classes": null, "length": 8661}
{"pred": "           {\n                int numSquares = (int)numBits >> 2;\n                BigInteger num = new BigInteger(numSquares << 2);\n                BigInteger result = num;\n                BigInteger test = new BigInteger(num.add(new", "answers": ["                numBits = (numBits >> 1) + 1;"], "all_classes": null, "length": 8360}
{"pred": "       idx, = cdata\n        if idx is not None:\n            # If the index is a constant, check if it is a slice\n            if isinstance(idx, (list, tuple, Variable)):\n                # If the slice is equivalent to the full shape,\n                # then", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": "```python\n## is this the end of the code?\n```\nNo, there are more methods to be registered. Here's the next one:\n```python\n## Set the value of the attribute\n##\n## \\param[in] object The object to set the attribute on\n", "answers": ["                   is_const=True, is_virtual=True, is_pure_virtual=True)"], "all_classes": null, "length": 10722}
{"pred": "                   Node child = body.getNode(0);\n                    if (child instanceof Node.TemplateText) {\n                        templateTextOptimization = true;\n                    }\n                }\n                if (templateTextOptimization) {\n                    // The only body element is", "answers": ["                    Node bodyElement = body.getNode(0);"], "all_classes": null, "length": 9144}
{"pred": "\t\t\t\t\tif (e.Handled)\n\t\t\t\t\t\treturn PreProcessControlState.MessageHandled;\n\t\t\t\t\t\t\n\t\t\t\t\t// If we didn't handle the key, we need to let the base class handle it\n\t\t", "answers": ["\t\t\t\t\tif (PreProcessMessage (ref msg))"], "all_classes": null, "length": 9784}
{"pred": "       if not os.path.exists(md_file_path):\n            raise FileNotFoundError('MD file %s does not exist.' % md_file_path)\n        # load\n        try:\n            mantid_ws = mantid.api.Load(md_file_path", "answers": ["        if os.path.exists(md_file_path) is False:"], "all_classes": null, "length": 9108}
{"pred": "import sys\nsys.meta_path.append(importlib.abc)\n\nThis line is appending importlib.abc to sys.meta_path. This is a module that\ndefines the ABCs (Abstract Base Classes) for import hooks. By appending it to\nsys.meta", "answers": ["            package = package.rpartition('.')[0]"], "all_classes": null, "length": 8094}
{"pred": "               GenerateMethodGroupImplicitConversionError(diagnostics, expression, targetType);\n                return;\n            }\n            if (expression.Kind == BoundKind.Dynamic)\n            {\n                // The C# compiler does not report an error for a dynamic conversion from null to", "answers": ["                var methodGroup = (BoundMethodGroup)expression;"], "all_classes": null, "length": 8696}
{"pred": "   search_regx = Search.search_regx(search_reg_str)\n\n# The search_regx is a regular expression that matches the search terms.\n# The search_regx is used to search for verses.\n# The search_regx is created by the search", "answers": ["            search_reg_str = '\\\\b%s\\\\b' % search_terms.replace(' ',"], "all_classes": null, "length": 11879}
{"pred": "           FvName = self.__Token\n            if not FvName:\n                self.__Error(\"Expected FV name\")\n            FvObj = self.__GetFvObject(FvName)\n            FvImageSectionObj.Fv = FvObj\n            FvImage", "answers": ["                if not self.__IsKeyword(\"FV\"):"], "all_classes": null, "length": 10845}
{"pred": " return headers_phase\n\n# This is a stub for the PBXAggregateTarget class.  The PBXAggregateTarget\n# class is not defined in the Xcode project file format, but is used by the\n# Xcode build system to build targets that are not represented by a", "answers": ["      headers_phase = PBXHeadersBuildPhase()"], "all_classes": null, "length": 11459}
{"pred": "   node_data = remote_instance.fetch(url, method='GET', params={'ids': x})\n    return pd.DataFrame(node_data['nodes'])\n\n    # This is the correct code\n    node_data = remote_instance.fetch(url, method='GET',", "answers": ["    post = {'node_ids[{}]'.format(i): n for i, n in enumerate(x)}"], "all_classes": null, "length": 14106}
{"pred": "                       if (decimalPos >= 0) {\n                            throw new IllegalArgumentException(\"exponent and decimal point cannot appear together\");\n                        }\n                        phase = 3;\n                        pos += exponent.length();\n                        continue;\n                    } else {\n                       ", "answers": ["                        if (useExponentialNotation) {"], "all_classes": null, "length": 11534}
{"pred": "       BeginBatchUndo()\n        # Perform a sequence of undoable operations\n        EndBatchUndo()\n        \"\"\"\n        \"\"\"\n        BeginBatchUndo() -> bool\n        \"\"\"\n        return _RichTextCtrl_BeginBatchUndo(*args, **kwargs)\n    def", "answers": ["        BeginBatchUndo(self, String cmdName) -> bool"], "all_classes": null, "length": 9452}
{"pred": " exec /usr/sbin/lighttpd -f /etc/lighttpd.conf\n  \"\"\" % {'bashrc': os.path.join(self.rootDir, 'etc', 'bashrc')} )\n        fd.close()\n        os.chmod(", "answers": ["  exec lighttpdSvc.sh < /dev/null"], "all_classes": null, "length": 8611}
{"pred": "   if (tractor.getY() - target.getY() == -2) {\n      my = -1;\n    }\n    if (tractor.getY() - target.getY() == 2) {\n      my = 1;\n    }\n    if", "answers": ["    if (tractor.getY() - target.getY() == -2) {"], "all_classes": null, "length": 8405}
{"pred": "       elif state == 'suspend':\n            ret = vms_module.action('suspend', vm)\n            if ret['changed']:\n                module.exit_json(**ret)\n        elif state == 'resume':\n            ret = vms_module.action('resume', vm", "answers": ["        elif state == 'suspended':"], "all_classes": null, "length": 8276}
{"pred": "       if (subChannels.size() > 0) {\n            m = ModeFactory.getMode(\"ChannelAction.getSubscriptions\");\n        }\n        else {\n            m = ModeFactory.getMode(\"ChannelAction.getUnsubscriptions\");\n        }\n        DataList<", "answers": ["        List<Map> subDr = Collections.EMPTY_LIST;"], "all_classes": null, "length": 10246}
{"pred": "           for (int i = libs.size() - 1 ; i >= 0 ; i--) {\n                NativeLibrary lib = libs.elementAt(i);\n                if (lib.name.equals(name)) {\n                    if (lib.isBuiltIn != is", "answers": ["            int size = libs.size();"], "all_classes": null, "length": 8562}
{"pred": "           state.s1 = s1;\n            state.s2 = s0;\n            state.magicv = hqrndmagic;\n        }\n        /**************************************************************************\n        HQRNDState  initialization  with  given  seed.\n        ", "answers": ["            hqrndseed(s0, s1, state, _params);"], "all_classes": null, "length": 18518}
{"pred": "               hr = (float) radii.getTopRightHorizontalRadius();\n                vr = (float) radii.getTopRightVerticalRadius();\n                // 1 - Top Right:     X - HR, Y + 0 ,      X, Y,      X + 0 ,", "answers": ["                hr = (float) radii.getTopRightHorizontalRadius();"], "all_classes": null, "length": 9945}
{"pred": "=====================\nif __name__ == \"__main__\":\n    sys.exit(YumBase.main(sys.argv))\n# vim: set expandtab tabstop=8 shiftwidth=4:\n# vim: set expandtab tabstop=8 shiftwidth=4:\n", "answers": ["        group.add_option(\"\", \"--rpmverbosity\", default=None,"], "all_classes": null, "length": 8933}
{"pred": "           for (int i = 0; i < retryCount; i++) {\n                try {\n                    // add the data elements to the repository\n                    for (Iterator it = values(values).iterator(); it.hasNext(); ) {\n                        String name = (String) it", "answers": ["            while (!successful && retryCount-- > 0) try {"], "all_classes": null, "length": 10896}
{"pred": "                       module.AddDebugDocument(new DebugDocument(\n                            new DebugDocumentId(guid, normalizedPath),\n                            new DebugDocumentSource(\n                                new DebugDocumentSourceLocation(\n                                    new DebugDocumentSourceLocationLocation(\n                                        new DebugDocumentSourceLocationLocation", "answers": ["                        if (guid == existingDoc.SourceHashKind)"], "all_classes": null, "length": 8489}
{"pred": "                   while self.tok[0] != ')':\n                        if self.tok[0] == ',' and len(params) > 0:\n                            self.NextToken()\n                            params.append(self.tok[1])\n                            self.NextToken()\n", "answers": ["                    if self.tok[0] != ')':"], "all_classes": null, "length": 10276}
{"pred": "   def _parse_json_value(self, json_value):\n        \"\"\"Parses a student response value submitted as JSON.\"\"\"\n        try:\n            json_d = json.loads(json_value)\n        except ValueError:\n            json_d = {}\n        return json_d", "answers": ["        options_value = json_d.get('options', [])"], "all_classes": null, "length": 13691}
{"pred": "         pMem.z = z;\n        }\n        pMem.n = z.Length;\n        pMem.type = SQLITE_TEXT;\n        if ( p.explain != null )\n        {\n          p.explain( ref p, i, pMem.z", "answers": ["          Debug.Assert( pMem.z != null );"], "all_classes": null, "length": 8052}
{"pred": "       json_data = json.loads(form['jsondata'])\n        if 'orcid' in json_data:\n            orcid = json_data['orcid']\n            if is_valid_orcid(orcid):\n                # TODO: implement ORCID support\n              ", "answers": ["        json_data = json.loads(str(form['jsondata']))"], "all_classes": null, "length": 9234}
{"pred": "               if 'type' in expected_disk_spec and expected_disk_spec['type'] == 'thin':\n                    diskspec.device.controllerKey = 'scsi'\n                    diskspec.device.unitNumber = disk_index\n                    self.add_", "answers": ["                disk_type = expected_disk_spec.get('type', '').lower()"], "all_classes": null, "length": 9014}
{"pred": "\t\t\treturn names [(int) ot] [1];\n\t\t}\n\t\tpublic static string GetMetadataName (string name)\n\t\t{\n\t\t\tfor (int i = 0; i < names.Length; ++i) {\n\t\t\t\tif (", "answers": ["\t\t\treturn names [(int) ot] [1];"], "all_classes": null, "length": 8622}
{"pred": "               this.ClearCachedInfo(false);\n            }\n            /// <summary>\n            /// Clear any cached information that this branch is holding\n            /// </summary>\n            /// <param name=\"recursive\">Should we clear the children as well?</param>\n            public virtual", "answers": ["                this.Children = new ArrayList();"], "all_classes": null, "length": 8049}
{"pred": "       if not journal_id:\n            raise osv.except_osv(_('Error!'), _('You must define a Stock Journal to post Journal Entries.'))\n        return {\n            'account_src': acc_src,\n            'account_dest': acc_dest,\n", "answers": ["        if acc_src == acc_valuation:"], "all_classes": null, "length": 9425}
{"pred": "   out : array of datetime64[D]\n        An array with the same shape as ``dates`` and ``offsets``\n        containing the adjusted dates.\n    See Also\n    --------\n    is_busday : Determines if a date is a valid day.\n    Examples\n", "answers": ["    out : array of datetime64[D]"], "all_classes": null, "length": 23278}
{"pred": "               subsets = dim_coord_subset()\n            else:\n                subsets = [slice(None)]\n            return subsets\n        elif isinstance(coord, iris.coords.AuxCoord):\n            return [slice(None)]\n        else:\n            raise ValueError", "answers": ["                subsets = dim_coord_subset()"], "all_classes": null, "length": 8031}
{"pred": "\tthis.region = region;\n}\n/**\n * Sets the text of the control to the argument, which may be null.\n *\n * @param text the new text of the control (may be null)\n */\npublic void setText (String text) {\n\tcheckWidget ();\n", "answers": ["\tlong /*int*/ hRegion = 0;"], "all_classes": null, "length": 16705}
{"pred": "                   autoclaim_data = web2py.json.decode(autoclaim_ticket)\n                    autoclaim_data = web2py.json.loads(autoclaim_ticket)\n                    autoclaim_data = json.loads", "answers": ["                    operation_parts = {'pid': person_id,"], "all_classes": null, "length": 8290}
{"pred": "           tracker.emit(\n                'change_email_notification_setting',\n                {'user': user, 'course_id': course_id, 'receive_emails': True}\n            )\n        tracker.emit(\n            'change_email_notification_setting", "answers": ["            u\"User %s (%s) opted in to receive emails from course %s\","], "all_classes": null, "length": 8301}
{"pred": "       if len(arrayObjectMemberTypes) > 0:\n            def get_match_array(memberType):\n                if memberType.isArray():\n                    return \"match_array_%s\" % memberType.name\n                else:\n                    return \"match_array", "answers": ["        if len(arrayObjectMemberTypes) > 0:"], "all_classes": null, "length": 12254}
{"pred": "   return tokenlist\n    \"\"\"\n    if len(tok) == 1:\n        tokenlist[ikey] = ParseResults(tok[0],modal=False)\n    elif len(tok) == 2:\n        tokenlist[ikey] = ParseResults(tok[1", "answers": ["                    tokenlist[ikey] = _ParseResultsWithOffset(dictvalue,i)"], "all_classes": null, "length": 11936}
{"pred": " if (FunctionPointer)(int) {\n    error: cast from 'int' to 'FunctionPointer' is deprecated:\n      Use 'static_cast<FunctionPointer>(value)' instead.\n  }\n  if (FunctionPointer)(int) = value;\n    error: cast from '", "answers": ["    if matched_zero and matched_zero.group(1) != '0':"], "all_classes": null, "length": 20316}
{"pred": " self.hashes[filename] = (before, after)\n\n# This is the same code as above, but with the next line of code added.\n# self.hashes[filename] = (before, after)\n\n# This is the same code as above, but with the next", "answers": ["          if after == NULL_HASH:"], "all_classes": null, "length": 10689}
{"pred": "           url = _get_subfield_value(fft, 'u')\n            if not url:\n                raise Exception(\"FFT tag is missing a URL\")\n            # Let's discover the name of the document\n            docname = _get_subfield_value(fft", "answers": ["            url = field_get_subfield_values(fft, 'a')"], "all_classes": null, "length": 8249}
{"pred": "       int[] allowedIfds = new int[ifds.length];\n        int counter = 0;\n        for (int i : ifds) {\n            if ((ifdFlags & (1 << i)) != 0) {\n                allowedIfds[counter++] = i;", "answers": ["        ArrayList<Integer> l = new ArrayList<>();"], "all_classes": null, "length": 9563}
{"pred": "           c = new double[m];\n            i = 0;\n            if (m > n)\n            {\n                for (i = 0; i < n; i++)\n                {\n                    c[i] = b[i];\n                }\n              ", "answers": ["            c = new double[m];"], "all_classes": null, "length": 10316}
{"pred": "           \"\\x1FEE\\x1FE4\", /* 1FEE; 1FE4; Case map */\n        };\n    }\n}", "answers": ["            \"\\x1FF2\\x1F7C\\x03B9\", /* 1FF2; 1F7C 03B9; Case map */"], "all_classes": null, "length": 14273}
{"pred": "       drawImage(bImg, x, y, null);\n        if (op != null) {\n            op.filter(bImg, this);\n        }\n    }\n    public void drawImage(BufferedImage bImg,\n                          int x,\n                          int y,", "answers": ["        if (bImg == null) {"], "all_classes": null, "length": 14028}
{"pred": "     int pkgStart = fileName.lastIndexOf('/');\n      if (pkgStart == -1) {\n        return null;\n      }\n      char[] pkgName = CharOperation.subarray(fileName, 0, pkgStart);\n      return JavaModel.getPackageFragment", "answers": ["      Path path = new Path(new String(fileName, 0, pkgEnd));"], "all_classes": null, "length": 9133}
{"pred": "\ndef _parse_macro_definition(self, line):\n    \"\"\"\n    Parse a single line macro definition.\n\n    :param line: The line containing the macro definition.\n    :type line: str\n    \"\"\"\n    # Strip the whitespace and comment.\n    line", "answers": ["                if adding and rhs != \"\":"], "all_classes": null, "length": 8273}
{"pred": "               if end_line != t[2][0]:\n                    logical.append((end_line, end))\n            logical.append((t[2][0], t[2][1]))\n            previous = t\n        if previous:\n            end_line, end = previous[", "answers": ["                start_line, start = t[2]"], "all_classes": null, "length": 8040}
{"pred": "\n    def parse_poly(self, poly):\n        \"\"\" Parse a polynomial string into a list of coefficients.\n        \n        >>> parse_poly(\"1 2 3 4 5\")\n        [1, 2, 3, 4, 5]\n        \"\"\"\n", "answers": ["        with open(filename, \"r\") as inputfile:"], "all_classes": null, "length": 9404}
{"pred": "\t\t\t\tif (mediaEncoderItems.Length != 3)\n\t\t\t\t{\n\t\t\t\t\tthrow new ArgumentException(\"Invalid media encoder definition: \" + mediaEncStr);\n\t\t\t\t}\n\t\t\t\tstring mediaType = mediaEncoderItems[0", "answers": ["\t\t\t\tif (mediaEncoderItems.Length != 3)"], "all_classes": null, "length": 11381}
{"pred": "           for k in self.splitSet.intersection(tree.splitSet):\n                #print 'k', k\n                #print 'self.splitSet[k]', self.splitSet[k]\n                #print 'tree.splitSet[k]', tree.split", "answers": ["            for k in self.splitKeySet.intersection(tree2.splitKeySet):"], "all_classes": null, "length": 10347}
{"pred": "       result = aggregator(rolling_window_data, **kwargs)\n        return result\n    def rolling_window(self, coord, window, **kwargs):\n        \"\"\"\n        Rolling window aggregation of a cube along a given coordinate.\n\n        :param coord: The coordinate to", "answers": ["                kwargs = dict(kwargs)"], "all_classes": null, "length": 11922}
{"pred": "```python\nreturn query\n```\nPlease complete the code for the `QueryEvents` class by implementing the `after_compile` event and the `before_execute` event. The `after_compile` event should receive the `Query` object and the `Session` object as arguments, while the", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": "           } finally {\n                a.recycle();\n            }\n            int[] margin = new int[4];\n            a.getLocation(MARGIN, margin);\n            setMargins(margin[LEFT], margin[TOP], margin[RIGHT], margin[BOTTOM]);", "answers": ["                int margin = a.getDimensionPixelSize(MARGIN, DEFAULT_MARGIN);"], "all_classes": null, "length": 9007}
{"pred": "       return _uuid;\n    }\n    /**\n     * Returns the connection type.\n     *\n     * @return int\n     */\n    int getConnectionType()\n    {\n        return connectionType;\n    }\n    /**\n     * Sets the connection type.\n     *", "answers": ["        if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())"], "all_classes": null, "length": 9441}
{"pred": "           }\n            switch (op)\n            {\n                case BinaryOperatorKind.Add:\n                    return new SynthesizedBinaryOperatorSymbol(op, leftType, rightType, returnType, isChecked);\n                case BinaryOperatorKind.Subtract:\n                   ", "answers": ["                if ((object)leftType == null)"], "all_classes": null, "length": 15198}
{"pred": "       self.invoke('beforeEvaluate', expression=expression, locals=locals)\n        try:\n            result = eval(expression, locals, self.pseudo_global_dict)\n        except:\n            self.fail(sys.exc_info())\n        self.invoke('after", "answers": ["        if expression in ('1', 'True'): return True"], "all_classes": null, "length": 8731}
{"pred": "     for (int j = 0; j < dsize; j++) {\n        int[][] clique = new int[windowSize][];\n        for (int k = 0; k < windowSize; k++) {\n          clique[k] = new int[document.get", "answers": ["      if (featureVals != null)"], "all_classes": null, "length": 8316}
{"pred": "   }\n}\n// The following code is used to generate the symbol table for the\n// debugger.  It is not used by the compiler.\n//\n// The symbol table is a list of symbols.  Each symbol is a record\n// that contains the following information:\n//\n// ", "answers": ["        internal string name; // length prefixed name of method"], "all_classes": null, "length": 9110}
{"pred": "           if (contextProfile == 0)\n                DiscoverContextProfile();\n            // MAJOR/MINOR only introduced in GL 3.0\n            GL.GetInteger(GetPName.MajorVersion, out majorVersion);\n            GL.GetInteger(GetPName.", "answers": ["            if (GL.GetString(StringName.Version).StartsWith(\"GL ES\"))"], "all_classes": null, "length": 8378}
{"pred": "def calculate_md5(filename):\n    \"\"\"\n    @return the MD5 checksum of the file.\n    \"\"\"\n    return calculate_md5(open(filename, 'rb').read())\ndef calculate_md5(data):\n    \"\"\"\n    @return the MD5 check", "answers": ["    return (0, CFG_WEBACCESS_WARNING_MSGS[0])"], "all_classes": null, "length": 11744}
{"pred": "       self.impl = UDFLogicalFileSystemImplementation()\n        self.impl.parse(impl_data)\n        self._initialized = True\n        return self\n\n        if not self._initialized:\n            raise ValueError('UDFLogicalFileSystemImplementation not initialized')\n       ", "answers": ["        self.impl_id = UDFEntityID()"], "all_classes": null, "length": 10644}
{"pred": "=====================\n\n    else:\n        result = self._aggregate(values, axis=0, func=func, fill_value=fill_value)\n\ndef _aggregate(self, values, axis=None, func=None, fill_value=None):\n   ", "answers": ["                            result = concat(values, keys=key_index,"], "all_classes": null, "length": 9883}
{"pred": "           case 'e':\n                throw error(\"Invalid flag: e\");\n            case 0:\n                return;\n            default:\n                throw error(\"Invalid flag: \"+(char)ch);\n            }\n            next();\n        }\n    }\n    /**\n    ", "answers": ["            case '-': // subFlag then fall through"], "all_classes": null, "length": 10915}
{"pred": "       final VirtualMachine vm = _db.findById(VirtualMachine.class, vmId);\n        if (vm == null) {\n            throw new ResourceUnavailableException(\"Virtual machine with id \" + vmId + \" not found.\");\n        }\n\n        final VirtualMachineProfile profile = _", "answers": ["        final VMInstanceVO vm = _vmDao.findByUuid(vmUuid);"], "all_classes": null, "length": 8853}
{"pred": "=======================\n        return -np.sum(np.outer(self.N_k, self._compute_gradient(f_k)), axis=1)\n\n    def _compute_gradient(self, f_k):\n        \"\"\"\n        Computes the gradient of the log", "answers": ["        W_nk = self._computeWeights(recalc_denom=True)"], "all_classes": null, "length": 12510}
{"pred": "   def test_statDirectory(self):\n        \"\"\"\n        Check the output of the stat method on a directory.\n        \"\"\"\n        self.createDirectory('ned')\n        d = self.shell.stat(('ned',), ('size', 'isDirectory'))\n        self.assertEqual(", "answers": ["        d = self.shell.stat(('ned',), ('size', 'directory'))"], "all_classes": null, "length": 8415}
{"pred": "               if( b < 0 ) {\n                    break;\n                }\n                \n                dest[off+i] = (byte)b;\n            }\n            return i;\n        }\n        \n        /**\n         * Closes this input stream and releases any system", "answers": ["                if( b >= 0 ) {"], "all_classes": null, "length": 9989}
{"pred": "           if (b == null)  return a;\n            return new ToolkitEventMulticaster(a, b);\n        }\n        static AWTEventListener remove(AWTEventListener a,\n                                        AWTEventListener b) {\n            if (a == null)  return b;", "answers": ["            if (b == null)  return a;"], "all_classes": null, "length": 10923}
{"pred": "\t\t\t\t\t\t\t\tresults.Sort( new AccountComparer() );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif ( results.Count > 0 )\n\t\t\t\t\t\t\t\tfrom = results;\n\t\t\t\t\t\t", "answers": ["\t\t\t\t\t\t\t\tresults.Sort( AccountComparer.Instance );"], "all_classes": null, "length": 9034}
{"pred": "           if (result != RESULT.OK)\n            {\n                return result;\n            }\n            soundnew = new Sound();\n            soundnew.setRaw(soundraw);\n            sound = soundnew;\n            return result;\n        }\n        public RESULT createSoundFrom", "answers": ["            if (result != RESULT.OK)"], "all_classes": null, "length": 14660}
{"pred": "               tbl_ix = data[base] & 255;\n            int len = data[base+1] & 255;\n            int pos = base+2;\n            int len_bits = 0;\n            int huffbits[] = new int[", "answers": ["                tbl_ix = data[base] & 255;"], "all_classes": null, "length": 16751}
{"pred": "                   this.AddLabel(x2, 215, 0x2712, \"Deathball\");\n                    this.AddButton(x2, 215, 0x2712, 0x2712, 405", "answers": ["                    this.AddLabel(x2 + 30, 215, 55, a.Text(200233));  // \"DeathBall\""], "all_classes": null, "length": 8017}
{"pred": "           TemplateRow = TemplateDT.NewRow();\n            RequiredColumns := [\"PersonKey\", \"PartnerKey\"];\n            TemplateDT.Columns.SetColumnReadOnly(TemplateDT.Columns[\"PersonKey\"], true);\n            TemplateDT.Columns.SetColumnReadOnly(TemplateDT.Columns[\"PartnerKey", "answers": ["            TemplateRow = TemplateDT.NewRowTyped(false);"], "all_classes": null, "length": 8754}
{"pred": "\t\tfinal LameInternalFlags gfc = gfp.internal_flags;\n\t\tif (gfc != null) {\n\t\t\tif (gfc.bit_reservoir != null) {\n\t\t\t\tret = gfc.bit_reservoir.free();", "answers": ["\t\tif (gfp != null && gfp.class_id == LAME_ID) {"], "all_classes": null, "length": 8018}
{"pred": "               // if (AllSubmissionsOK) then\n                //     ' all submissions OK, so we can commit the transaction\n                //     CommitTransaction();\n            }\n            else\n            {\n                AllSubmissionsOK = false;\n            }\n            if (", "answers": ["                if (AllSubmissionsOK == false)"], "all_classes": null, "length": 8128}
{"pred": "   self.skeleton = self.skeleton.replace(\"<%s>\" % name, value)\n\n    # recursive call for all children\n    for child in child.childNodes: self.replaceVariables(child, test)\n\n    # recursive call for all siblings\n    for sib", "answers": ["                    elif name == \"requires\":"], "all_classes": null, "length": 9136}
