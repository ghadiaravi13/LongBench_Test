{"pred": "\t\t\traspodelaTableModel.addPrimerak(primerak);\n\t\t\thandleSetPreostalo();\n\t\t\thandleLoad();\n\t\t} catch (UValidatorException e) {\n\t\t\tJOptionPane.showMessageDialog(this, e.", "answers": ["\t\t\tString invKnj = invKnjPanel.getCode();"], "all_classes": null, "length": 451}
{"pred": "               SubCriteria[\"GroupID\"] = new SearchCondition<String>(\"GroupID\");\n              }\n              return (ISearchCondition<String>)SubCriteria[\"GroupID\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"ServerPartition", "answers": ["                 SubCriteria[\"GroupID\"] = new SearchCondition<String>(\"GroupID\");"], "all_classes": null, "length": 475}
{"pred": "\t\taliases.Add (\"gb2312\", \"gb2312\");\n\t\taliases.Add (\"gbk\", \"gb2312\");\n\t\taliases.Add (\"gb_china\", \"gb2312\");\n\t\taliases.", "answers": ["\t\taliases.Add (\"GBK\", \"gb2312\");"], "all_classes": null, "length": 545}
{"pred": "# TODO(josh): Implement the parsing of character classes.\n# This is a TODO from the original code.\n# It's not clear what the intended behavior is, so we'll leave it\n# as a TODO for now.\nif source.match(r'\\['):\nreturn", "answers": ["        if _parse_verbatim(source, '[:%s:]' % class_name):"], "all_classes": null, "length": 850}
{"pred": "#print(suma)\n#print(len(suma))\n#print(suma[0])\n#print(suma[1])\n#print(suma[2])\n#print(suma[3])\n#print(suma[4])\n#print(", "answers": ["check = numbers[5][123]"], "all_classes": null, "length": 502}
{"pred": "       sendBean(\"B\", 1, 1L);\n        sendBean(\"A\", null, null);\n        assertFalse(listener.isInvoked());\n        sendBean(\"A\", 1, 1L);\n        assertEquals(1L, listener.assertOneGetNew().get", "answers": ["        sendBean(\"A\", null, null);"], "all_classes": null, "length": 756}
{"pred": "               item.setExpanded(true);\n                item.setGrayed(false);\n                item.setSelected(true);\n                break;\n            }\n        }\n    }\n    private void handleTreeItemSelect() {\n        if (tree.getSelectionCount", "answers": ["                tree.setSelection(new TreeItem[] { item });"], "all_classes": null, "length": 1800}
{"pred": "       topPanel.revalidate();\n        topPanel.repaint();\n    }\n}", "answers": ["        if (nilCard != null) {"], "all_classes": null, "length": 511}
{"pred": "\t\t\tsqrtAspect = (float) Math.sqrt((double) w / h);\n\t\t}\n\t}\n\t\n\tprivate void loadBitmap(String fileName) throws IOException {\n\t\tInputStream is = null;\n\t\ttry {\n\t\t\tis = artist.get", "answers": ["\t\t\tfloat r = (w+h)/2f;"], "all_classes": null, "length": 1042}
{"pred": "       self.__repeat = (delay, interval)\n\nI'm trying to create a GTK+ application that can be used to translate GTK+ events to Pygame events. The code above is a part of the Translator class. The problem is that the _tick_cb function is not being", "answers": ["            self.__tick_id = gobject.timeout_add(10, self._tick_cb)"], "all_classes": null, "length": 703}
{"pred": "# Run the tests\ntest_paths = kwargs[\"test_paths\"]\nproduct = kwargs[\"product\"]\nconfig = kwargs[\"config\"]\nrun_info = kwargs[\"run_info\"]\nmanifest = kwargs[\"manifest\"]\nmanifest_file = kwargs[\"manifest_file\"]\nman", "answers": ["    handler = handlers.LogLevelFilter(logged_critical, \"CRITICAL\")"], "all_classes": null, "length": 1196}
{"pred": "   def get_wavelength(self):\n        \"\"\" Method to get the current wavelength from the wavemeter.\n        @return float: current wavelength in nm\n        \"\"\"\n        # lock the thread to prevent race conditions\n        with self.threadlock:\n            # get the current", "answers": ["        if self.getState() == 'idle':"], "all_classes": null, "length": 885}
{"pred": "       List<String> mustStatusNames = Arrays.asList(\n            PresenceStatus.AVAILABLE.getStatusName(),\n            PresenceStatus.BUSY.getStatusName(),\n            PresenceStatus.CHAT.getStatusName(),\n            PresenceStatus.DND.", "answers": ["        List<String> requiredStatusNames ="], "all_classes": null, "length": 678}
{"pred": "                           await RunCommand(cmd);\n                        }\n                    });\n                }\n            }\n            ActivePoll = poll;\n            poll.Start(options);\n            return true;\n        }\n        private async Task MapVoteEnded(object sender, EventArgs e", "answers": ["                            await cmd.ExecuteArmed(this, null);"], "all_classes": null, "length": 3344}
{"pred": "\t\t\tthis.label1.Location = new System.Drawing.Point(6, 13);\n\t\t\tthis.label1.Name = \"label1\";\n\t\t\tthis.label1.Size = new System.Drawing.Size(150, 13);", "answers": ["\t\t\tthis.label1.Location = new System.Drawing.Point(6, 51);"], "all_classes": null, "length": 1316}
{"pred": "\t\t\t\tif (assembly == null && !throwOnMissing) {\n\t\t\t\t\tassembly = BuildManager.GetCompiledType (name).Assembly;\n\t\t\t\t}\n\t\t\t\tif (assembly == null && throwOnMissing) {\n\t\t\t\t\t", "answers": ["\t\t\t\tif (assembly == null) {"], "all_classes": null, "length": 1336}
{"pred": "# Get link status information\nself.get_link_status()\n# Show result\nself.show_result()\n# Exit module\nself.module.exit_json(**self.results)\nif __name__ == '__main__':\n    argument_spec = ce_argument", "answers": ["        if self.interface == 'all':"], "all_classes": null, "length": 1718}
{"pred": "   for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      if (Character.isDigit(c) || c == ',') continue;\n      return false;\n    }\n    return true;\n ", "answers": ["    for (int i = 0; i < s.length(); i++)"], "all_classes": null, "length": 939}
{"pred": "\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t\t/// <summary>\n\t\t/// Closes the log file\n\t\t/// </summary>\n\t\tpublic static void Close", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "                           sead_partnn_l = find_nearest_neighbours(nodemap_bkup, c_sead, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ", "answers": ["                            if (c_sead == start || c_sead == stop) {"], "all_classes": null, "length": 1426}
{"pred": "\t\t\tthis.Size = new System.Drawing.Size(320, 261);\n\t\t\tthis.ResumeLayout(false);\n\t\t\tthis.PerformLayout();\n\t\t}\n\t\t#endregion\n\t\tprivate System.Windows.Forms.", "answers": ["\t\t\tthis.Size = new System.Drawing.Size(371, 300);"], "all_classes": null, "length": 825}
{"pred": "# behavior = []\n# for observation in observations:\n#     behavior.append(translations_dict[observation['code']])\n#     behavior[-1]['time'] = observation['time']\n#     behavior[-1]['loc'] = observation['loc']\n#     behavior[-1]['", "answers": ["    behavior_list = [ checkOnTour(tourlist, o,"], "all_classes": null, "length": 609}
{"pred": "       self.write_page(addressbookpage, head, body, output_file, sio)\n        self.uplink = self.report.uplink\n        self.report.uplink = FULLCLEAR\n        self.report.write_page(addressbookpage", "answers": ["        footer = self.write_footer(None)"], "all_classes": null, "length": 960}
{"pred": "   self.takeoff()\n    self.fly_mission()\n    self.land()\n    self.context_pop()\n    self.progress(\"Test complete\")\n\n# Add the following lines to the end of the file\nif __name__ == '__main__':\n    Auto", "answers": ["            if abs(m.relative_alt) > max_relalt_mm:"], "all_classes": null, "length": 577}
{"pred": "\t\t\t\t\t\t\tif (strings[0] == \"GlobalSettings\")\n\t\t\t\t\t\t\t\torderManager.LobbySettings = Session.Deserialize<Session.GlobalSettings>(node.Value);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tGame", "answers": ["\t\t\t\t\t\t\tif (strings[0] == \"GlobalSettings\")"], "all_classes": null, "length": 591}
{"pred": "\t\t\t\tSystem.arraycopy(src, srcOffset, buf, 0, byteCount);\n\t\t\t\tbufferedPacket.setPayload(buf);\n\t\t\t\tstate = SocketState.READY;\n\t\t\t\treturn bufferedPacket;\n\t\t\t", "answers": ["\t\t\t\tfor (int i = 0; i < byteCount; i++) {"], "all_classes": null, "length": 783}
{"pred": "       // Create toolbar\n        if (opiRuntimeToolBarDelegate == null)\n        {\n            opiRuntimeToolBarDelegate = new OPIRuntimeToolBarDelegate(this);\n            getSite().setActionBars(new IActionBars() {\n                @Override\n              ", "answers": ["        if (opiRuntimeToolBarDelegate != null)"], "all_classes": null, "length": 813}
{"pred": "           if (launcher != null && launcher.isPopupTrigger(e)) {\n                launcher.launchPopup(e);\n            }\n        }\n    }\n}", "answers": ["            if (launcher != null && !e.isPopupTrigger()) {"], "all_classes": null, "length": 933}
{"pred": "   def test_clean_name_with_single_quote(self):\n        name = parse_name(\"O'Brien John\")\n        self.assertEqual(name, \"John O'Brien\")\n\nThis code is a part of a Django test suite for a Python package called '", "answers": ["            (\"O`NEAL \\nCarol Joy\", \"Carol Joy O'Neal\"),"], "all_classes": null, "length": 919}
{"pred": "           sort_by, sort_order = sort\n            if sort_by not in ['uploadDate', 'displayname']:\n                raise ValueError('Invalid sort_by value: %s' % sort_by)\n            if sort_order not in [ModuleStoreEnum.SortOrder.asc", "answers": ["            if sort[0] == 'uploadDate':"], "all_classes": null, "length": 1853}
{"pred": "           }\n            object IEnumerator.Current => Current;\n            public void Dispose() { }\n            public bool MoveNext()\n            {\n                index++;\n                if (index >= list.Count)\n                    return false;\n                Current = list[index];\n", "answers": ["                index = -1;"], "all_classes": null, "length": 1053}
{"pred": "# Create a new repository instance.\nrepo = unionrepository(ui, path, parentpath)\n# Open the repository.\nrepo.open()\n# Close the repository when done.\nrepo.close()\n# This is just a test, so we don't need to do anything with the repository", "answers": ["                parentpath = parentpath[len(cwd):]"], "all_classes": null, "length": 795}
{"pred": "       record = logging.LogRecord(level, msg, args, fn, lno, *args, **kwargs)\n\n        return record\n\nclass StructuredFormatter(logging.Formatter):\n    \"\"\"A formatter that supports structured logging\"\"\"\n    def __init__(self, datefmt=None", "answers": ["        if sys.version_info[0] == 2:"], "all_classes": null, "length": 897}
{"pred": "                               m.Mana -= 20;\n                            }\n                            else\n                            {\n                                m.SendMessage(\"You have reached the maximum skill level for Spellweaving.\");\n                            }\n                        }\n                        else\n                        {\n                ", "answers": ["                                m.Mana -= 20;"], "all_classes": null, "length": 569}
{"pred": "def step(pattern, func):\n    \"\"\"\n    Register a step function.\n    \"\"\"\n    pattern = re.compile(STEP_PREFIX + pattern)\n    lettuce.step(pattern, func)\ndef given_models_exist(model, data, queryset=None):\n", "answers": ["            for k, v in hash_.iteritems():"], "all_classes": null, "length": 546}
{"pred": "           return page_not_authorized(req=req, referer=\"/edit\",\n                                      text=auth_message)\n        recid = argd['recid']\n        ticket = perform_request_newticket(ln, recid)\n        return page(title=\"New T", "answers": ["            return page_not_authorized(req=req, referer=\"/edit\","], "all_classes": null, "length": 756}
{"pred": "'''\n# Import required modules\nimport os\nimport re\nimport sys\nimport time\nimport subprocess\nimport signal\nimport pwd\nimport socket\nimport select\nimport paramiko\nimport tempfile\nimport shlex\nimport struct\nimport hashlib\nimport pipes\nimport pty\nimport", "answers": ["        - {key: usetty, section: ssh_connection}"], "all_classes": null, "length": 968}
{"pred": "\t\tdataString += \"WARDLIST\";\n\t\tdataString += ims.NAS.NASMessageCodes.MESSAGESEPARATOR;\n\t\tdataString += \"1\";\n\t\tdataString += ims.NAS.NASMessageCodes.MESSAGESEPARATOR;\n", "answers": ["\t\tWardlistRecord data = (WardlistRecord)DataCollection.get(0);"], "all_classes": null, "length": 1476}
{"pred": "       record_add_field(rec, '300', '1', 'a', page_count)\n        record_add_field(rec, '264', 'a', 'Volume %s, Issue %s, %s-%s' % (volume, issue, first_", "answers": ["            record_add_field(rec, '300', subfields=[('a', page_count)])"], "all_classes": null, "length": 1283}
{"pred": "               assertEquals(A.getQuick(c, r), B.getQuick(r, c));\n            }\n        }\n    }\n    public void testViewRow() {\n        IntMatrix1D row = A.viewRow(NROWS / 2);\n        assertEquals(", "answers": ["                assertEquals(A.getQuick(r, NCOLUMNS - 1 - c), B.getQuick(r, c));"], "all_classes": null, "length": 1319}
{"pred": "# Send Unit Data\n# (PacketField(\"commandSpecificData\", ENIPSendUnitData, ENIPSendUnitData),\n# lambda pkt: pkt.commandId == 0x70),\n# Indicate Status\n# (PacketField(\"commandSpecificData\", ENIPIndicateStatus", "answers": ["                 lambda pkt: pkt.commandId == 0x6f),"], "all_classes": null, "length": 625}
{"pred": "\t\tGridEnvelope gridEnvelope = reader.readGridGeometry();\n\t\t\n\t\t// Extracting the CRS\n\t\tCoordinateReferenceSystem crs = reader.getCoordinateReferenceSystem();\n\t\t\n\t\t// Extracting the Bounds\n\t\tGridEn", "answers": ["\t\tfinal CoordinateReferenceSystem crs = reader.getCrs();"], "all_classes": null, "length": 805}
{"pred": "           ((Creature) e).setAI(new DefaultCreatureAI());\n        }\n        return e;\n    }\n}\n\n// What should be added here?\n// The code above is incomplete, what should be added here?\n// The code above is incomplete, what should", "answers": ["            Creature c = (Creature) e;"], "all_classes": null, "length": 386}
{"pred": "\t\t\tushort* line = (ushort*)bd.Scan0;\n\t\t\tint delta = bd.Stride >> 1;\n\t\t\tfor( int y = 0; y < height; ++y, line += delta )\n\t\t\t{\n\t\t", "answers": ["\t\t\tushort* line = (ushort*)bd.Scan0;"], "all_classes": null, "length": 1243}
{"pred": "                   if (house == null)\n                        house = BaseHouse.FindHouseAt(new Point3D(m.X, m.Y + 1, 127), m.Map, 16);\n                    if (house != null)\n                        bonus", "answers": ["                    if (house == null)"], "all_classes": null, "length": 585}
{"pred": "Console.WriteLine(\"Display Set Name: {0}\", displaySet.Name);\nConsole.WriteLine(\"Display Set Description: {0}\", displaySet.Description);\nConsole.WriteLine(\"Display Set UID: {0}\", displaySet.Uid);\nConsole.WriteLine(\"Display Set Series UID: {", "answers": ["\t\t\t\t\t\tConsole.WriteLine(\" > {0}\", displaySet.Descriptor.Description);"], "all_classes": null, "length": 803}
{"pred": "# This is a stub for the function that will be implemented in the next exercise.\n# It should return the TimestampFile object for the given file name.\ndef read_file(fname):\n    \"\"\"\n    Read the contents of a timestamp file and return a :class:`TimestampFile`\n", "answers": ["    exts = supported_extensions()"], "all_classes": null, "length": 653}
{"pred": "\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\t\tif (cgn.depth < 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// find the parent\n\t\t\t\t\t\t\tGraph", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "\t\t\t\t    if (down)\n\t\t\t\t    {\n\t\t\t\t\t    // Set the key value\n\t\t\t\t\t    switch (ascii)\n\t\t\t\t\t    {\n\t\t\t\t\t\tcase 0x00:\n\t", "answers": ["\t\t\t    case 189: // -/_ key"], "all_classes": null, "length": 1748}
{"pred": "out_list += [weights_dmat_all[index]]\n\nPlease complete the code by adding the following lines:\nout_comment += ['Weighted distortion matrix']\nout_units += ['']\n\nThen, write the results to the file:\nresults.write(out_list", "answers": ["        out_list += [weights_dmat_all[index]]"], "all_classes": null, "length": 1374}
{"pred": "lines = obj.splitlines()\nreturn list(load(lines, mapping, implementation, strict))", "answers": ["    obj = obj.lstrip(\"\\ufeff\")"], "all_classes": null, "length": 676}
{"pred": "\t\tif (orig == null) {\n\t\t\treturn;\n\t\t}\n\t\tString newUuid = mDbHelper.getBookUuid(newId);\n\t\tcopyFileToCoverImageIfMissing(orig, newUuid);\n\t}\n\t/**\n", "answers": ["\t\tif (orig == null || !orig.exists() || orig.length() == 0)"], "all_classes": null, "length": 866}
{"pred": "           strength += opponent.getValue().getScore().get(0);\n        }\n        tableStrengthScore.setPlayer(player);\n        tableStrengthScore.setScore(strength);\n        this.scoreTable.add(tableStrengthScore);\n    }\n}", "answers": ["            for (PlayerScore scoreTable : this.scoreTable) {"], "all_classes": null, "length": 1212}
{"pred": "   def test_public_mode_off(self, temp_dir, common_obj):\n        web = web_obj(temp_dir, common_obj, \"receive\")\n        web.settings.set(\"general\", \"public\", False)\n        with web.app.test_", "answers": ["            res = c.get(\"/\")"], "all_classes": null, "length": 919}
{"pred": "           nsClientService = mLocalBinder.getService();\n        }\n    };\n    public void addToLog(String log) {\n        listLog.add(new EventNSClientLog(log));\n        textLog = Html.fromHtml(log, null, null);\n", "answers": ["                nsClientService = mLocalBinder.getServiceInstance();"], "all_classes": null, "length": 516}
{"pred": "=====================\nif __name__ == \"__main__\":\n    main()\n# This script is part of the Python for Windows distribution.\n# It is distributed under the same license as Python itself.\n# For more information, see http://www.python.org/windows/\n#\n#", "answers": ["            if arch == \"amd64\":"], "all_classes": null, "length": 982}
{"pred": "\t\tfor(int i=0; i<length; i++){\n\t\t\tif(i<tempCostList.Length){\n\t\t\t\ttowerList[index].baseStat.costs[i]=tempCostList[i];\n\t\t\t}\n\t\t\telse", "answers": ["\t\tfor(int i=0; i<length; i++){"], "all_classes": null, "length": 3890}
{"pred": "\t\t\t\tAddRes( index, typeof( SilverIngot ), 10 );\n\t\t\t\tAddRes( index, typeof( GoldIngot ), 1 );\n\t\t\t\tAddRes( index, typeof( MithrilIngot ), 1 );\n\t\t\t\t", "answers": ["\t\t\t\tAddRes( index, typeof( BrilliantAmber ), 1032697, 1, 1044240 );"], "all_classes": null, "length": 3677}
{"pred": "```python\nself.test_simple_properties_file()\n```\nThis line of code is testing a simple properties file conversion. You can add more test methods to check other scenarios, such as handling comments, multiline strings, and different personality types. Make sure to import the necessary classes and", "answers": ["        options = self.help_check(options, \"-P, --pot\")"], "all_classes": null, "length": 1336}
{"pred": "\t\t\tsw.WriteLine (\"\\t// TODO: Add members and methods here.\");\n\t\t\tsw.WriteLine (\"\\t// Use the 'GenerateProperties' and 'GenerateMethods' attributes\\n\");\n\t\t\tsw.WriteLine (\"\\t// below to help you generate your interface code.\\", "answers": ["\t\t\tforeach (Signal sig in sigs.Values) {"], "all_classes": null, "length": 1298}
{"pred": "   module = AnsibleModule(\n        argument_spec=fields,\n        supports_check_mode=True\n    )\n\n    fos = FortiOSHandler(api_version='6.4.0')\n    fos.login(data=module.params)\n\n    is", "answers": ["    module = AnsibleModule(argument_spec=fields,"], "all_classes": null, "length": 1009}
{"pred": "   node.setLeaf(leaf);\n  }\n  public void setPresentableTextContainer(Element presentableTextContainer) {\n    this.presentableTextContainer = presentableTextContainer;\n  }\n  public void setInfoTextContainer(Element infoTextContainer) {\n    this", "answers": ["    if (node instanceof MutableNode) {"], "all_classes": null, "length": 568}
{"pred": "           return prevChildren.Take(StartPagingTreshold)\n                .Concat(Enumerable.Range(0, (previousChildren.Length - StartPagingTreshold + PageSize - 1) / PageSize)\n                    .Select(i => childFactory(null, \"Page \"", "answers": ["            var page = prevChildren.Take(StartPagingTreshold).ToList();"], "all_classes": null, "length": 781}
{"pred": "   soaResponse = dns.message.make_response(query, soa)\n    responses.append(soaResponse)\n    response = dns.message.make_response(query)\n    content = \"\"\n    for i in range(200):\n        if len", "answers": ["        soaResponse = dns.message.make_response(query)"], "all_classes": null, "length": 648}
{"pred": "       if (kind == null) {\n            throw new IllegalArgumentException(\"Unknown JFlex token id: \" + javaccKind);\n        }\n        return kind;\n    }\n    public TokenCategory getCategory() {\n        return category;\n    }\n    public int getJav", "answers": ["        if (kind == null) {"], "all_classes": null, "length": 524}
{"pred": "           return FindControl(DescriptionID);\n        }\n        public Control GetLabelForTitle()\n        {\n            return FindControl(TitleID);\n        }\n        public Control GetLabelForPercentage()\n        {\n            return FindControl(PercentageControlID);\n        }\n       ", "answers": ["            return this.FindControlRecursive(DescriptionControlID) as Label;"], "all_classes": null, "length": 450}
{"pred": "       url = '%s%s%s?%s' % (self.protocol, host, path, urllib.urlencode(query_args))\n        # What should be the next line of code?\n        # I think it should be:\n        # return self.send_request", "answers": ["            path += '?' + query_args"], "all_classes": null, "length": 1198}
{"pred": "\t\t\t\tcanvas.drawBitmap(tiles[i].getBitmap(), left, top, null);\n\t\t\t}\n\t\t}\n\t}\n\tprivate float getPosX(LatLonPos pos, double localScale){\n\t\treturn (pos.getLon()", "answers": ["\t\t\t\tRectF destRect = new RectF(left, top, right, bottom);"], "all_classes": null, "length": 1184}
{"pred": "           HueInfo = new Dictionary<DyeType, Tuple<int, int>>();\n            HueInfo.Add(DyeType.WindAzul, new Tuple<int, int>(0x3B2, 0x3B2));\n            HueInfo.", "answers": ["            HueInfo = new Dictionary<DyeType, Tuple<int, int>>();"], "all_classes": null, "length": 535}
{"pred": "               this.gwtXSRFTokenService.getToken(c -> {\n                    final String token = c.getResult();\n                    this.gwtCertificatesService.deleteEntry(selected.getKeystoreName(), selected.getAlias(), token,\n                            c1", "answers": ["                final Modal modal = new Modal();"], "all_classes": null, "length": 698}
{"pred": "\t\t\t\"    Public Sub SomeMethod(Of T As Type)()\", GenerateCode), GenerateCode);\n\t\t\tAssert.AreEqual (\"\\n\" +\n\t\t\t\t\"Namespace SomeNS\\n\" +\n\t\t\t\t\"    Public Sub SomeMethod(Of T As", "answers": ["\t\t\t\t\"    {0}\" +"], "all_classes": null, "length": 1270}
{"pred": "\nclass DBMContainer(Container):\n    \"\"\"\n    A container that uses a DBM database to store its data.\n    \"\"\"\n\n    def __init__(self, namespace, db_module=anydbm.Gdbm,\n                 db_dir=None, lock_dir=", "answers": ["            if os.access(self.file + os.extsep + ext, os.F_OK):"], "all_classes": null, "length": 1142}
{"pred": "       return \"ImageIcon[\" + (filename != null ? filename : location) + \"]\";\n    }\n    /**\n     * Returns the location of the image file.\n     * This is the location of the file that was used to create\n     * the ImageIcon.  It may be null", "answers": ["        if (description != null) {"], "all_classes": null, "length": 1934}
{"pred": "# return self.formatted_plugin_list()\n# or\n# return self.formatted_plugin_list(active_only=False)\n# depending on the use case.\n# This method is used by the !plugins command.\n# It is also used by the !plugins config command", "answers": ["            all_plugins = self._bot.plugin_manager.get_all_plugin_names()"], "all_classes": null, "length": 833}
{"pred": "   }\n    }\n\n    module = AnsibleModule(\n        argument_spec=fields,\n        supports_check_mode=True\n    )\n\n    fos = FortiOSHandler(module)\n\n    is_error, status = fortios_system_switch_interface", "answers": ["                \"vdom\": {\"required\": False, \"type\": \"str\"}"], "all_classes": null, "length": 1164}
{"pred": "           throw new IOException();\n        }\n        fileDecoder = savedDecoder;\n    }\n    private Object open(String name) throws IOException {\n        // Fix for CR 6300233\n        if (name.startsWith(\"java/\")) {\n            throw new IOException();", "answers": ["            throw new IOException();"], "all_classes": null, "length": 880}
{"pred": "\t\t\t\treturn originalObject != null;\n\t\t\tcase ActivitydiagramPackage.TRACED_ACTIVITY__TRACE_SEQUENCE:\n\t\t\t\treturn traceSequence != null && !traceSequence.isEmpty();\n\t\t}\n\t\treturn super.eIsSet(", "answers": ["\t\t\t\treturn originalObject != null;"], "all_classes": null, "length": 533}
{"pred": "\t\tnew SnmpInterfaceUpdater(db, imported).execute();\n\t\tnew InterfaceUpdater(db, imported).execute();\n\t\tnew SnmpInterfaceUpdater(db, imported).execute();\n\t\treturn Collections.emptyList();\n\t}\n\tprivate static class Sn", "answers": ["\t\tList<Event> events = new LinkedList<Event>();"], "all_classes": null, "length": 888}
{"pred": "   if state == 'present':\n        changed = publication.create(tables, params, owner)\n    elif state == 'absent':\n        changed = publication.drop()\n    # If publication exists and state is 'present':\n    if publication.exists and state == 'present':\n       ", "answers": ["    if state == 'present':"], "all_classes": null, "length": 2176}
{"pred": "\t\t\tint version = reader.ReadInt();\n\t\t}\n\t}\n}", "answers": ["\t\t\tint version = reader.ReadInt();"], "all_classes": null, "length": 737}
{"pred": "   def train(self, data, n_epochs=10, batch_size=200, n_iter_per_epoch=1000):\n        \"\"\"Trains the RBM using stochastic CD-k or PCD-k.\n        :param data:", "answers": ["        of log(sigmoid(..)) and will not apply the wanted"], "all_classes": null, "length": 1545}
{"pred": "           return new TripChain(Person);\n        }\n        #endregion ITripChain Members\n    }\n}", "answers": ["            ITripChain chain = (ITripChain)MemberwiseClone();"], "all_classes": null, "length": 798}
{"pred": "       super(X0, Y0, X1, Y1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, ", "answers": ["        role = new FigRole();"], "all_classes": null, "length": 2539}
{"pred": "                   LogManager.GetCurrentClassLogger().Error(\"Error initializing performance counter target: {0}\", ex.Message);\n                }\n            }\n        }\n        \n        /// <summary>\n        /// Closes the performance counter.\n        /// </summary>\n        public override void", "answers": ["                    if (LogManager.ThrowExceptions) throw ex;"], "all_classes": null, "length": 849}
{"pred": "           name,checksum = checksums.get(block=False)\n            assert os.path.isfile(pjoin(cfg.webdav_backend_directory, name))\n            with open(pjoin(cfg.webdav_backend_directory, name), 'rb')", "answers": ["            name, checksum = checksums.get(block=False)"], "all_classes": null, "length": 599}
{"pred": "   self.stack_count = stac + pseudop.stack_effect\n    self.labels = {}\n    self.compiler = compiler\n    self.stack_count = 0\n    self.labels = {}\n    self.compiler = compiler\n    self.stack_count = 0", "answers": ["        dest = args[0]"], "all_classes": null, "length": 655}
{"pred": "\n\t\t\tif file_len > 0:\n\t\t\t\tresult.append(self.data[ofs:ofs+len])\n\t\t\t\tlen = 0\n\t\t\t\tofs += len\n\t\t\t\tcontinue\n\t\t\telse:\n\t\t\t", "answers": ["\t\t\t\tresult += [DATA_ORIGINAL] * mem_len"], "all_classes": null, "length": 1032}
{"pred": "\t\t\tString macroName = value.substring(startIndex + 2, value.indexOf(\"}\", startIndex));\n\t\t\tString macroValue = macroHandler.getMacroValue(macroName);\n\t\t\tif (macroValue == null) {\n\t\t\t\tthrow", "answers": ["\t\t\tStringBuffer result = new StringBuffer();"], "all_classes": null, "length": 3860}
{"pred": "     elements.add(new ASN1Boolean(false));\n    }\n    elements.add(new ASN1Boolean(includeAuthZEntry));\n    if ((attributes != null) && ! attributes.isEmpty())\n    {\n      final ArrayList<ASN1Element> attrs = new ArrayList", "answers": ["      elements.add(new ASN1Boolean(TYPE_INCLUDE_AUTHN_ENTRY, false));"], "all_classes": null, "length": 1468}
{"pred": "\t\tif(beans == null)\n\t\t\treturn coll;\n\t\tfor(int i = 0; i < beans.length; i++)\n\t\t{\n\t\t\tcoll.add(beans[i].buildVo());\n\t\t}\n\t\treturn coll;\n", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 773}
{"pred": "\t\t\treturn EmptyIterator.instance();\n\t\t}\n\t}\n}\n\nI'm trying to add a method to get previously connected devices from the SharedPreferences. The method should return an iterator over the keys of the SharedPreferences. However, I'm getting a compilation error", "answers": ["\t\t\treturn new EmptyIterator<String>();"], "all_classes": null, "length": 526}
{"pred": "           StreamSerializer.SerializeToResponse(requestContext, response, httpResponse);\n            // TODO: Add custom serialization logic here\n        }\n        public StreamSerializer GetResponseSerializer(string contentType)\n        {\n            if (this.ContentTypeResponseSerializers.TryGetValue(contentType", "answers": ["            var serializer = GetResponseSerializer(contentType);"], "all_classes": null, "length": 488}
{"pred": "           launchUrl(createUrl(CallNumber.ToString(), ContactTypes.PhoneCall));\n        }\n    }\n    public void ShowCaseRecord(Guid CaseNumber)\n    {\n        if (serviceProxy == null)\n            throw new ApplicationException(\"Not logged in\");\n        if (Case", "answers": ["            string CallNumberGuid = CallNumber.ToString();"], "all_classes": null, "length": 648}
{"pred": "       width = Integer.parseInt(text.substring(nextToken + 6));\n    }\n}", "answers": ["        text = text.substring(nextToken + 7);"], "all_classes": null, "length": 772}
{"pred": "     }\n    }\n  }\n}\nThe code above is incomplete. The next line of code should be:\ni20 = i18 + i5;\nThis line of code is used to calculate the index of the last element in the lower triangle of the matrix A. The variable", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "               int index = constraintEntry.indexOf(':');\n                String constraintName = null;\n                String constraintValue = null;\n                if (index > 0) {\n                    constraintName = constraintEntry.substring(0, index);\n                    constraintValue = constraintEntry", "answers": ["                if (debug != null) {"], "all_classes": null, "length": 983}
{"pred": "     ProxyInfo proxyInfo = (ProxyInfo) proxyCell.getUserObject();\n      UnitInfo unitInfo = proxyInfo.getUnitInfo();\n      int unitNumber = unitInfo.getUnitNumber();\n      DefaultPort proxyPort = proxyCell.getPort(0);\n      DefaultPort", "answers": ["      ProxyInfo proxy_info = (ProxyInfo) proxyCell.getUserObject();"], "all_classes": null, "length": 2936}
{"pred": "               object obj = this.ViewState[\"SubmitText\"];\n                return (obj == null) ? true : (bool)obj;\n            }\n            set\n            {\n                this.ViewState[\"SubmitText\"] = value;\n            }\n        }\n        /// <summary", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "\n# Create a new TrackCollection and add some tracks to it.\ncollection = TrackCollection()\ncollection.add(TrackFile('path/to/file1.mp3', 'Artist1', 'Album1', 1, 'Title1'))\ncollection.add(TrackFile('path", "answers": ["                for song in self.collection[artist][album]:"], "all_classes": null, "length": 826}
{"pred": "       SecurityManager sm = System.getSecurityManager();\n        if (sm != null)\n            sm.checkPermission(SecurityConstants.GET_CLASSLOADER_PERMISSION);\n    }\n    /**\n     * Returns the module descriptor for the module that contains the given\n     * class.", "answers": ["        SecurityManager sm = System.getSecurityManager();"], "all_classes": null, "length": 3987}
{"pred": "\t\t\t\tif (order.ShippingStatus != ShippingStatus.Shipped && order.ShippingStatus != ShippingStatus.PartiallyShipped)\n\t\t\t\t\tShipOrder(order);\n\t\t\t}\n\t\t\torder.OrderStatusId = (int)Order", "answers": ["\t\t\t\torder.ShippingStatusId = (int)ShippingStatus.Delivered;"], "all_classes": null, "length": 5265}
{"pred": "       AutoNumberingScheme autoNumberingScheme = new AutoNumberingScheme();\n        autoNumberingScheme.initialize();\n        autoNumberingScheme.setName(schemeName);\n        autoNumberingScheme.setClassName(schemeClassName);\n        autoNumberingScheme.setFormatName(formatName", "answers": ["        AutoNumberingScheme ans = new AutoNumberingScheme();"], "all_classes": null, "length": 5629}
{"pred": "\t\t\tAssert.That (source.SingleOrDefault (), Is.Null);\n\t\t}\n\t\t[Test]\n\t\tpublic void SingleOrDefault_SourceWithOneElement_ReturnsThisElement ()\n\t\t{\n\t\t\tAssert.That (source.SingleOrDefault (", "answers": ["\t\t\tvar source = Read<int> ();"], "all_classes": null, "length": 5586}
{"pred": "\t\t\t\t\t// get data\n\t\t\t\t\tExpressionData[] data = new ExpressionData[valuesCount];\n\t\t\t\t\tfor (int i = 0; i < valuesCount; i++) {\n\t\t\t\t\t\tExpressionData ed = new ExpressionData();\n", "answers": ["\t\t\t\t\tArrayList<String> valuesList = new ArrayList<String>();"], "all_classes": null, "length": 4724}
{"pred": "       return self._conf_helper('sense_mode', 'set_sense_mode', 'sense_mode?', options)\n    def _create_devs(self):\n        self.sense_mode = Choice(choices=['auto', 'dc', 'ac'],", "answers": ["        if dev_obj == self.fetch:"], "all_classes": null, "length": 4119}
{"pred": "   if (!success) {\n      throw new RunnerException(_(\"Upload failed\"));\n    }\n    return suggestedClassName;\n  }\n  /**\n   * Prepare the sketch for export.\n   */\n  protected void prepare() {\n    // make sure the build folder exists\n   ", "answers": ["    return success ? suggestedClassName : null;"], "all_classes": null, "length": 6878}
{"pred": "       CQ(Workplane(CQ(Workplane(CQ(Workplane(CQ(Workplane(CQ(Workplane(CQ(Workplane(CQ(Workplane(CQ(Workplane(CQ(Workplane(CQ(Workplane(CQ(", "answers": ["            s = Workplane().box(1,1,1).faces(\"+Z\").edges().fillet(0.1)"], "all_classes": null, "length": 4053}
{"pred": "# Initialize the MPU6050 sensor\nmpu = MPU6050(i2c)\n# Set the DMP packet size\nmpu.dmpPacketSize = 42\n# Set the DMP packet size to the correct value\nmpu.setDMP", "answers": ["            fifoCount = self.getFIFOCount()"], "all_classes": null, "length": 6204}
{"pred": "\tfor name in names['names']:\n\t\titem = frappe.get_doc(\"Item\", name)\n\t\tpdf = get_pdf(item)\n\t\tpdf.save(name+\".pdf\")\n\t\tmsgprint(_(\"PDF created for {0}\").format(", "answers": ["\t\tnames = names['names']"], "all_classes": null, "length": 4346}
{"pred": "\t\t\t\tif (it.hasNext()) {\n\t\t\t\t\tProjektHandler projektHandler = new ProjektHandler();\n\t\t\t\t\tProjektverlaufHandler projektverlaufHandler = new ProjektverlaufHandler();\n\t\t\t\t\tProjektverlauf", "answers": ["\t\t\t\twhile (itHistory.hasNext()) {"], "all_classes": null, "length": 4200}
{"pred": "               list.Add(1072071, this.SetName); // ~1_val~: ~2_name~\n            }\n        }\n        public override void GetProperties(List<PropertyEntry> list)\n        {\n            base.GetProperties(list);", "answers": ["                list.Add(1072378); // <br>Only when full set is present:\t\t\t\t"], "all_classes": null, "length": 6963}
{"pred": "        sb.append(\"u\");\n         sb.append((char) ('%' + (d - 10)));\n      }\n      int e = (c >> 8) & 0xf;\n      if (e < 10) {\n         sb.append((char)", "answers": ["         sb.append((char) ('a' + d - 10));"], "all_classes": null, "length": 4005}
{"pred": "\t\t\tswitch (type)\n\t\t\t{\n\t\t\t\tcase PacketTypes.PlayerChat:\n\t\t\t\t\t//Console.WriteLine(\"PlayerChat: {0}\", e.ReadString());\n\t\t\t\t\t//Console.WriteLine(\"PlayerChat: {0}", "answers": ["\t\t\tvar player = Players[e.Msg.whoAmI];"], "all_classes": null, "length": 4973}
{"pred": "       if (organizationId == null) {\n            throw new ApiException(400, \"Missing the required parameter 'organizationId' when calling listOrganizationPublicTransportStops\");\n        }\n\n        // create path and query parameters\n        String localVarPath = \"/organizations/{", "answers": ["        if (organizationId == null) {"], "all_classes": null, "length": 5074}
{"pred": "           X             -   array[N] - quadrature nodes\n            W             -   array[N] - quadrature weights\n        ************************************************************************/\n        public static void gq(int n, ref double[] x, ref double[] w)\n        {\n            int i;", "answers": ["            X           -   array[0..N-1] - array of quadrature nodes,"], "all_classes": null, "length": 4527}
{"pred": "=====================\n\ndef create_subtree_for_deletion(self, parent, category_queue):\n    \"\"\"\n    Create a subtree in the deleted course\n    \"\"\"\n    if not category_queue:\n        return\n    node = self.create_child(\n       ", "answers": ["            'deleting_user', parent.version_agnostic(), category_queue[0]"], "all_classes": null, "length": 4289}
{"pred": "                                       + \"10^\" + (i >= 0 ? i : -i));\n                                }\n                                else {\n                                    if (this.exp10TickLabels) {\n                                        //create \"10^n\"-type label\n                ", "answers": ["                                            + \"10^\" + Math.abs(i));"], "all_classes": null, "length": 4434}
{"pred": "       .map(PushedAsset::getAssetPath)\n        .collect(Collectors.toList());\n        assertEquals(1, newBundlePushedAssets.size());\n        assertTrue(newBundlePushedAssets.get(0).endsWith(htmlPageAsset.getIdentifier()));\n", "answers": ["                .map(pushedAsset -> pushedAsset.getEnvironmentId())"], "all_classes": null, "length": 6390}
{"pred": "       String nodeRef = createTextFile(getMySite(), \"testInclude.txt\", content).getId();\n        String sharedLinkName = \"testIncludeLink\";\n        String sharedLinkTitle = \"Test Include Link\";\n        String sharedLinkDescription = \"Test Include Link Description\";\n       ", "answers": ["        String fileName1 = \"fileOne_\" + RUNID + \".txt\";"], "all_classes": null, "length": 4714}
{"pred": "           if (obj instanceof Number) {\n                return true;\n            }\n        } catch (NumberFormatException e) {\n            fail(\"createNumber(\" + val + \") failed: \" + e.getMessage());\n        }\n        fail(\"createNumber(\" + val + \") failed: unexpected", "answers": ["            if (obj == null) {"], "all_classes": null, "length": 4128}
{"pred": "                               if (grapple.DockUid != part.Uid)\n                                {\n                                    Syntax.Warning(\"Part \" + part.Name + \" is attached to part \" + other.Name + \" but they are not grappled to each other.\");\n                              ", "answers": ["                                if (grapple.DockUid != part.Uid)"], "all_classes": null, "length": 4169}
{"pred": "       if replace:\n            self.unlink(cr, uid, ids=[res.id])\n        if xml_id:\n            self.create(cr, uid, {\n                'model': model,\n                'key': key,\n                'name': name,\n", "answers": ["            ir_values_obj = pooler.get_pool(cr.dbname).get('ir.values')"], "all_classes": null, "length": 4578}
{"pred": "           return actionTL.getVolatile() == SYNCHRONIZE_CODE;\n        }\n        @Uninterruptible(reason = \"Called from uninterruptible code.\", mayBeInlined = true)\n        public static void setAction(int action) {\n            actionTL.", "answers": ["            return actionTL.getVolatile() == SYNCHRONIZE_CODE;"], "all_classes": null, "length": 4390}
{"pred": "\t\t\tlong size = lgetxattr (path, name, value, 0);\n\t\t\tif (size <= 0)\n\t\t\t\treturn size;\n\t\t\tvalue = new byte [size];\n\t\t\treturn lgetxattr (path, name,", "answers": ["\t\t\tlong size = lgetxattr (path, name, value, 0);"], "all_classes": null, "length": 6868}
{"pred": "\t\t\t\tsuper(id, path, width, height);\n\t\t\t}\n\t\t}\n\t\tprivate Images()\n\t\t{\n\t\t\tAdd = new ImageHelper(1000001, \"/ims/images/add.gif\", new Integer(1", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "       byte[] encoded = new byte[ ( (len + 2) / 3 ) * 4 ];\n        int index = 0;\n        int i = 0;\n        int b1 = 0;\n        int b2 = 0;\n        int b3 = ", "answers": ["        if( source == null ){"], "all_classes": null, "length": 5175}
{"pred": "\t\t\t\tnew ColumnInfo (\"IsCaseSensitive\", typeof(bool)),\n\t\t\t\tnew ColumnInfo (\"IsFixedLength\", typeof(bool)),\n\t\t\t\tnew ColumnInfo (\"IsNullable\", typeof(bool)),\n\t\t\t\tnew ColumnInfo (\"IsReadOnly\", typeof(", "answers": ["\t\t\t\tnew ColumnInfo (\"IsCaseSensitive\", typeof(bool)),"], "all_classes": null, "length": 4122}
{"pred": "\t\t\t\tBigInteger u2 = u1;\n\t\t\t\tu1 = v1;\n\t\t\t\tv1 = q[1];\n\t\t\t\tv3 = u3;\n\t\t\t\tu3 = u2;\n\t\t\t}\n\t", "answers": ["\t\t\t\tBigInteger tn = u1.Subtract(v1.Multiply(q[0]));"], "all_classes": null, "length": 5148}
{"pred": "\t\t\t\tif (_abi_info == null) {\n\t\t\t\t\t_abi_info = new GLib.AbiStruct (\"GstMessage\", new IntPtr(typeof(Message).Handle), new IntPtr(typeof(Message).Handle), new IntPtr(typeof(Message).", "answers": ["\t\t\t\tif (_abi_info == null)"], "all_classes": null, "length": 4205}
{"pred": "               if (name.endsWith(\".zargo\")) {\n                    //#if defined(ARGO_SUPPORT)\n                    //#if defined(ARGO_SUPPORT) && defined(ARGO_SUPPORT_ZARGO)\n                    //#if defined(ARGO_SUPPORT)", "answers": ["                if (!name.endsWith(\".\" + filter.getExtension())) {"], "all_classes": null, "length": 5940}
{"pred": "           tmp_ids = []\n            for tr in tmp_recs:\n                tmp_ids.append(tr.id)\n            tmp_recs = TutorialResource.objects.filter(id__in=tmp_ids)\n            context = {\n                'collection': tmp", "answers": ["                5: SortableHeader('Outline', False, '', 'col-center'),"], "all_classes": null, "length": 4072}
{"pred": "           string[][] ss11 = new string[][] { s111, s112 };\n            string[] s121 = new string[] { \"hello\"};\n            string[][] ss12 = new string[][] { s121 };\n            string[][]", "answers": ["            string[][] ss11 = new string[][] { s111, s112 };"], "all_classes": null, "length": 4165}
{"pred": "       field = self._meta.get_field(unique_check[0])\n        field_name = field.name\n        field_label = field.verbose_name\n        # A unique_together constraint\n        else:\n            field_name = ' and '.join([\n               ", "answers": ["            field = opts.get_field(unique_check[0])"], "all_classes": null, "length": 4513}
{"pred": "#~         for key, value in sorted(params.items()):\n#~             paramout.write(\"%s = %s\\n\" % (key, value))\n#~         paramout.close()\n#~         cycle += 1\n#~         return totalerror\n#~", "answers": ["            for key, value in sorted(paramtestdic.iteritems()):"], "all_classes": null, "length": 4363}
{"pred": "\n# read the head of the repo\nrepohead = op.repo.head()\n# check that the head read from the bundle is the same as the repo head\nif h != repohead:\n    raise error.Abort(_('The head of the repo has changed since the bundle '\n                ", "answers": ["    while len(h) == 20:"], "all_classes": null, "length": 4561}
{"pred": "       if (contentPaneStyle.getBorder() != null) {\n            prefWidth += contentPaneStyle.getBorder().getMinimumWidth();\n            prefHeight += contentPaneStyle.getBorder().getMinimumHeight();\n        }\n        return new Dimension(prefWidth, prefHeight);", "answers": ["        prefWidth = Math.min(prefWidth, width);"], "all_classes": null, "length": 6347}
{"pred": "```python\n        try:\n            new_cell_attributes = eval(cas_data_str)\n        except:\n            self.statusbar.showMessage(\"Error: Could not parse cell attributes.\")\n            return\n        # Get the top left corner of the selection\n        selection = grid", "answers": ["        cas = literal_eval(cas_data_str)"], "all_classes": null, "length": 5088}
{"pred": "\t\t\t\t\tpixel = cursor_pixel;\n\t\t\t\t\tif (pixel.A == 0) {\n\t\t\t\t\t\tcursor_bits[y * (width / 8) + x / 8] |= (byte) (1 << (7 & (x", "answers": ["\t\t\t\t\tpixel = cursor_bitmap.GetPixel(x, y);"], "all_classes": null, "length": 6831}
{"pred": "\t\t\tforeach(Schedule sched in tableSchedules.Rows) {\n\t\t\t\tDateTime dateSched=PIn.Date(sched[\"SchedDate\"]);\n\t\t\t\tDateTime dateSchedStart=PIn.Date(sched[\"SchedStart\"]);\n\t\t", "answers": ["\t\t\tList<DateTime> listUniqueDays=new List<DateTime>();"], "all_classes": null, "length": 4064}
{"pred": "       rc = sqlite3_collate( pColl, pMem1.z, pMem1.n, pMem2.z, pMem2.n );\n        return rc;\n      }\n      /* If both values are blobs, compare them byte for byte. */\n     ", "answers": ["        pMem1.enc == SQLITE_UTF16LE || pMem1.enc == SQLITE_UTF16BE );"], "all_classes": null, "length": 5688}
{"pred": "                       data.PowerType[i] = (PowerType)packet.ReadByte(\"PowerType\", indexes, i);\n                    }\n                }\n            }\n            if (changesMask[124])\n            {\n                data.PowerType = new byte[6", "answers": ["                        data.MaxPower[i] = packet.ReadInt32(\"MaxPower\", indexes, i);"], "all_classes": null, "length": 4140}
{"pred": "=====================\n# enter try block\ntry:\n    self.locidx = 0\n    self.snpidx = 0\n    self.snpcount = 0\n    self.snpmap = np.zeros((self.nloci, self.nsamples),", "answers": ["        seq = self.seqs[nidx]"], "all_classes": null, "length": 7755}
{"pred": "           Index classIndex = allClasses.getIndexByTag(tag);\n            if (classIndex == null)\n                return null;\n            int classIndexLen = classIndex.size();\n            for (int i = 0; i < classIndexLen; i++) {\n               ", "answers": ["            Index[] perClassIndexes = indexByTagAndClass[tag];"], "all_classes": null, "length": 5112}
{"pred": "           this.quoteLabel.Size = new System.Drawing.Size(0, 13);\n            this.quoteLabel.TabIndex = 1;\n            this.quoteLabel.Text = \"Quote:\";\n            this.quoteLabel.UseCompatibleTextRendering = true;\n           ", "answers": ["            this.quoteLabel.Size = new System.Drawing.Size(46, 16);"], "all_classes": null, "length": 4569}
{"pred": "       self.interval = rule._freq\n        self.recurrence_id = rule.rrule(interval=self.interval, dtstart=date_start, until=self.stop_date)\n        self.interval = rule._freq\n        self.rrule_type = rrule", "answers": ["            data['rrule_type'] = rrule_type[rule._freq]"], "all_classes": null, "length": 4433}
{"pred": "               // Copy the decoded row to the output\n                fout.Write(curr, 0, bytesPerRow);\n                // Copy the decoded row to the previous row\n                Array.Copy(curr, 0, prior, 0, bytesPerRow);\n           ", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "     get { return defaultInstance; }\n    }\n    \n    public override pb::MessageDescriptor Descriptor {\n      get { return global::bnet.protocol.exchange_object_provider.ExchangeObjectProviderTypes.ReportRefundRequest__Descriptor; }\n    }\n    \n   ", "answers": ["      get { return DefaultInstance; }"], "all_classes": null, "length": 5791}
{"pred": "                       AApAnalyticAttributeAccess.LoadByDocumentDetail(MainDs, (Int32)rv[\"ApDocumentDetailId\"]);\n                    }\n                }\n                // And finally I need to load the supplier details\n                AApSupplierAccess.LoadBy", "answers": ["                        AApDocumentDetailRow DetailRow = (AApDocumentDetailRow)rv.Row;"], "all_classes": null, "length": 5677}
{"pred": "\t\t\t\tif (m_RewardItem != null)\n\t\t\t\t\tm_RewardItem.MoveToWorld(Owner.Location, Owner.Map);\n\t\t\t\telse if (m_RewardAttachment != null)\n\t\t\t\t\tOwner.Add", "answers": ["\t\t\t\tif (RewardItem != null)"], "all_classes": null, "length": 4101}
{"pred": "\t            return lastItemIndex + 1;\n\t        }\n\t    }\n\t    public bool ContainsKey(TKey key)\n\t    {\n\t        for (int i = 0; i <= lastItemIndex; ++i)\n\t        {\n\t            if (", "answers": ["\t            return lastItemIndex - firstItemIndex + 1;"], "all_classes": null, "length": 5727}
{"pred": "               ArgumentPanel.SuspendLayout();\n                if (AControlLabel != null)\n                {\n                    ArgumentPanel.Controls.Add(AControlLabel);\n                    AControlLabel.Dock = DockStyle.Left;\n                    AControlLabel.AutoSize =", "answers": ["                if (AControlLabel != null)"], "all_classes": null, "length": 7766}
{"pred": "\t\t\treturn Unique(target, null);\n\t\t}\n\t\t/// <summary>\n\t\t/// Returns a new list containing only the elements of the target list that satisfy the given predicate.\n\t\t/// </summary>\n\t\t/// <typeparam name=\"T\"></type", "answers": ["\t\t\treturn Unique(target, null);"], "all_classes": null, "length": 4367}
{"pred": "# Define a function to parse the dynamic section of an ELF file.\ndef parse_dynamic(elf, phdr):\n    shdr = elf.get_section_by_name(\".dynamic\")\n    dyn = DynamicSection(shdr.data)\n    for i in range(len", "answers": ["DT_PPC64_OPD    = (DT_LOPROC + 1)"], "all_classes": null, "length": 6803}
{"pred": "           }\n        }\n        private static void DocumentCommand(Command command, Type type, int depth, int index, List<Command> commands, List<Command> lastCommands, StringBuilder html)\n        {\n            if (command.AccessLevel > AccessLevel.GameMaster)\n            {\n              ", "answers": ["                html.WriteLine(\"      table { width: 100%; }\");"], "all_classes": null, "length": 5413}
{"pred": "\t\t\tWriteReport(buff);\n\t\t\t// wait for data to be read\n\t\t\tif(!mReadDone.WaitOne(1000))\n\t\t\t\tthrow new TimeoutException(\"Read timed out\");\n\t\t\t// copy data to return buffer\n", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "=====================\n                elif p == 1:\n                    min_distance += abs(node.split - x[node.split_dim])\n                else:\n                    min_distance += (abs(node.split - x[node.split_dim]) ** p)\n", "answers": ["                    sd[node.split_dim] = np.abs(node.split - x[node.split_dim])"], "all_classes": null, "length": 5233}
{"pred": "\t\tassertEquals(acn, rules.formatGame(game, Locale.ENGLISH));\n\t\tassertEquals(GameMove.NO_MOVE, game.getLastMove());\n\t\tassertEquals(0, ((PieceCapturing) game.getActualPosition()).getCapturedPie", "answers": ["\t\tassertEquals(acn, rules.formatGame(game, Locale.ENGLISH));"], "all_classes": null, "length": 4129}
{"pred": "   catch (NullPointerException e)\n    {\n      return null;\n    }\n  }\n  \n  /**\n   *  The FeaturePositionComparator is used to sort the features in the\n   *  FeatureVector according to their position.\n   */\n  private static final Comparator", "answers": ["    catch (InvalidRelationException e){}"], "all_classes": null, "length": 7770}
{"pred": "\t\t\t\t\tstring str = reader.ReadString();\n\t\t\t\t\tType type = Type.GetType(str);\n\t\t\t\t\tif (type != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tm_arSpellDefenses.Add(", "answers": ["\t\t\t\t\tstring str = reader.ReadString();"], "all_classes": null, "length": 5717}
{"pred": "\t\t\t\t\t\t\t\t// Add the new sector to the map\n\t\t\t\t\t\t\t\tGeneral.Map.Sectors.Add(newsector);\n\t\t\t\t\t\t\t\t// Add the new sector to the map's list of sectors\n\t\t", "answers": ["\t\t\t\t\t\t\t\tif(newsector == null) return false;"], "all_classes": null, "length": 5677}
{"pred": "   translation = DocumentTranslation.objects.get(\n        document=parent_doc,\n        locale=document_locale,\n        revision=based_on_rev\n    )\n    except DocumentTranslation.DoesNotExist:\n        # Create a new translation\n        translation = DocumentTranslation.objects", "answers": ["        doc = parent_doc.translations.get(locale=document_locale)"], "all_classes": null, "length": 4854}
{"pred": "           }\n            \n            // now we'll create new tables\n            newRows = new ArrayList();\n            lNewWidths = new float[lTotalColumns];\n            for (j=0; j<lTotalColumns; j++) {\n                lNewWidths[j] =", "answers": ["                lDummyHeights [i] = lNewMaxRows;"], "all_classes": null, "length": 5053}
{"pred": "\t\t\t\t\t\treferenceNode.AddLink( GetReferenceNode(script), \"Script\" );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn referenceNode;\n\t\t}\n\t\tprivate ReferenceNode SearchWithReflection( Object obj, string fieldName, bool is", "answers": ["\t\t\t\t\t\treferenceNode.AddLinkTo( GetReferenceNode( script ) );"], "all_classes": null, "length": 4267}
{"pred": "\t\t\t\t\t\tif (trait != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tnode.Value.Nodes.Add(new MiniYamlNode(\"InvulnerabilityMultiplier@EXPERIENCE\", new MiniYaml(\"\")));\n\t\t\t", "answers": ["\t\t\t\t\t\tif (trait != null)"], "all_classes": null, "length": 5181}
{"pred": "=====================\n\ndef __radd__(self, other):\n    \"\"\"Return new sorted list containing self and other.\"\"\"\n    return self + other\n\n__radd__ = __radd__\n\ndef __iadd__(self, other):\n    \"\"\"Add other to self in-place", "answers": ["        return self.__class__(values, key=self._key)"], "all_classes": null, "length": 7674}
{"pred": "=====================\n\ndef _finalize_loaded(self, states):\n    \"\"\"\n    :meth:`Session.flush()` will call this method on all loaded states.\n    This method is responsible for any finalization logic that needs to\n    be performed on the state before it is pers", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "               else if (this.RequiredRace != null && from.Race != this.RequiredRace)\n                {\n                    from.SendLocalizedMessage(1072201); // Only {0} may use this.\n                    return false;\n               ", "answers": ["                    else if (this.RequiredRace == Race.Gargoyle)"], "all_classes": null, "length": 4125}
{"pred": "\t\t\t\treturn new List<syspalvalue>(values);\n\t\t\t}\n\t\t}\n\t}\n}\nI'm trying to add a new syspalvalue to the list of hardcoded values, but I'm not sure how to do it. Can someone please help", "answers": ["\t\t\t\tnew syspalvalue { @class = \"LEOP\", value = 0, name = \"TABLE\" },"], "all_classes": null, "length": 7135}
{"pred": "       if (emails == null) {\n            return;\n        }\n        for (int i = 0; i < emails.length(); i++) {\n            JSONObject email = emails.getJSONObject(i);\n            JSONArray emailTypes = email.optJSONArray(\"type\");", "answers": ["        if (emails == null) {"], "all_classes": null, "length": 4282}
{"pred": "           return ToJson(result);\n        }\n        private void ValidateOptions(Dictionary<string, object> options)\n        {\n            // check for any options that are not supported\n            List<string> unsupportedOptions = new List<string>();\n            foreach (KeyValuePair<string,", "answers": ["            if (Diff.Count > 0 && DiffMode)"], "all_classes": null, "length": 4201}
{"pred": "\t\t\tblockSize = 0;\n\t\t\tlast = 0;\n\t\t\tnInUse = 0;\n\t\t\tzptr = new int[BZIP2_MAX_COMPRESSED_SIZE];\n\t\t\tzptrLast = new int[B", "answers": ["\t\t\tint n = BZip2Constants.baseBlockSize * blockSize100k;"], "all_classes": null, "length": 5391}
{"pred": "                       int x = args[0];\n                        int y = args[1];\n                        int actor = args[2];\n                        int actor2 = args[3];\n                        int damage = args[4];\n                        int damage2 = args[5];\n                       ", "answers": ["                        var a = Actors[args[1]];"], "all_classes": null, "length": 4518}
{"pred": "                   iFile.close();\n                }\n            }\n            catch (final IOException ex)\n            {\n                throw new ObjectStoreException(\"Error reading log file: \" + ex.getMessage());\n            }\n            catch (final ObjectStoreException ex)\n            {\n               ", "answers": ["                    if (iFile != null)"], "all_classes": null, "length": 4288}
{"pred": "\t\t\ttrackError += trackSegmentError ;\n\t\t}\n\t\treturn trackError ;\n\t}\n\t/**\n\t * Finds the simplest route that connects all the given points.\n\t *\n\t * @param points\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tif (trackSegmentError > trackError)"], "all_classes": null, "length": 5623}
{"pred": "\t\t\t\t\"    Sub Something(ByVal value As Integer){0}\" +\n\t\t\t\t\"    Sub Something(ByVal value As String){0}\" +\n\t\t\t\t\"End Interface{0}\", NewLine), code);\n\t\t}\n\t\t[Test]", "answers": ["\t\t\t\t\"    {0}\" +"], "all_classes": null, "length": 5620}
{"pred": "               });\n            #endregion\n            #endregion\n        }\n    }\n}", "answers": ["                    ExtraMissileNames = new[] { \"JhinRShotMis4\" },"], "all_classes": null, "length": 4463}
{"pred": "                           newHouse.Delete();\n                            m_From.SendGump(new HouseSwapResultGump(newHouse, m_From));\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\nI", "answers": ["                            if (m_House.MovingCrate != null)"], "all_classes": null, "length": 5532}
{"pred": "\t\tplot = new Plot();\n\t\tplotID++;\n\t\tpgm = interp;\n\t\tplot.setName(\"Plot \"+plotID);\n\t\tplot.setBackgroundColor(Color.white);\n\t\tplot.setForegroundColor(Color.black);\n", "answers": ["\t\tString title = getFirstString();"], "all_classes": null, "length": 5653}
{"pred": "           if widgetName == \"\":\n                widgetName = selectedShortcut.getProperty( \"Label\" )\n            self._set_widget_name( listitem, widgetName )\n            self._set_widget_path( listitem, selectedShortcut.getProperty( \"Path\" ) )\n", "answers": ["                        widgetTempName = xbmc.getInfoLabel(widgetName)"], "all_classes": null, "length": 6955}
{"pred": "       return encodeBytesToBytes( source, 0, source.length, NO_OPTIONS );\n    }\n    \n    /**\n     * Encodes a byte array into Base64 format.\n     *\n     * @param source The byte array to encode\n     * @param offset The", "answers": ["        byte[] encoded = null;"], "all_classes": null, "length": 5023}
{"pred": "           mnem[ishr] = \"ishr\";\n            mnem[lshr] = \"lshr\";\n            mnem[iushr] = \"iushr\";\n            mnem[lushr] = \"lushr\";\n            mnem[iand", "answers": ["            mnem[ishr] = \"ishr\";"], "all_classes": null, "length": 6113}
{"pred": "# ansible_python_interpreter = '/usr/bin/python3'\n# ansible_python_interpreter = '/usr/bin/python3.6'\n# ansible_python_interpreter = '/usr/bin/python3.7'\n# ansible_python_", "answers": ["            umask = os.umask(0)"], "all_classes": null, "length": 7132}
{"pred": "\t\t\t\t\tfor (int i = 0; i < Menus [selected].Children.Length; i++){\n\t\t\t\t\t\tif (Menus [selected].Children [i].Title [0] == c){\n\t\t\t\t\t\t\tMenus [selected].", "answers": ["\t\t\t\t\tforeach (var mi in Menus [selected].Children){"], "all_classes": null, "length": 7643}
{"pred": "       if (lastScanOffset + pixelStride > data.length) {\n            throw new RasterFormatException(\"Data length \" + data.length +\n                                            \" is less than the required \" +\n                                            \"length \" + (lastScanOffset +\n                                                       pixel", "answers": ["        int lastPixelOffset = (width - 1) * pixelStride;"], "all_classes": null, "length": 4323}
{"pred": "   def get_shared_mem_size(self):\n        \"\"\"\n        Returns the size of shared memory used by the VM (in MB).\n        \"\"\"\n        try:\n            result = process.run('grep -c \"Mem:\" /proc/%d/status' % self.get", "answers": ["        shm = int(open(filename).read().split()[2])"], "all_classes": null, "length": 7764}
{"pred": "# TODO: Add a check for the account's sync status here.\n# If the account is not syncing, return an error.\n# This will prevent the client from making unnecessary requests.\n# This check should be done before the db query.\n#\n# TODO: Add a check for the", "answers": ["    exclude_types = args.get('exclude_types')"], "all_classes": null, "length": 4956}
{"pred": "   course_key = CourseKey.from_string(self.course_id)\n\n    # We'll use this to cache the course enrollment status in the request context\n    # so that we don't have to query the database every time we need to check\n    # whether a user", "answers": ["    objects = CourseEnrollmentManager()"], "all_classes": null, "length": 4276}
{"pred": "\n    system_id = self.get_system_id(system)\n    if not system_id:\n        continue\n    self.client.system.custom_values.remove(system_id, keys)\n    print('Custom values removed from %s' % system)\n\n#", "answers": ["        system_id = self.get_system_id(system)"], "all_classes": null, "length": 5050}
{"pred": "# Define a function that takes a LilyPond file path and returns a LilyPond document.\ndef read_ly_file(file_path):\n    with open(file_path, 'r') as file:\n        file_content = file.read()\n    document = parse(file", "answers": ["        'types': ('general-music', 'sequential-music',),"], "all_classes": null, "length": 4888}
{"pred": "\t\t\t\t.Append (string.Join (\"/\", Text))\n\t\t\t\t.ToString ();\n\t\t}\n\t\t\n#endregion\n\t}\n}", "answers": ["\t\t\t\t.Append (base.ToString ()).ToString ();"], "all_classes": null, "length": 5367}
{"pred": "               chr.CollidingObj = false;\n                // We'll use this to keep track of the number of collisions\n                // that this character has this frame\n                chr.CollisionCount = 0;\n                // We'll use this to keep track of the", "answers": ["                if (chr.Shell == IntPtr.Zero || chr.Body == IntPtr.Zero)"], "all_classes": null, "length": 6278}
{"pred": "   for t in ts:\n        t.start()\n    # spawn status updater\n    if number_threads > 1:\n        status_updater = StatusUpdater(total_recs, finished_queue = finished_queue)\n        status_updater.start()\n   ", "answers": ["        update_t = StatusUpdater(total_recs, finished_queue)"], "all_classes": null, "length": 6540}
{"pred": "# Here we need to add the following fields:\n# - account_id\n# - invoice_line_id\n# - invoice_id\n# - sequence\n# - price_subtotal\n# - currency_id\n# - currency_symbol\n# - currency_rate\n# -", "answers": ["        digits= dp.get_precision('Product Price'),"], "all_classes": null, "length": 4978}
{"pred": "\n    def __init__(self, label, populations, **kwargs):\n        \"\"\"\n        Create a new Population object.\n\n        :param label: A label for the population.\n        :param populations: A list of IDs of the populations that make up this\n            population.\n       ", "answers": ["        data = self.get_data(variables, gather, clear, annotations)"], "all_classes": null, "length": 5678}
{"pred": "               return -value.doubleValue();\n            }\n        };\n    }\n    /**\n     * Creates a numeric negation expression.\n     *\n     * @param operand\n     */\n    public static UnaryExpression negate(Number operand) {\n        return new Unary", "answers": ["                Class<? extends Number> type = value.getClass();"], "all_classes": null, "length": 5044}
{"pred": "               });\n            #endregion\n            #region Lux\n            Spells.Add(new SpellData\n            {\n                Name = \"LuxQ\",\n                Slot = SpellSlot.Q,\n                Range = 1200,\n                Speed =", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "           \"   NEW: \" + nodeUpdate);\n        }\n        return true;\n    }\n    \n    /**\n     * @param nodeId                        the ID of the node\n     * @param auditable                     <tt>true</tt> if the node is auditable\n    ", "answers": ["                    \"   NEW: \" + nodeUpdate);"], "all_classes": null, "length": 6068}
{"pred": "     if (isFlexContainer) {\n        // If we are a flex container, we need to distribute the remaining space\n        // in the cross axis.\n        if (justifyContent == Justify.FLEX_END) {\n          crossDim = remainingFreeSpace;\n        }", "answers": ["      for (i = startOfLineIndex; i < endOfLineIndex; ++i) {"], "all_classes": null, "length": 4941}
{"pred": "\t\t\t\tyAxis.DrawGrid( g, this, scale, shiftPos );\n\t\t\t\tshiftPos += yAxis.GridLineWidth;\n\t\t\t}\n\t\t\tforeach ( YAxis yAxis in _y2AxisList )\n\t\t\t{\n\t\t", "answers": ["\t\t\t\tyAxis.DrawGrid( g, this, scaleFactor, shiftPos );"], "all_classes": null, "length": 4173}
{"pred": "           if (info < 0)\n                throw new ILNumerics.ILMathException(\"Error during QR decomposition: \" + info.ToString());\n            return ret; \n        }\n        /// <summary>\n        /// QR decomposition of a complex matrix A, returning the factors", "answers": ["            if (info < 0)"], "all_classes": null, "length": 4728}
{"pred": "               if (c instanceof JTextComponent) {\n                    JTextComponent tc = (JTextComponent) c;\n                    tc.setFont(getFont());\n                }\n                super.setPropertiesFromAttributes();\n            }\n        }\n    }\n    static class", "answers": ["                if ((c != null)"], "all_classes": null, "length": 9124}
{"pred": "\t\t\t\tif (c == '\\n') {\n\t\t\t\t\t++line;\n\t\t\t\t\t++col;\n\t\t\t\t\ttokens_seen = false;\n\t\t\t\t\tif (doc_comment_seen) {\n\t\t\t\t\t\t", "answers": ["\t\t\t\tswitch (c) {"], "all_classes": null, "length": 8996}
{"pred": "```python\n        for dep in self.__deps:\n            if dep.recipe is None:\n                # no recipe, just a plain package\n                if dep.package is None:\n                    # no package, just a plain dependency\n                    if dep.name in provide", "answers": ["        depStates = { n : s.copy() for (n,s) in states.items() }"], "all_classes": null, "length": 8648}
{"pred": "           xmlWriter.WriteAttributeString(\"Top\", XmlConvert.ToString(pane.Top));\n            xmlWriter.WriteAttributeString(\"Left\", XmlConvert.ToString(pane.Left));\n            xmlWriter.WriteAttributeString(\"Width\", XmlConvert.ToString(pane.Act", "answers": ["            if (pane.Items.Count > 1)"], "all_classes": null, "length": 8608}
{"pred": "# pylint: disable=no-member\n# pylint: disable=no-value-for-parameter\n# pylint: disable=no-method-argument\n# pylint: disable=no-member\n# pylint: disable=no-value-for-parameter", "answers": ["                        &nbsp;(<span class=\"warning\">extra: %(diff)s</span>)<br />"], "all_classes": null, "length": 11089}
{"pred": "\nclass _Request(object):\n    \"\"\"\n        A class to handle requests to the Last.fm web services.\n    \"\"\"\n    def __init__(self, network, method, params = {}, headers = {}, body = None):\n        \"\"\"\n            :param network: The network object that this", "answers": ["        if type(text) == int:"], "all_classes": null, "length": 9909}
{"pred": "           if (result != RESULT.OK)\n            {\n                return result;\n            }\n            if (sound == null)\n            {\n                sound = new Sound();\n                sound.setRawData(data);\n                sound.setLength(data.Length);", "answers": ["            if (result != RESULT.OK)"], "all_classes": null, "length": 14097}
{"pred": "#\n# Build the XML document\n#\ndef buildXML(output, idx):\n    output.write(\"<?xml version='1.0' encoding='UTF-8'?>\\n\")\n    output.write(\"<api xmlns:xsi='http://www.w3.org/", "answers": ["                            desc = escape(desc)"], "all_classes": null, "length": 8020}
{"pred": "# TODO: Add code to compute the overlap between the input and the RF of the\n#       current cell.\n#       This is the 'overlap' variable.\n#       The overlap is the dot product of the input and the RF of the cell.\n#       The RF is the receptive", "answers": ["                    columnNum // self.coincidencesShape[1],"], "all_classes": null, "length": 8992}
{"pred": "=====================\n\ndef _CheckNodeOnline(lu, node_uuid):\n  \"\"\"Check if a node is online.\"\"\"\n  node_info = lu.rpc.GetNodeInfo(node_uuid)\n  if node_info.state != rpc.NODE_STATE_ONLINE", "answers": ["        check_nodes = [self.new_node_uuid, self.other_node_uuid]"], "all_classes": null, "length": 8172}
{"pred": "# ----------------------------------------------------------------------\n# The following code is used to parse the VM options and generate the\n# completion string for the 'mx vm' command.\n# ----------------------------------------------------------------------\n    if not isBoolean(vmap, 'optArg'):\n        complt += '\\t\\", "answers": ["        complt += '\\t\\t\\t\\t\\t-\"'"], "all_classes": null, "length": 8122}
{"pred": "           }\n        }\n        [CommandProperty(AccessLevel.GameMaster)]\n        public OrderType ControlOrderTarget\n        {\n            get { return m_ControlOrderTarget; }\n            set\n            {\n                if (m_ControlOrderTarget == value)\n                {\n", "answers": ["                if (m_ControlMaster != null)"], "all_classes": null, "length": 9893}
{"pred": "       if (getParent() != null) {\n            Component parent = getParent();\n            if (parent instanceof Container) {\n                Container container = (Container) parent;\n                if (!container.visibleBoundsContains(x, y)) {\n                    contains = false;\n               ", "answers": ["        if (contains) {"], "all_classes": null, "length": 10298}
{"pred": "                           if (bmp.GetPixel(n1).R > 0)\n                            {\n                                side1 += (float)(x - x1);\n                                hits1++;\n                            }\n                        }\n                        if (y + r < image_height", "answers": ["                            side1 += bmp_mono[n1];"], "all_classes": null, "length": 8006}
{"pred": "\t\t\t z = new double[3];\n\t\t\t z[0] = -1.0 / 16.0;\n\t\t\t z[1] = 9.0 / 16.0;\n\t\t\t z[2] = 13.0", "answers": ["\t\t\t z = new double[3];"], "all_classes": null, "length": 9193}
{"pred": "\t\t// First, check for reserved SQL keywords in the input fields...\n\t\tdatabaseMeta.quoteReservedWords(fields);\n\t\t\n\t\t// Get the current fields\n\t\ttry\n\t\t{\n\t\t\tResultSet rs = null;\n\t\t\tStatement st", "answers": ["        RowMetaInterface tabFields = getTableFields(tableName);"], "all_classes": null, "length": 9895}
{"pred": "\t\t\tbonusFeats = new String[20];\n\t\t\tfor (int i = 0; i < 20; i++) {\n\t\t\t\tbonusFeats[i] = getRandomFeat();\n\t\t\t}\n\t\t}\n\t", "answers": ["\t\t\tfeIndex = rand.nextInt(allFE.size());"], "all_classes": null, "length": 8696}
{"pred": "\"\"\"\n        self.SetHoverItem(None)\n        self.SetPressedItem(None)\n        self.StopPreviewTimer()\n        self.RefreshOverflowState()\n# ----------------------------------------------------------------------\n# Toolbar class\n# ----------------------------------------------------------------------\nclass Aui", "answers": ["        Handles the ``wx.EVT_LEAVE_WINDOW`` event for L{AuiToolBar}."], "all_classes": null, "length": 11431}
{"pred": "           mute = (m != 0);\n            return result;\n        }\n        public EventCategory(IntPtr ptr)\n        {\n            _ = ptr;\n            eventcategoryraw = ptr;\n        }\n        public EventCategory()\n        {\n            eventcategoryraw = new", "answers": ["            mute = (m != 0);"], "all_classes": null, "length": 9240}
{"pred": "\tprotected override int QuestId { get { return 50000; } }\n\tprotected override string QuestName { get { return \"Library Delivery\"; } }\n\tprotected override int RewardExp { get { return 100; } }\n\tprotected override int RewardGold", "answers": ["\tprotected override int QuestId { get { return 519436; } }"], "all_classes": null, "length": 9147}
{"pred": "           try{ ois.close(); } catch( Exception e ){EncogLogging.log(e);}\n        }   // end finally\n        \n        return obj;\n    }   // end decodeToObject\n\n    \n    /**\n     * Decodes a Base64 encoded string", "answers": ["            try{ ois.close();  } catch( Exception e ){EncogLogging.log(e);}"], "all_classes": null, "length": 8136}
{"pred": "```python\n            if e.nodeType == e.ELEMENT_NODE and e.localName == 'layout':\n                self.layoutNode = e\n                break\n```\n\nThis code is loading an XML file and parsing it using the minidom library. It'", "answers": ["                if e.nodeType == e.ELEMENT_NODE and e.localName == \"layout\":"], "all_classes": null, "length": 8661}
{"pred": "           {\n                BigInteger result = new BigInteger();\n                BigInteger x = new BigInteger();\n                BigInteger two = new BigInteger(2);\n                BigInteger temp = new BigInteger();\n                x.setBit(numBits >> 1);\n              ", "answers": ["                numBits = (numBits >> 1) + 1;"], "all_classes": null, "length": 8360}
{"pred": "       if cdata is not None:\n            return\n        # Check if the slice is equivalent to the full input\n        if node.op == '':\n            if isinstance(node.inputs[0], Variable):\n                shape = shape_of(node.inputs[0])\n              ", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": "```python\n                   is_const=True)\n```\n## Answer (0)\n\nThe missing part is the return type of the method. In this case, it should be `bool`:\n\n```python\ncls.add_method(\"Get\",\n              cpp_", "answers": ["                   is_const=True, is_virtual=True, is_pure_virtual=True)"], "all_classes": null, "length": 10722}
{"pred": "                   Node child = body.first();\n                    if (child instanceof Node.TemplateText) {\n                        templateTextOptimization = true;\n                    }\n                }\n                if (templateTextOptimization) {\n                    out.print(\n                        \"", "answers": ["                    Node bodyElement = body.getNode(0);"], "all_classes": null, "length": 9144}
{"pred": "\t\t\t\t\tif (e.Handled)\n\t\t\t\t\t\treturn PreProcessControlState.MessageHandled;\n\t\t\t\t\tbreak;\n\t\t\t\tcase Msg.WM_KEYUP:\n\t\t\t\tcase Msg.WM_SYSKEY", "answers": ["\t\t\t\t\tif (PreProcessMessage (ref msg))"], "all_classes": null, "length": 9784}
{"pred": "# load the MD file\n# mantid.simpleapi.Load(Filename=md_file_path, OutputWorkspace=output_ws_name)\n# return the output workspace\n# END\n        # load the MD file\n        mantid.simpleapi.Load(Filename=md_file_", "answers": ["        if os.path.exists(md_file_path) is False:"], "all_classes": null, "length": 9108}
{"pred": "```python\ndef __import__(name, globals=None, locals=None):\n    \"\"\"\n    Import the named module, or the named object from the named module.\n    \"\"\"\n    if name is None:\n        raise TypeError('missing argument 1 (name)')\n   ", "answers": ["            package = package.rpartition('.')[0]"], "all_classes": null, "length": 8094}
{"pred": "               GenerateMethodGroupConversionError(diagnostics, syntax, (MethodGroup)expression, targetType);\n                return;\n            }\n            if (expression.Kind == BoundKind.Type)\n            {\n                if (targetType.IsValueType)\n                {", "answers": ["                var methodGroup = (BoundMethodGroup)expression;"], "all_classes": null, "length": 8696}
{"pred": "# Search for the regular expression in the index.\n# This is where the actual searching happens.\n# The index is a dictionary where the keys are the verse references and the\n# values are the words in the verse.\n# The finditer method returns an iterator that yields the match object for\n# each", "answers": ["            search_reg_str = '\\\\b%s\\\\b' % search_terms.replace(' ',"], "all_classes": null, "length": 11879}
{"pred": "#                if not self.__GetNextToken():\n#                    raise Warning(\"Expected FV_IMAGE statement, but found empty line\")\n#                if self.__Token != \"FV_IMAGE\":\n#                    raise Warning(\"Expected FV_IMAGE statement, but found %", "answers": ["                if not self.__IsKeyword(\"FV\"):"], "all_classes": null, "length": 10845}
{"pred": "```python\n  def CompileSourcesPhase(self):\n    sources_phase = self.GetBuildPhaseByType(PBXSourcesBuildPhase)\n    if sources_phase is None:\n      sources_phase = self.GetBuildPhaseByType(PBXSourcesBuildPhase, 1", "answers": ["      headers_phase = PBXHeadersBuildPhase()"], "all_classes": null, "length": 11459}
{"pred": "# Get skeleton data for a list of neurons\ndef get_neurons(x, with_history=False, with_tags=False,\n               with_annotations=False, with_contributors=False,\n               with_skel_history=False, with_skel_", "answers": ["    post = {'node_ids[{}]'.format(i): n for i, n in enumerate(x)}"], "all_classes": null, "length": 14106}
{"pred": "                       // The exponent is recognized as a single entity.\n                        // It is not part of the phase 1 pattern.\n                        pos += exponent.length() - 1;\n                        continue;\n                    } else {\n                        throw new IllegalArgumentException(\"Invalid pattern: \" +", "answers": ["                        if (useExponentialNotation) {"], "all_classes": null, "length": 11534}
{"pred": "\nclass RichTextCtrl(wx.TextCtrl):\n\"\"\"\n\nclass RichTextCtrl(_richtextctrl._richtextctrl.RichTextCtrl):\n    _swig_setmethods_map = {\n        'BeginRightIndent': _swig_setmethods_map['BeginRightInd", "answers": ["        BeginBatchUndo(self, String cmdName) -> bool"], "all_classes": null, "length": 9452}
{"pred": " [ \"%(componentType)s\" = \"httpd\" ] && renice 20 -p $$\n  #\n  %(bashVariables)s\n  #\n  exec /usr/sbin/lighthttpd -f -p %(port)s -D\n", "answers": ["  exec lighttpdSvc.sh < /dev/null"], "all_classes": null, "length": 8611}
{"pred": "   if (tractor.getY() - target.getY() == -2) {\n      my = -1;\n    }\n    if (tractor.getY() - target.getY() == 2) {\n      my = 1;\n    }\n    if", "answers": ["    if (tractor.getY() - target.getY() == -2) {"], "all_classes": null, "length": 8405}
{"pred": "'''\n# This is the code to be completed\n# The code below is just a comment\n# The code below is just a comment\n# The code below is just a comment\n# The code below is just a comment\n# The code below is just a comment\n# The code below is just a comment", "answers": ["        elif state == 'suspended':"], "all_classes": null, "length": 8276}
{"pred": "       if (subChans.isEmpty() && unsubChans.isEmpty()) {\n            // No channels to subscribe/unsubscribe, just return empty map\n            return toRet;\n        }\n        if (!subChans.isEmpty()) {\n            m = ModeFactory.getMode(\"", "answers": ["        List<Map> subDr = Collections.EMPTY_LIST;"], "all_classes": null, "length": 10246}
{"pred": "           for (int i = libs.size() - 1; i >= 0; i--) {\n                NativeLibrary lib = libs.elementAt(i);\n                if (lib.name.equals(name)) {\n                    if (lib.isBuiltIn != is", "answers": ["            int size = libs.size();"], "all_classes": null, "length": 8562}
{"pred": "           state.s1 = s1;\n            state.s2 = s0;\n            state.magicv = hqrndmagic;\n        }\n        /*************************************************************************\n        HQRNDState  initialization  with  given  seed.\n         ", "answers": ["            hqrndseed(s0, s1, state, _params);"], "all_classes": null, "length": 18518}
{"pred": "               hr = (float) radii.getTopRightHorizontalRadius();\n                vr = (float) radii.getTopRightVerticalRadius();\n                // 1 - Top Right:     X - HR, Y + 0 ,      X, Y,      X + 0 ,", "answers": ["                hr = (float) radii.getTopRightHorizontalRadius();"], "all_classes": null, "length": 9945}
{"pred": "\n        group.add_option(\"--installroot\", dest=\"installroot\",\n                        help=_(\"path to install root\"), metavar='[path]')\n        group.add_option(\"--installrootdir\", dest=\"installrootdir\",\n                        help=_(\"path to install", "answers": ["        group.add_option(\"\", \"--rpmverbosity\", default=None,"], "all_classes": null, "length": 8933}
{"pred": "           for (int i = 0; i < retryCount; i++) {\n                try {\n                    // parse the datafile and create the data elements.\n                    CompilationUnit unit = Compiler.compile(values,\n                        datafilePath, defaultData, fileEditable", "answers": ["            while (!successful && retryCount-- > 0) try {"], "all_classes": null, "length": 10896}
{"pred": "               }\n                else\n                {\n                    // pragma does not match a file path on a tree.\n                    // We will generate a warning.\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.ERR_ChecksumMismatch,\n                ", "answers": ["                        if (guid == existingDoc.SourceHashKind)"], "all_classes": null, "length": 8489}
{"pred": "                   while self.tok[0] != ')':\n                        if self.tok[0] == ',':\n                            self.NextToken()\n                            continue\n                        if self.tok[0] not in ('IDENTIFIER', 'INTEGER'):\n                            raise Exception('", "answers": ["                    if self.tok[0] != ')':"], "all_classes": null, "length": 10276}
{"pred": "   self.comment = comment_value\n\n#-----------------------------------------------------------------------------\n@registry.register\nclass MultipleChoiceResponse(LoncapaResponse):\n    \"\"\"\n    Multiple choice question type.\n    \"\"\"\n    def __init__(self, xml_node):\n        super(", "answers": ["        options_value = json_d.get('options', [])"], "all_classes": null, "length": 13691}
{"pred": "         pMem.n = sqlite3_column_bytes( p.pStmt, 0 );\n        }\n        pMem.type = SQLITE_BLOB;\n        if ( p.pStmt != null && p.pStmt.pResult != null )\n        {\n         ", "answers": ["          Debug.Assert( pMem.z != null );"], "all_classes": null, "length": 8052}
{"pred": "   json_data = json.loads(form['jsondata'])\n    json_data = json_unicode_loads(json_data)\n    orcid = json_data['orcid']\n    pid = json_data['pid']\n    if not orcid or not pid:\n", "answers": ["        json_data = json.loads(str(form['jsondata']))"], "all_classes": null, "length": 9234}
{"pred": "'''\n# This is a Python script for managing virtual machines using Ansible.\n# It uses the PyVmomi library to interact with vSphere APIs.\n# The script defines a function 'configure_vm' which takes a dictionary as an argument,\n# containing the desired configuration for a", "answers": ["                disk_type = expected_disk_spec.get('type', '').lower()"], "all_classes": null, "length": 9014}
{"pred": "\t\t\treturn names [(int) ot] [1];\n\t\t}\n\t\tpublic static OpType GetOpType (string name)\n\t\t{\n\t\t\tfor (int i = 0; i < names.Length; ++i) {\n\t\t\t\tif", "answers": ["\t\t\treturn names [(int) ot] [1];"], "all_classes": null, "length": 8622}
{"pred": "               this.IsExpanded = this.IsExpanded;\n            }\n            /// <summary>\n            /// Expand this branch\n            /// </summary>\n            public virtual void Expand() {\n                if (this.IsExpanded)\n                    return;\n               ", "answers": ["                this.Children = new ArrayList();"], "all_classes": null, "length": 8049}
{"pred": "#----------------------------------------------------------------------\n# Value Fields\n#----------------------------------------------------------------------\n    _order = 'id'\n    _rec_name = 'name'\n    _description = 'Stock Location'\n    _auto = False\n    _table = 'stock_location'\n   ", "answers": ["        if acc_src == acc_valuation:"], "all_classes": null, "length": 9425}
{"pred": "   out : array of datetime64[D]\n        An array with the same shape as ``dates`` and ``offsets``,\n        containing the adjusted dates.\n    See Also\n    --------\n    is_busday : Determines if a date is a valid business day.\n   ", "answers": ["    out : array of datetime64[D]"], "all_classes": null, "length": 23278}
{"pred": "       subsets = self._intersect_subset(coord, points, bounds, inside_indices)\n        return subsets\n\n    def _intersect_subset(self, coord, points, bounds, inside_indices):\n        \"\"\"\n        Derive the subsets for the given coordinate.\n", "answers": ["                subsets = dim_coord_subset()"], "all_classes": null, "length": 8031}
{"pred": "\tthis.region = region;\n}\n/**\n * Sets the text of the control to the argument, which\n * may be null.\n *\n * @param text the new text (which may be null)\n *\n * @exception SWTException <ul>\n *    <li>", "answers": ["\tlong /*int*/ hRegion = 0;"], "all_classes": null, "length": 16705}
{"pred": "       autoclaim_data = self._autoclaim_papers(req, person_id, paper, login_status, uinfo,\n                                                autoclaim_ticket, external_pubs_association,\n                                                remote_systems,", "answers": ["                    operation_parts = {'pid': person_id,"], "all_classes": null, "length": 8290}
{"pred": "=====================\n\n    # TODO: This is a placeholder for a more sophisticated email handling\n    # mechanism.  The current implementation is not scalable and will not\n    # work for large numbers of courses.\n    #\n    # We should move this functionality to a separate service that can\n   ", "answers": ["            u\"User %s (%s) opted in to receive emails from course %s\","], "all_classes": null, "length": 8301}
{"pred": "# Generate the conversion functions for each member type.\n# For each member type, generate a conversion function that converts\n# from the member type to the union type.\n# For each member type, generate a conversion function that converts\n# from the union type to the member type.\n# For each", "answers": ["        if len(arrayObjectMemberTypes) > 0:"], "all_classes": null, "length": 12254}
{"pred": "#~ class ParseResults(list):\n#~     \"\"\"\n#~     ParseResults is a list-like object that can be indexed like a list, but also has\n#~     the ability to return the parsed text and location information for each token.\n#~     \"\"\"\n#~    ", "answers": ["                    tokenlist[ikey] = _ParseResultsWithOffset(dictvalue,i)"], "all_classes": null, "length": 11936}
{"pred": " if (matched_zero and matched_zero.group(1) == '0'):\n    return False\n  if (Match(r'^\\s*const\\s+', remainder)):\n    return False\n  if (Match(r'^\\s*throw\\s+', remainder)):\n", "answers": ["    if matched_zero and matched_zero.group(1) != '0':"], "all_classes": null, "length": 20316}
{"pred": "# This is a hack to make the code work on Windows.  The problem is that\n# the Windows version of Git doesn't support the \"git diff --cached\" command\n# that we use to get the base file.  Instead, we use \"git diff --name-only\"\n# to", "answers": ["          if after == NULL_HASH:"], "all_classes": null, "length": 10689}
{"pred": "           url = _get_subfield_value(fft, 'u', '')\n            if not url:\n                raise Exception(\"FFT tag is missing the URL field\")\n            # Let's discover the docname\n            docname = _get_subfield_value(fft", "answers": ["            url = field_get_subfield_values(fft, 'a')"], "all_classes": null, "length": 8249}
{"pred": "       List<IfdId> allowedIfds = new ArrayList<IfdId>();\n        for (int i = 0; i < ifds.length; i++) {\n            IfdId ifd = IfdId.fromValue(ifds[i]);\n            if ((ifd", "answers": ["        ArrayList<Integer> l = new ArrayList<>();"], "all_classes": null, "length": 9563}
{"pred": "           c = new double[m];\n            i = 0;\n            for(j=0; j<m; j++)\n            {\n                c[j] = b[j];\n            }\n        }\n    }\n}\n/*************************************************************************\n", "answers": ["            c = new double[m];"], "all_classes": null, "length": 10316}
{"pred": "       };\n    }\n}", "answers": ["            \"\\x1FF2\\x1F7C\\x03B9\", /* 1FF2; 1F7C 03B9; Case map */"], "all_classes": null, "length": 14273}
{"pred": "       drawImage(bImg, x, y, null);\n        if (op != null) {\n            op.filter(bImg, null);\n        }\n    }\n    public void drawImage(BufferedImage bImg,\n                          int x,\n                          int y,", "answers": ["        if (bImg == null) {"], "all_classes": null, "length": 14028}
{"pred": "     int pkgStart = fileName.length;\n      for (int i = fileName.length - 1; i >= 0; --i) {\n        if (fileName[i] == '/') {\n          pkgStart = i + 1;\n          break;\n        }\n", "answers": ["      Path path = new Path(new String(fileName, 0, pkgEnd));"], "all_classes": null, "length": 9133}
{"pred": "\n# Get the list of macros to extract.\nmacros = names.split()\n# Open the file.\nfilename = os.path.join(os.getcwd(), \"sip.pro\")\nf = open(filename, \"r\")\n# Read the file line by line", "answers": ["                if adding and rhs != \"\":"], "all_classes": null, "length": 8273}
{"pred": "           if end and end_line == t[2][0]:\n                logical[-1] += text\n            else:\n                logical.append(text)\n            previous = t\n        if previous:\n            end_line, end = previous[3]\n            if not end and", "answers": ["                start_line, start = t[2]"], "all_classes": null, "length": 8040}
{"pred": "\n    def parse_poly(self, poly):\n        \"\"\" Parse a polynomial string into a list of coefficients \"\"\"\n        # This is a very naive parser. It does not handle the case where\n        # the polynomial has a leading term of zero.\n        # It does not handle the case where", "answers": ["        with open(filename, \"r\") as inputfile:"], "all_classes": null, "length": 9404}
{"pred": "\t\t\t\tif (mediaEncoderItems.Length != 3)\n\t\t\t\t{\n\t\t\t\t\tthrow new ArgumentException(\"Invalid media encoder definition: \" + mediaEncStr);\n\t\t\t\t}\n\t\t\t\tstring mediaExtension = mediaEncoderItems[0", "answers": ["\t\t\t\tif (mediaEncoderItems.Length != 3)"], "all_classes": null, "length": 11381}
{"pred": "           for k in self.splitSet:\n                if k in tree.splitSet:\n                    continue\n                theSum += k.len\n            for k in tree.splitSet:\n                if k in self.splitSet:\n                    continue\n                theSum +=", "answers": ["            for k in self.splitKeySet.intersection(tree2.splitKeySet):"], "all_classes": null, "length": 10347}
{"pred": "class Cube(object):\n\"\"\"\nA :class:`Cube` is a container for a single :class:`numpy.ndarray` and\n:class:`CubeMetadata` instance.\n\"\"\"\nclass Cube(object):\n    \"\"\"\n    A :class:`Cube` is", "answers": ["                kwargs = dict(kwargs)"], "all_classes": null, "length": 11922}
{"pred": "# Define a new event type for the \"before_commit\" event.\nclass BeforeCommitEvents(event.Event):\n    \"\"\"Event type for the \"before_commit\" event.\n    \"\"\"\n    pass\n# Define a new event type for the \"after_commit\" event.\nclass After", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": "               int left = a.getDimensionPixelSize(LEFT_MARGIN, UNDEFINED);\n                int top = a.getDimensionPixelSize(TOP_MARGIN, UNDEFINED);\n                int right = a.getDimensionPixelSize(RIGHT_MARG", "answers": ["                int margin = a.getDimensionPixelSize(MARGIN, DEFAULT_MARGIN);"], "all_classes": null, "length": 9007}
{"pred": "       return _uuid;\n    }\n    /**\n     * Gets the connection properties.\n     *\n     * @return Map of connection properties\n     */\n    Map getConnectionProperties()\n    {\n        if (TraceComponent.isAnyTracingEnabled() && TraceComponent.isEntryEnabled", "answers": ["        if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())"], "all_classes": null, "length": 9441}
{"pred": "           return new SynthesizedDynamicOperatorSymbol(op, leftType, rightType, returnType, isChecked);\n        }\n        #endregion\n        #endregion\n        #endregion\n    }\n}\n```\nThe code above is incomplete and needs to be completed to function correctly.", "answers": ["                if ((object)leftType == null)"], "all_classes": null, "length": 15198}
{"pred": "# This is the main entry point for the interpreter.\ndef main():\n    \"\"\"Run the interpreter.\"\"\"\n    # Set up the interpreter.\n    interpreter = Interpreter()\n    # Parse the command line arguments.\n    interpreter.parseArgs()\n    # Set up the", "answers": ["        if expression in ('1', 'True'): return True"], "all_classes": null, "length": 8731}
{"pred": "     for (int j = 0; j < dsize; j++) {\n        CRFDatum<Collection<String>, String> datum = document.get(j);\n        int position = datum.position();\n        int label = datum.label().get(0);\n", "answers": ["      if (featureVals != null)"], "all_classes": null, "length": 8316}
{"pred": "       /// <summary>\n        /// </summary>\n        internal uint pad; // padding\n    };\n    // subrecord for LF_METHODLIST\n    // LF_METHODLIST [LF_METHOD]\n    // LF_METHODLIST [LF_METHOD]\n    //", "answers": ["        internal string name; // length prefixed name of method"], "all_classes": null, "length": 9110}
{"pred": "           if (extensions.Contains(\"GL_OES_EGL_image\"))\n            {\n                contextProfile = _CONTEXT_PROFILE_ES;\n                contextProfileMask = _CONTEXT_PROFILE_MASK_ES;\n                contextFlags = _CONTEXT_FLAG_FORWAR", "answers": ["            if (GL.GetString(StringName.Version).StartsWith(\"GL ES\"))"], "all_classes": null, "length": 8378}
{"pred": "\ndef bibtex_to_xml(bibtex_file):\n    \"\"\"\n    Convert a BibTeX file to XML.\n    \"\"\"\n    bibtex_data = file(bibtex_file).read()\n    bibtex_data = bibtex_", "answers": ["    return (0, CFG_WEBACCESS_WARNING_MSGS[0])"], "all_classes": null, "length": 11744}
{"pred": "\nself._initialized = True\n\nclass UDFLogicalFileStructure(object):\n    \"\"\"Class to support UDF Logical File Structures.\"\"\"\n\n    __slots__ = ('_initialized', '_file_id', '_file_size', '_file_flags', '_file_time',", "answers": ["        self.impl_id = UDFEntityID()"], "all_classes": null, "length": 10644}
{"pred": "=====================\n\ndef _get_grouping_key(grouper):\n    \"\"\"\n    Get the grouping keys from a grouper.\n    \"\"\"\n    if isinstance(grouper, (Series, Index)):\n        return grouper\n    elif isinstance(grou", "answers": ["                            result = concat(values, keys=key_index,"], "all_classes": null, "length": 9883}
{"pred": "           case 'e':\n                if (next() != 'n') {\n                    throw error(\"Invalid flag: e\");\n                }\n                if (next() != 'd') {\n                    throw error(\"Invalid flag: ed\");\n                }\n                if (", "answers": ["            case '-': // subFlag then fall through"], "all_classes": null, "length": 10915}
{"pred": "       final VirtualMachineProfileImpl vmProfile = _vmProfiles.get(vmUuid);\n        final VirtualMachineProfileImpl vmProfileDest = _vmProfiles.get(vmProfile.getProfileId());\n        final Host host = _hostManager.findById(destHostId);\n       ", "answers": ["        final VMInstanceVO vm = _vmDao.findByUuid(vmUuid);"], "all_classes": null, "length": 8853}
{"pred": "=======================\n        return -np.dot(self.N_k, np.exp(self.f_k - self.u_k)) / np.sum(np.exp(self.f_k - self.u_k))\n\"\"\"\nThis is the gradient of the objective", "answers": ["        W_nk = self._computeWeights(recalc_denom=True)"], "all_classes": null, "length": 12510}
{"pred": "   def test_statDirectory(self):\n        \"\"\"\n        Check the output of the stat method on a directory.\n        \"\"\"\n        self.createDirectory('ned')\n        d = self.shell.stat(('ned',), ('size', 'isDirectory'))\n        d.addErr", "answers": ["        d = self.shell.stat(('ned',), ('size', 'directory'))"], "all_classes": null, "length": 8415}
{"pred": "           }\n            return i;\n        }\n        \n        \n        /**\n         * Closes this input stream and releases any system resources\n         * associated with it.\n         *\n         * @throws IOException if an I/O error occurs.\n         */\n        @Override\n        public", "answers": ["                if( b >= 0 ) {"], "all_classes": null, "length": 9989}
{"pred": "           if (b == null)  return a;\n            return new ToolkitEventMulticaster(a, b);\n        }\n        static AWTEventListener remove(AWTEventListener a,\n                                        AWTEventListener b) {\n            if (a == b) {\n               ", "answers": ["            if (b == null)  return a;"], "all_classes": null, "length": 10923}
{"pred": "\t\t\t\t\t\t\t\tresults.Sort( AccountComparer.Instance );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfrom.SendGump( new AdminAccountListGump( 0, results, m_From, m_Page ) );\n\t", "answers": ["\t\t\t\t\t\t\t\tresults.Sort( AccountComparer.Instance );"], "all_classes": null, "length": 9034}
{"pred": "           if (result == RESULT.OK)\n            {\n                soundnew = new Sound(soundraw);\n                sound = soundnew;\n            }\n            return result;\n        }\n        public RESULT createSoundFromFile  (string filename, MODE mode, ref C", "answers": ["            if (result != RESULT.OK)"], "all_classes": null, "length": 14660}
{"pred": "           tbl_ix = data[base] & 255;\n            int size = 1+16+huffval.length;\n            if (lenAvailable < size) {\n                if (result > 0)\n                    throw new IOException(\"Not enough data to", "answers": ["                tbl_ix = data[base] & 255;"], "all_classes": null, "length": 16751}
{"pred": "                   this.AddLabel(x3, 215, 0x2712, \"Deathball\");\n                    this.AddButton(x3 - 50, 215, 0x2712, 0x2712,", "answers": ["                    this.AddLabel(x2 + 30, 215, 55, a.Text(200233));  // \"DeathBall\""], "all_classes": null, "length": 8017}
{"pred": "           TemplateDT.Retrieve(AFamilyPartnerKey, AReadTransaction);\n            TemplateRow = TemplateDT.GetRow(0);\n            RequiredColumns = new StringCollection();\n            RequiredColumns.Add(MPersonTable.P_PERSON_PARTNER_KEY);\n            TemplateDT", "answers": ["            TemplateRow = TemplateDT.NewRowTyped(false);"], "all_classes": null, "length": 8754}
{"pred": "\t\tif (gfp.encoder_padding > 0) {\n\t\t\tret = lame_encode_frame(gfp, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,", "answers": ["\t\tif (gfp != null && gfp.class_id == LAME_ID) {"], "all_classes": null, "length": 8018}
{"pred": "               if (AllSubmissionsOK)\n                {\n                    // Send Acknowledgement to Client\n                    TSession.Current.SendMessage(new TMessage(TMessageType.PartnerEditScreen_SubmitChangesAcknowledgement));\n                }\n              ", "answers": ["                if (AllSubmissionsOK == false)"], "all_classes": null, "length": 8128}
{"pred": "\n        elif child.nodeType == child.ELEMENT_NODE:\n            if child.tagName == \"skeleton\":\n                self.skeleton = child.textContent\n            elif child.tagName == \"makefile\":\n                self.makefile = child.textContent\n", "answers": ["                    elif name == \"requires\":"], "all_classes": null, "length": 9136}
